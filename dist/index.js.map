{
  "version": 3,
  "sources": ["../node_modules/orderedmap/index.es.js", "../node_modules/prosemirror-model/src/diff.js", "../node_modules/prosemirror-model/src/fragment.js", "../node_modules/prosemirror-model/src/comparedeep.js", "../node_modules/prosemirror-model/src/mark.js", "../node_modules/prosemirror-model/src/replace.js", "../node_modules/prosemirror-model/src/resolvedpos.js", "../node_modules/prosemirror-model/src/node.js", "../node_modules/prosemirror-model/src/content.js", "../node_modules/prosemirror-model/src/schema.js", "../node_modules/prosemirror-model/src/from_dom.js", "../node_modules/prosemirror-model/src/to_dom.js", "../src/schema.ts", "../node_modules/prosemirror-transform/src/map.js", "../node_modules/prosemirror-transform/src/transform.js", "../node_modules/prosemirror-transform/src/step.js", "../node_modules/prosemirror-transform/src/replace_step.js", "../node_modules/prosemirror-transform/src/structure.js", "../node_modules/prosemirror-transform/src/mark_step.js", "../node_modules/prosemirror-transform/src/mark.js", "../node_modules/prosemirror-transform/src/replace.js", "../node_modules/prosemirror-state/src/selection.js", "../node_modules/prosemirror-state/src/transaction.js", "../node_modules/prosemirror-state/src/state.js", "../node_modules/prosemirror-state/src/plugin.js", "../node_modules/prosemirror-view/src/browser.js", "../node_modules/prosemirror-view/src/dom.js", "../node_modules/prosemirror-view/src/domcoords.js", "../node_modules/prosemirror-view/src/viewdesc.js", "../node_modules/prosemirror-view/src/selection.js", "../node_modules/prosemirror-view/src/capturekeys.js", "../node_modules/prosemirror-view/src/domchange.js", "../node_modules/prosemirror-view/src/clipboard.js", "../node_modules/prosemirror-view/src/domobserver.js", "../node_modules/prosemirror-view/src/input.js", "../node_modules/prosemirror-view/src/decoration.js", "../node_modules/prosemirror-view/src/index.js", "../node_modules/rope-sequence/dist/index.es.js", "../node_modules/prosemirror-history/src/history.js", "../node_modules/w3c-keyname/index.es.js", "../node_modules/prosemirror-keymap/src/keymap.js", "../node_modules/prosemirror-commands/src/commands.js", "../src/index.ts"],
  "sourcesContent": ["// ::- Persistent data structure representing an ordered mapping from\n// strings to values, with some convenient update methods.\nfunction OrderedMap(content) {\n  this.content = content;\n}\n\nOrderedMap.prototype = {\n  constructor: OrderedMap,\n\n  find: function(key) {\n    for (var i = 0; i < this.content.length; i += 2)\n      if (this.content[i] === key) return i\n    return -1\n  },\n\n  // :: (string) \u2192 ?any\n  // Retrieve the value stored under `key`, or return undefined when\n  // no such key exists.\n  get: function(key) {\n    var found = this.find(key);\n    return found == -1 ? undefined : this.content[found + 1]\n  },\n\n  // :: (string, any, ?string) \u2192 OrderedMap\n  // Create a new map by replacing the value of `key` with a new\n  // value, or adding a binding to the end of the map. If `newKey` is\n  // given, the key of the binding will be replaced with that key.\n  update: function(key, value, newKey) {\n    var self = newKey && newKey != key ? this.remove(newKey) : this;\n    var found = self.find(key), content = self.content.slice();\n    if (found == -1) {\n      content.push(newKey || key, value);\n    } else {\n      content[found + 1] = value;\n      if (newKey) content[found] = newKey;\n    }\n    return new OrderedMap(content)\n  },\n\n  // :: (string) \u2192 OrderedMap\n  // Return a map with the given key removed, if it existed.\n  remove: function(key) {\n    var found = this.find(key);\n    if (found == -1) return this\n    var content = this.content.slice();\n    content.splice(found, 2);\n    return new OrderedMap(content)\n  },\n\n  // :: (string, any) \u2192 OrderedMap\n  // Add a new key to the start of the map.\n  addToStart: function(key, value) {\n    return new OrderedMap([key, value].concat(this.remove(key).content))\n  },\n\n  // :: (string, any) \u2192 OrderedMap\n  // Add a new key to the end of the map.\n  addToEnd: function(key, value) {\n    var content = this.remove(key).content.slice();\n    content.push(key, value);\n    return new OrderedMap(content)\n  },\n\n  // :: (string, string, any) \u2192 OrderedMap\n  // Add a key after the given key. If `place` is not found, the new\n  // key is added to the end.\n  addBefore: function(place, key, value) {\n    var without = this.remove(key), content = without.content.slice();\n    var found = without.find(place);\n    content.splice(found == -1 ? content.length : found, 0, key, value);\n    return new OrderedMap(content)\n  },\n\n  // :: ((key: string, value: any))\n  // Call the given function for each key/value pair in the map, in\n  // order.\n  forEach: function(f) {\n    for (var i = 0; i < this.content.length; i += 2)\n      f(this.content[i], this.content[i + 1]);\n  },\n\n  // :: (union<Object, OrderedMap>) \u2192 OrderedMap\n  // Create a new map by prepending the keys in this map that don't\n  // appear in `map` before the keys in `map`.\n  prepend: function(map) {\n    map = OrderedMap.from(map);\n    if (!map.size) return this\n    return new OrderedMap(map.content.concat(this.subtract(map).content))\n  },\n\n  // :: (union<Object, OrderedMap>) \u2192 OrderedMap\n  // Create a new map by appending the keys in this map that don't\n  // appear in `map` after the keys in `map`.\n  append: function(map) {\n    map = OrderedMap.from(map);\n    if (!map.size) return this\n    return new OrderedMap(this.subtract(map).content.concat(map.content))\n  },\n\n  // :: (union<Object, OrderedMap>) \u2192 OrderedMap\n  // Create a map containing all the keys in this map that don't\n  // appear in `map`.\n  subtract: function(map) {\n    var result = this;\n    map = OrderedMap.from(map);\n    for (var i = 0; i < map.content.length; i += 2)\n      result = result.remove(map.content[i]);\n    return result\n  },\n\n  // :: number\n  // The amount of keys in this map.\n  get size() {\n    return this.content.length >> 1\n  }\n};\n\n// :: (?union<Object, OrderedMap>) \u2192 OrderedMap\n// Return a map with the given content. If null, create an empty\n// map. If given an ordered map, return that map itself. If given an\n// object, create a map from the object's properties.\nOrderedMap.from = function(value) {\n  if (value instanceof OrderedMap) return value\n  var content = [];\n  if (value) for (var prop in value) content.push(prop, value[prop]);\n  return new OrderedMap(content)\n};\n\nvar orderedmap = OrderedMap;\n\nexport default orderedmap;\n", "export function findDiffStart(a, b, pos) {\n  for (let i = 0;; i++) {\n    if (i == a.childCount || i == b.childCount)\n      return a.childCount == b.childCount ? null : pos\n\n    let childA = a.child(i), childB = b.child(i)\n    if (childA == childB) { pos += childA.nodeSize; continue }\n\n    if (!childA.sameMarkup(childB)) return pos\n\n    if (childA.isText && childA.text != childB.text) {\n      for (let j = 0; childA.text[j] == childB.text[j]; j++)\n        pos++\n      return pos\n    }\n    if (childA.content.size || childB.content.size) {\n      let inner = findDiffStart(childA.content, childB.content, pos + 1)\n      if (inner != null) return inner\n    }\n    pos += childA.nodeSize\n  }\n}\n\nexport function findDiffEnd(a, b, posA, posB) {\n  for (let iA = a.childCount, iB = b.childCount;;) {\n    if (iA == 0 || iB == 0)\n      return iA == iB ? null : {a: posA, b: posB}\n\n    let childA = a.child(--iA), childB = b.child(--iB), size = childA.nodeSize\n    if (childA == childB) {\n      posA -= size; posB -= size\n      continue\n    }\n\n    if (!childA.sameMarkup(childB)) return {a: posA, b: posB}\n\n    if (childA.isText && childA.text != childB.text) {\n      let same = 0, minSize = Math.min(childA.text.length, childB.text.length)\n      while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {\n        same++; posA--; posB--\n      }\n      return {a: posA, b: posB}\n    }\n    if (childA.content.size || childB.content.size) {\n      let inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1)\n      if (inner) return inner\n    }\n    posA -= size; posB -= size\n  }\n}\n", "import {findDiffStart, findDiffEnd} from \"./diff\"\n\n// ::- A fragment represents a node's collection of child nodes.\n//\n// Like nodes, fragments are persistent data structures, and you\n// should not mutate them or their content. Rather, you create new\n// instances whenever needed. The API tries to make this easy.\nexport class Fragment {\n  constructor(content, size) {\n    this.content = content\n    // :: number\n    // The size of the fragment, which is the total of the size of its\n    // content nodes.\n    this.size = size || 0\n    if (size == null) for (let i = 0; i < content.length; i++)\n      this.size += content[i].nodeSize\n  }\n\n  // :: (number, number, (node: Node, start: number, parent: Node, index: number) \u2192 ?bool, ?number)\n  // Invoke a callback for all descendant nodes between the given two\n  // positions (relative to start of this fragment). Doesn't descend\n  // into a node when the callback returns `false`.\n  nodesBetween(from, to, f, nodeStart = 0, parent) {\n    for (let i = 0, pos = 0; pos < to; i++) {\n      let child = this.content[i], end = pos + child.nodeSize\n      if (end > from && f(child, nodeStart + pos, parent, i) !== false && child.content.size) {\n        let start = pos + 1\n        child.nodesBetween(Math.max(0, from - start),\n                           Math.min(child.content.size, to - start),\n                           f, nodeStart + start)\n      }\n      pos = end\n    }\n  }\n\n  // :: ((node: Node, pos: number, parent: Node) \u2192 ?bool)\n  // Call the given callback for every descendant node. The callback\n  // may return `false` to prevent traversal of a given node's children.\n  descendants(f) {\n    this.nodesBetween(0, this.size, f)\n  }\n\n  // :: (number, number, ?string, ?string | ?(leafNode: Node) -> string) \u2192 string\n  // Extract the text between `from` and `to`. See the same method on\n  // [`Node`](#model.Node.textBetween).\n  textBetween(from, to, blockSeparator, leafText) {\n    let text = \"\", separated = true\n    this.nodesBetween(from, to, (node, pos) => {\n      if (node.isText) {\n        text += node.text.slice(Math.max(from, pos) - pos, to - pos)\n        separated = !blockSeparator\n      } else if (node.isLeaf && leafText) {\n        text += typeof leafText === 'function' ? leafText(node): leafText\n        separated = !blockSeparator\n      } else if (!separated && node.isBlock) {\n        text += blockSeparator\n        separated = true\n      }\n    }, 0)\n    return text\n  }\n\n  // :: (Fragment) \u2192 Fragment\n  // Create a new fragment containing the combined content of this\n  // fragment and the other.\n  append(other) {\n    if (!other.size) return this\n    if (!this.size) return other\n    let last = this.lastChild, first = other.firstChild, content = this.content.slice(), i = 0\n    if (last.isText && last.sameMarkup(first)) {\n      content[content.length - 1] = last.withText(last.text + first.text)\n      i = 1\n    }\n    for (; i < other.content.length; i++) content.push(other.content[i])\n    return new Fragment(content, this.size + other.size)\n  }\n\n  // :: (number, ?number) \u2192 Fragment\n  // Cut out the sub-fragment between the two given positions.\n  cut(from, to) {\n    if (to == null) to = this.size\n    if (from == 0 && to == this.size) return this\n    let result = [], size = 0\n    if (to > from) for (let i = 0, pos = 0; pos < to; i++) {\n      let child = this.content[i], end = pos + child.nodeSize\n      if (end > from) {\n        if (pos < from || end > to) {\n          if (child.isText)\n            child = child.cut(Math.max(0, from - pos), Math.min(child.text.length, to - pos))\n          else\n            child = child.cut(Math.max(0, from - pos - 1), Math.min(child.content.size, to - pos - 1))\n        }\n        result.push(child)\n        size += child.nodeSize\n      }\n      pos = end\n    }\n    return new Fragment(result, size)\n  }\n\n  cutByIndex(from, to) {\n    if (from == to) return Fragment.empty\n    if (from == 0 && to == this.content.length) return this\n    return new Fragment(this.content.slice(from, to))\n  }\n\n  // :: (number, Node) \u2192 Fragment\n  // Create a new fragment in which the node at the given index is\n  // replaced by the given node.\n  replaceChild(index, node) {\n    let current = this.content[index]\n    if (current == node) return this\n    let copy = this.content.slice()\n    let size = this.size + node.nodeSize - current.nodeSize\n    copy[index] = node\n    return new Fragment(copy, size)\n  }\n\n  // : (Node) \u2192 Fragment\n  // Create a new fragment by prepending the given node to this\n  // fragment.\n  addToStart(node) {\n    return new Fragment([node].concat(this.content), this.size + node.nodeSize)\n  }\n\n  // : (Node) \u2192 Fragment\n  // Create a new fragment by appending the given node to this\n  // fragment.\n  addToEnd(node) {\n    return new Fragment(this.content.concat(node), this.size + node.nodeSize)\n  }\n\n  // :: (Fragment) \u2192 bool\n  // Compare this fragment to another one.\n  eq(other) {\n    if (this.content.length != other.content.length) return false\n    for (let i = 0; i < this.content.length; i++)\n      if (!this.content[i].eq(other.content[i])) return false\n    return true\n  }\n\n  // :: ?Node\n  // The first child of the fragment, or `null` if it is empty.\n  get firstChild() { return this.content.length ? this.content[0] : null }\n\n  // :: ?Node\n  // The last child of the fragment, or `null` if it is empty.\n  get lastChild() { return this.content.length ? this.content[this.content.length - 1] : null }\n\n  // :: number\n  // The number of child nodes in this fragment.\n  get childCount() { return this.content.length }\n\n  // :: (number) \u2192 Node\n  // Get the child node at the given index. Raise an error when the\n  // index is out of range.\n  child(index) {\n    let found = this.content[index]\n    if (!found) throw new RangeError(\"Index \" + index + \" out of range for \" + this)\n    return found\n  }\n\n  // :: (number) \u2192 ?Node\n  // Get the child node at the given index, if it exists.\n  maybeChild(index) {\n    return this.content[index]\n  }\n\n  // :: ((node: Node, offset: number, index: number))\n  // Call `f` for every child node, passing the node, its offset\n  // into this parent node, and its index.\n  forEach(f) {\n    for (let i = 0, p = 0; i < this.content.length; i++) {\n      let child = this.content[i]\n      f(child, p, i)\n      p += child.nodeSize\n    }\n  }\n\n  // :: (Fragment) \u2192 ?number\n  // Find the first position at which this fragment and another\n  // fragment differ, or `null` if they are the same.\n  findDiffStart(other, pos = 0) {\n    return findDiffStart(this, other, pos)\n  }\n\n  // :: (Fragment) \u2192 ?{a: number, b: number}\n  // Find the first position, searching from the end, at which this\n  // fragment and the given fragment differ, or `null` if they are the\n  // same. Since this position will not be the same in both nodes, an\n  // object with two separate positions is returned.\n  findDiffEnd(other, pos = this.size, otherPos = other.size) {\n    return findDiffEnd(this, other, pos, otherPos)\n  }\n\n  // : (number, ?number) \u2192 {index: number, offset: number}\n  // Find the index and inner offset corresponding to a given relative\n  // position in this fragment. The result object will be reused\n  // (overwritten) the next time the function is called. (Not public.)\n  findIndex(pos, round = -1) {\n    if (pos == 0) return retIndex(0, pos)\n    if (pos == this.size) return retIndex(this.content.length, pos)\n    if (pos > this.size || pos < 0) throw new RangeError(`Position ${pos} outside of fragment (${this})`)\n    for (let i = 0, curPos = 0;; i++) {\n      let cur = this.child(i), end = curPos + cur.nodeSize\n      if (end >= pos) {\n        if (end == pos || round > 0) return retIndex(i + 1, end)\n        return retIndex(i, curPos)\n      }\n      curPos = end\n    }\n  }\n\n  // :: () \u2192 string\n  // Return a debugging string that describes this fragment.\n  toString() { return \"<\" + this.toStringInner() + \">\" }\n\n  toStringInner() { return this.content.join(\", \") }\n\n  // :: () \u2192 ?Object\n  // Create a JSON-serializeable representation of this fragment.\n  toJSON() {\n    return this.content.length ? this.content.map(n => n.toJSON()) : null\n  }\n\n  // :: (Schema, ?Object) \u2192 Fragment\n  // Deserialize a fragment from its JSON representation.\n  static fromJSON(schema, value) {\n    if (!value) return Fragment.empty\n    if (!Array.isArray(value)) throw new RangeError(\"Invalid input for Fragment.fromJSON\")\n    return new Fragment(value.map(schema.nodeFromJSON))\n  }\n\n  // :: ([Node]) \u2192 Fragment\n  // Build a fragment from an array of nodes. Ensures that adjacent\n  // text nodes with the same marks are joined together.\n  static fromArray(array) {\n    if (!array.length) return Fragment.empty\n    let joined, size = 0\n    for (let i = 0; i < array.length; i++) {\n      let node = array[i]\n      size += node.nodeSize\n      if (i && node.isText && array[i - 1].sameMarkup(node)) {\n        if (!joined) joined = array.slice(0, i)\n        joined[joined.length - 1] = node.withText(joined[joined.length - 1].text + node.text)\n      } else if (joined) {\n        joined.push(node)\n      }\n    }\n    return new Fragment(joined || array, size)\n  }\n\n  // :: (?union<Fragment, Node, [Node]>) \u2192 Fragment\n  // Create a fragment from something that can be interpreted as a set\n  // of nodes. For `null`, it returns the empty fragment. For a\n  // fragment, the fragment itself. For a node or array of nodes, a\n  // fragment containing those nodes.\n  static from(nodes) {\n    if (!nodes) return Fragment.empty\n    if (nodes instanceof Fragment) return nodes\n    if (Array.isArray(nodes)) return this.fromArray(nodes)\n    if (nodes.attrs) return new Fragment([nodes], nodes.nodeSize)\n    throw new RangeError(\"Can not convert \" + nodes + \" to a Fragment\" +\n                         (nodes.nodesBetween ? \" (looks like multiple versions of prosemirror-model were loaded)\" : \"\"))\n  }\n}\n\nconst found = {index: 0, offset: 0}\nfunction retIndex(index, offset) {\n  found.index = index\n  found.offset = offset\n  return found\n}\n\n// :: Fragment\n// An empty fragment. Intended to be reused whenever a node doesn't\n// contain anything (rather than allocating a new empty fragment for\n// each leaf node).\nFragment.empty = new Fragment([], 0)\n", "export function compareDeep(a, b) {\n  if (a === b) return true\n  if (!(a && typeof a == \"object\") ||\n      !(b && typeof b == \"object\")) return false\n  let array = Array.isArray(a)\n  if (Array.isArray(b) != array) return false\n  if (array) {\n    if (a.length != b.length) return false\n    for (let i = 0; i < a.length; i++) if (!compareDeep(a[i], b[i])) return false\n  } else {\n    for (let p in a) if (!(p in b) || !compareDeep(a[p], b[p])) return false\n    for (let p in b) if (!(p in a)) return false\n  }\n  return true\n}\n", "import {compareDeep} from \"./comparedeep\"\n\n// ::- A mark is a piece of information that can be attached to a node,\n// such as it being emphasized, in code font, or a link. It has a type\n// and optionally a set of attributes that provide further information\n// (such as the target of the link). Marks are created through a\n// `Schema`, which controls which types exist and which\n// attributes they have.\nexport class Mark {\n  constructor(type, attrs) {\n    // :: MarkType\n    // The type of this mark.\n    this.type = type\n    // :: Object\n    // The attributes associated with this mark.\n    this.attrs = attrs\n  }\n\n  // :: ([Mark]) \u2192 [Mark]\n  // Given a set of marks, create a new set which contains this one as\n  // well, in the right position. If this mark is already in the set,\n  // the set itself is returned. If any marks that are set to be\n  // [exclusive](#model.MarkSpec.excludes) with this mark are present,\n  // those are replaced by this one.\n  addToSet(set) {\n    let copy, placed = false\n    for (let i = 0; i < set.length; i++) {\n      let other = set[i]\n      if (this.eq(other)) return set\n      if (this.type.excludes(other.type)) {\n        if (!copy) copy = set.slice(0, i)\n      } else if (other.type.excludes(this.type)) {\n        return set\n      } else {\n        if (!placed && other.type.rank > this.type.rank) {\n          if (!copy) copy = set.slice(0, i)\n          copy.push(this)\n          placed = true\n        }\n        if (copy) copy.push(other)\n      }\n    }\n    if (!copy) copy = set.slice()\n    if (!placed) copy.push(this)\n    return copy\n  }\n\n  // :: ([Mark]) \u2192 [Mark]\n  // Remove this mark from the given set, returning a new set. If this\n  // mark is not in the set, the set itself is returned.\n  removeFromSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (this.eq(set[i]))\n        return set.slice(0, i).concat(set.slice(i + 1))\n    return set\n  }\n\n  // :: ([Mark]) \u2192 bool\n  // Test whether this mark is in the given set of marks.\n  isInSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (this.eq(set[i])) return true\n    return false\n  }\n\n  // :: (Mark) \u2192 bool\n  // Test whether this mark has the same type and attributes as\n  // another mark.\n  eq(other) {\n    return this == other ||\n      (this.type == other.type && compareDeep(this.attrs, other.attrs))\n  }\n\n  // :: () \u2192 Object\n  // Convert this mark to a JSON-serializeable representation.\n  toJSON() {\n    let obj = {type: this.type.name}\n    for (let _ in this.attrs) {\n      obj.attrs = this.attrs\n      break\n    }\n    return obj\n  }\n\n  // :: (Schema, Object) \u2192 Mark\n  static fromJSON(schema, json) {\n    if (!json) throw new RangeError(\"Invalid input for Mark.fromJSON\")\n    let type = schema.marks[json.type]\n    if (!type) throw new RangeError(`There is no mark type ${json.type} in this schema`)\n    return type.create(json.attrs)\n  }\n\n  // :: ([Mark], [Mark]) \u2192 bool\n  // Test whether two sets of marks are identical.\n  static sameSet(a, b) {\n    if (a == b) return true\n    if (a.length != b.length) return false\n    for (let i = 0; i < a.length; i++)\n      if (!a[i].eq(b[i])) return false\n    return true\n  }\n\n  // :: (?union<Mark, [Mark]>) \u2192 [Mark]\n  // Create a properly sorted mark set from null, a single mark, or an\n  // unsorted array of marks.\n  static setFrom(marks) {\n    if (!marks || marks.length == 0) return Mark.none\n    if (marks instanceof Mark) return [marks]\n    let copy = marks.slice()\n    copy.sort((a, b) => a.type.rank - b.type.rank)\n    return copy\n  }\n}\n\n// :: [Mark] The empty set of marks.\nMark.none = []\n", "import {Fragment} from \"./fragment\"\n\n// ReplaceError:: class extends Error\n// Error type raised by [`Node.replace`](#model.Node.replace) when\n// given an invalid replacement.\n\nexport function ReplaceError(message) {\n  let err = Error.call(this, message)\n  err.__proto__ = ReplaceError.prototype\n  return err\n}\n\nReplaceError.prototype = Object.create(Error.prototype)\nReplaceError.prototype.constructor = ReplaceError\nReplaceError.prototype.name = \"ReplaceError\"\n\n// ::- A slice represents a piece cut out of a larger document. It\n// stores not only a fragment, but also the depth up to which nodes on\n// both side are \u2018open\u2019 (cut through).\nexport class Slice {\n  // :: (Fragment, number, number)\n  // Create a slice. When specifying a non-zero open depth, you must\n  // make sure that there are nodes of at least that depth at the\n  // appropriate side of the fragment\u2014i.e. if the fragment is an empty\n  // paragraph node, `openStart` and `openEnd` can't be greater than 1.\n  //\n  // It is not necessary for the content of open nodes to conform to\n  // the schema's content constraints, though it should be a valid\n  // start/end/middle for such a node, depending on which sides are\n  // open.\n  constructor(content, openStart, openEnd) {\n    // :: Fragment The slice's content.\n    this.content = content\n    // :: number The open depth at the start.\n    this.openStart = openStart\n    // :: number The open depth at the end.\n    this.openEnd = openEnd\n  }\n\n  // :: number\n  // The size this slice would add when inserted into a document.\n  get size() {\n    return this.content.size - this.openStart - this.openEnd\n  }\n\n  insertAt(pos, fragment) {\n    let content = insertInto(this.content, pos + this.openStart, fragment, null)\n    return content && new Slice(content, this.openStart, this.openEnd)\n  }\n\n  removeBetween(from, to) {\n    return new Slice(removeRange(this.content, from + this.openStart, to + this.openStart), this.openStart, this.openEnd)\n  }\n\n  // :: (Slice) \u2192 bool\n  // Tests whether this slice is equal to another slice.\n  eq(other) {\n    return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd\n  }\n\n  toString() {\n    return this.content + \"(\" + this.openStart + \",\" + this.openEnd + \")\"\n  }\n\n  // :: () \u2192 ?Object\n  // Convert a slice to a JSON-serializable representation.\n  toJSON() {\n    if (!this.content.size) return null\n    let json = {content: this.content.toJSON()}\n    if (this.openStart > 0) json.openStart = this.openStart\n    if (this.openEnd > 0) json.openEnd = this.openEnd\n    return json\n  }\n\n  // :: (Schema, ?Object) \u2192 Slice\n  // Deserialize a slice from its JSON representation.\n  static fromJSON(schema, json) {\n    if (!json) return Slice.empty\n    let openStart = json.openStart || 0, openEnd = json.openEnd || 0\n    if (typeof openStart != \"number\" || typeof openEnd != \"number\")\n      throw new RangeError(\"Invalid input for Slice.fromJSON\")\n    return new Slice(Fragment.fromJSON(schema, json.content), openStart, openEnd)\n  }\n\n  // :: (Fragment, ?bool) \u2192 Slice\n  // Create a slice from a fragment by taking the maximum possible\n  // open value on both side of the fragment.\n  static maxOpen(fragment, openIsolating=true) {\n    let openStart = 0, openEnd = 0\n    for (let n = fragment.firstChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.firstChild) openStart++\n    for (let n = fragment.lastChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.lastChild) openEnd++\n    return new Slice(fragment, openStart, openEnd)\n  }\n}\n\nfunction removeRange(content, from, to) {\n  let {index, offset} = content.findIndex(from), child = content.maybeChild(index)\n  let {index: indexTo, offset: offsetTo} = content.findIndex(to)\n  if (offset == from || child.isText) {\n    if (offsetTo != to && !content.child(indexTo).isText) throw new RangeError(\"Removing non-flat range\")\n    return content.cut(0, from).append(content.cut(to))\n  }\n  if (index != indexTo) throw new RangeError(\"Removing non-flat range\")\n  return content.replaceChild(index, child.copy(removeRange(child.content, from - offset - 1, to - offset - 1)))\n}\n\nfunction insertInto(content, dist, insert, parent) {\n  let {index, offset} = content.findIndex(dist), child = content.maybeChild(index)\n  if (offset == dist || child.isText) {\n    if (parent && !parent.canReplace(index, index, insert)) return null\n    return content.cut(0, dist).append(insert).append(content.cut(dist))\n  }\n  let inner = insertInto(child.content, dist - offset - 1, insert)\n  return inner && content.replaceChild(index, child.copy(inner))\n}\n\n// :: Slice\n// The empty slice.\nSlice.empty = new Slice(Fragment.empty, 0, 0)\n\nexport function replace($from, $to, slice) {\n  if (slice.openStart > $from.depth)\n    throw new ReplaceError(\"Inserted content deeper than insertion position\")\n  if ($from.depth - slice.openStart != $to.depth - slice.openEnd)\n    throw new ReplaceError(\"Inconsistent open depths\")\n  return replaceOuter($from, $to, slice, 0)\n}\n\nfunction replaceOuter($from, $to, slice, depth) {\n  let index = $from.index(depth), node = $from.node(depth)\n  if (index == $to.index(depth) && depth < $from.depth - slice.openStart) {\n    let inner = replaceOuter($from, $to, slice, depth + 1)\n    return node.copy(node.content.replaceChild(index, inner))\n  } else if (!slice.content.size) {\n    return close(node, replaceTwoWay($from, $to, depth))\n  } else if (!slice.openStart && !slice.openEnd && $from.depth == depth && $to.depth == depth) { // Simple, flat case\n    let parent = $from.parent, content = parent.content\n    return close(parent, content.cut(0, $from.parentOffset).append(slice.content).append(content.cut($to.parentOffset)))\n  } else {\n    let {start, end} = prepareSliceForReplace(slice, $from)\n    return close(node, replaceThreeWay($from, start, end, $to, depth))\n  }\n}\n\nfunction checkJoin(main, sub) {\n  if (!sub.type.compatibleContent(main.type))\n    throw new ReplaceError(\"Cannot join \" + sub.type.name + \" onto \" + main.type.name)\n}\n\nfunction joinable($before, $after, depth) {\n  let node = $before.node(depth)\n  checkJoin(node, $after.node(depth))\n  return node\n}\n\nfunction addNode(child, target) {\n  let last = target.length - 1\n  if (last >= 0 && child.isText && child.sameMarkup(target[last]))\n    target[last] = child.withText(target[last].text + child.text)\n  else\n    target.push(child)\n}\n\nfunction addRange($start, $end, depth, target) {\n  let node = ($end || $start).node(depth)\n  let startIndex = 0, endIndex = $end ? $end.index(depth) : node.childCount\n  if ($start) {\n    startIndex = $start.index(depth)\n    if ($start.depth > depth) {\n      startIndex++\n    } else if ($start.textOffset) {\n      addNode($start.nodeAfter, target)\n      startIndex++\n    }\n  }\n  for (let i = startIndex; i < endIndex; i++) addNode(node.child(i), target)\n  if ($end && $end.depth == depth && $end.textOffset)\n    addNode($end.nodeBefore, target)\n}\n\nfunction close(node, content) {\n  if (!node.type.validContent(content))\n    throw new ReplaceError(\"Invalid content for node \" + node.type.name)\n  return node.copy(content)\n}\n\nfunction replaceThreeWay($from, $start, $end, $to, depth) {\n  let openStart = $from.depth > depth && joinable($from, $start, depth + 1)\n  let openEnd = $to.depth > depth && joinable($end, $to, depth + 1)\n\n  let content = []\n  addRange(null, $from, depth, content)\n  if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {\n    checkJoin(openStart, openEnd)\n    addNode(close(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)), content)\n  } else {\n    if (openStart)\n      addNode(close(openStart, replaceTwoWay($from, $start, depth + 1)), content)\n    addRange($start, $end, depth, content)\n    if (openEnd)\n      addNode(close(openEnd, replaceTwoWay($end, $to, depth + 1)), content)\n  }\n  addRange($to, null, depth, content)\n  return new Fragment(content)\n}\n\nfunction replaceTwoWay($from, $to, depth) {\n  let content = []\n  addRange(null, $from, depth, content)\n  if ($from.depth > depth) {\n    let type = joinable($from, $to, depth + 1)\n    addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content)\n  }\n  addRange($to, null, depth, content)\n  return new Fragment(content)\n}\n\nfunction prepareSliceForReplace(slice, $along) {\n  let extra = $along.depth - slice.openStart, parent = $along.node(extra)\n  let node = parent.copy(slice.content)\n  for (let i = extra - 1; i >= 0; i--)\n    node = $along.node(i).copy(Fragment.from(node))\n  return {start: node.resolveNoCache(slice.openStart + extra),\n          end: node.resolveNoCache(node.content.size - slice.openEnd - extra)}\n}\n", "import {Mark} from \"./mark\"\n\n// ::- You can [_resolve_](#model.Node.resolve) a position to get more\n// information about it. Objects of this class represent such a\n// resolved position, providing various pieces of context information,\n// and some helper methods.\n//\n// Throughout this interface, methods that take an optional `depth`\n// parameter will interpret undefined as `this.depth` and negative\n// numbers as `this.depth + value`.\nexport class ResolvedPos {\n  constructor(pos, path, parentOffset) {\n    // :: number The position that was resolved.\n    this.pos = pos\n    this.path = path\n    // :: number\n    // The number of levels the parent node is from the root. If this\n    // position points directly into the root node, it is 0. If it\n    // points into a top-level paragraph, 1, and so on.\n    this.depth = path.length / 3 - 1\n    // :: number The offset this position has into its parent node.\n    this.parentOffset = parentOffset\n  }\n\n  resolveDepth(val) {\n    if (val == null) return this.depth\n    if (val < 0) return this.depth + val\n    return val\n  }\n\n  // :: Node\n  // The parent node that the position points into. Note that even if\n  // a position points into a text node, that node is not considered\n  // the parent\u2014text nodes are \u2018flat\u2019 in this model, and have no content.\n  get parent() { return this.node(this.depth) }\n\n  // :: Node\n  // The root node in which the position was resolved.\n  get doc() { return this.node(0) }\n\n  // :: (?number) \u2192 Node\n  // The ancestor node at the given level. `p.node(p.depth)` is the\n  // same as `p.parent`.\n  node(depth) { return this.path[this.resolveDepth(depth) * 3] }\n\n  // :: (?number) \u2192 number\n  // The index into the ancestor at the given level. If this points at\n  // the 3rd node in the 2nd paragraph on the top level, for example,\n  // `p.index(0)` is 1 and `p.index(1)` is 2.\n  index(depth) { return this.path[this.resolveDepth(depth) * 3 + 1] }\n\n  // :: (?number) \u2192 number\n  // The index pointing after this position into the ancestor at the\n  // given level.\n  indexAfter(depth) {\n    depth = this.resolveDepth(depth)\n    return this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1)\n  }\n\n  // :: (?number) \u2192 number\n  // The (absolute) position at the start of the node at the given\n  // level.\n  start(depth) {\n    depth = this.resolveDepth(depth)\n    return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1\n  }\n\n  // :: (?number) \u2192 number\n  // The (absolute) position at the end of the node at the given\n  // level.\n  end(depth) {\n    depth = this.resolveDepth(depth)\n    return this.start(depth) + this.node(depth).content.size\n  }\n\n  // :: (?number) \u2192 number\n  // The (absolute) position directly before the wrapping node at the\n  // given level, or, when `depth` is `this.depth + 1`, the original\n  // position.\n  before(depth) {\n    depth = this.resolveDepth(depth)\n    if (!depth) throw new RangeError(\"There is no position before the top-level node\")\n    return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1]\n  }\n\n  // :: (?number) \u2192 number\n  // The (absolute) position directly after the wrapping node at the\n  // given level, or the original position when `depth` is `this.depth + 1`.\n  after(depth) {\n    depth = this.resolveDepth(depth)\n    if (!depth) throw new RangeError(\"There is no position after the top-level node\")\n    return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize\n  }\n\n  // :: number\n  // When this position points into a text node, this returns the\n  // distance between the position and the start of the text node.\n  // Will be zero for positions that point between nodes.\n  get textOffset() { return this.pos - this.path[this.path.length - 1] }\n\n  // :: ?Node\n  // Get the node directly after the position, if any. If the position\n  // points into a text node, only the part of that node after the\n  // position is returned.\n  get nodeAfter() {\n    let parent = this.parent, index = this.index(this.depth)\n    if (index == parent.childCount) return null\n    let dOff = this.pos - this.path[this.path.length - 1], child = parent.child(index)\n    return dOff ? parent.child(index).cut(dOff) : child\n  }\n\n  // :: ?Node\n  // Get the node directly before the position, if any. If the\n  // position points into a text node, only the part of that node\n  // before the position is returned.\n  get nodeBefore() {\n    let index = this.index(this.depth)\n    let dOff = this.pos - this.path[this.path.length - 1]\n    if (dOff) return this.parent.child(index).cut(0, dOff)\n    return index == 0 ? null : this.parent.child(index - 1)\n  }\n\n  // :: (number, ?number) \u2192 number\n  // Get the position at the given index in the parent node at the\n  // given depth (which defaults to `this.depth`).\n  posAtIndex(index, depth) {\n    depth = this.resolveDepth(depth)\n    let node = this.path[depth * 3], pos = depth == 0 ? 0 : this.path[depth * 3 - 1] + 1\n    for (let i = 0; i < index; i++) pos += node.child(i).nodeSize\n    return pos\n  }\n\n  // :: () \u2192 [Mark]\n  // Get the marks at this position, factoring in the surrounding\n  // marks' [`inclusive`](#model.MarkSpec.inclusive) property. If the\n  // position is at the start of a non-empty node, the marks of the\n  // node after it (if any) are returned.\n  marks() {\n    let parent = this.parent, index = this.index()\n\n    // In an empty parent, return the empty array\n    if (parent.content.size == 0) return Mark.none\n\n    // When inside a text node, just return the text node's marks\n    if (this.textOffset) return parent.child(index).marks\n\n    let main = parent.maybeChild(index - 1), other = parent.maybeChild(index)\n    // If the `after` flag is true of there is no node before, make\n    // the node after this position the main reference.\n    if (!main) { let tmp = main; main = other; other = tmp }\n\n    // Use all marks in the main node, except those that have\n    // `inclusive` set to false and are not present in the other node.\n    let marks = main.marks\n    for (var i = 0; i < marks.length; i++)\n      if (marks[i].type.spec.inclusive === false && (!other || !marks[i].isInSet(other.marks)))\n        marks = marks[i--].removeFromSet(marks)\n\n    return marks\n  }\n\n  // :: (ResolvedPos) \u2192 ?[Mark]\n  // Get the marks after the current position, if any, except those\n  // that are non-inclusive and not present at position `$end`. This\n  // is mostly useful for getting the set of marks to preserve after a\n  // deletion. Will return `null` if this position is at the end of\n  // its parent node or its parent node isn't a textblock (in which\n  // case no marks should be preserved).\n  marksAcross($end) {\n    let after = this.parent.maybeChild(this.index())\n    if (!after || !after.isInline) return null\n\n    let marks = after.marks, next = $end.parent.maybeChild($end.index())\n    for (var i = 0; i < marks.length; i++)\n      if (marks[i].type.spec.inclusive === false && (!next || !marks[i].isInSet(next.marks)))\n        marks = marks[i--].removeFromSet(marks)\n    return marks\n  }\n\n  // :: (number) \u2192 number\n  // The depth up to which this position and the given (non-resolved)\n  // position share the same parent nodes.\n  sharedDepth(pos) {\n    for (let depth = this.depth; depth > 0; depth--)\n      if (this.start(depth) <= pos && this.end(depth) >= pos) return depth\n    return 0\n  }\n\n  // :: (?ResolvedPos, ?(Node) \u2192 bool) \u2192 ?NodeRange\n  // Returns a range based on the place where this position and the\n  // given position diverge around block content. If both point into\n  // the same textblock, for example, a range around that textblock\n  // will be returned. If they point into different blocks, the range\n  // around those blocks in their shared ancestor is returned. You can\n  // pass in an optional predicate that will be called with a parent\n  // node to see if a range into that parent is acceptable.\n  blockRange(other = this, pred) {\n    if (other.pos < this.pos) return other.blockRange(this)\n    for (let d = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d >= 0; d--)\n      if (other.pos <= this.end(d) && (!pred || pred(this.node(d))))\n        return new NodeRange(this, other, d)\n  }\n\n  // :: (ResolvedPos) \u2192 bool\n  // Query whether the given position shares the same parent node.\n  sameParent(other) {\n    return this.pos - this.parentOffset == other.pos - other.parentOffset\n  }\n\n  // :: (ResolvedPos) \u2192 ResolvedPos\n  // Return the greater of this and the given position.\n  max(other) {\n    return other.pos > this.pos ? other : this\n  }\n\n  // :: (ResolvedPos) \u2192 ResolvedPos\n  // Return the smaller of this and the given position.\n  min(other) {\n    return other.pos < this.pos ? other : this\n  }\n\n  toString() {\n    let str = \"\"\n    for (let i = 1; i <= this.depth; i++)\n      str += (str ? \"/\" : \"\") + this.node(i).type.name + \"_\" + this.index(i - 1)\n    return str + \":\" + this.parentOffset\n  }\n\n  static resolve(doc, pos) {\n    if (!(pos >= 0 && pos <= doc.content.size)) throw new RangeError(\"Position \" + pos + \" out of range\")\n    let path = []\n    let start = 0, parentOffset = pos\n    for (let node = doc;;) {\n      let {index, offset} = node.content.findIndex(parentOffset)\n      let rem = parentOffset - offset\n      path.push(node, index, start + offset)\n      if (!rem) break\n      node = node.child(index)\n      if (node.isText) break\n      parentOffset = rem - 1\n      start += offset + 1\n    }\n    return new ResolvedPos(pos, path, parentOffset)\n  }\n\n  static resolveCached(doc, pos) {\n    for (let i = 0; i < resolveCache.length; i++) {\n      let cached = resolveCache[i]\n      if (cached.pos == pos && cached.doc == doc) return cached\n    }\n    let result = resolveCache[resolveCachePos] = ResolvedPos.resolve(doc, pos)\n    resolveCachePos = (resolveCachePos + 1) % resolveCacheSize\n    return result\n  }\n}\n\nlet resolveCache = [], resolveCachePos = 0, resolveCacheSize = 12\n\n// ::- Represents a flat range of content, i.e. one that starts and\n// ends in the same node.\nexport class NodeRange {\n  // :: (ResolvedPos, ResolvedPos, number)\n  // Construct a node range. `$from` and `$to` should point into the\n  // same node until at least the given `depth`, since a node range\n  // denotes an adjacent set of nodes in a single parent node.\n  constructor($from, $to, depth) {\n    // :: ResolvedPos A resolved position along the start of the\n    // content. May have a `depth` greater than this object's `depth`\n    // property, since these are the positions that were used to\n    // compute the range, not re-resolved positions directly at its\n    // boundaries.\n    this.$from = $from\n    // :: ResolvedPos A position along the end of the content. See\n    // caveat for [`$from`](#model.NodeRange.$from).\n    this.$to = $to\n    // :: number The depth of the node that this range points into.\n    this.depth = depth\n  }\n\n  // :: number The position at the start of the range.\n  get start() { return this.$from.before(this.depth + 1) }\n  // :: number The position at the end of the range.\n  get end() { return this.$to.after(this.depth + 1) }\n\n  // :: Node The parent node that the range points into.\n  get parent() { return this.$from.node(this.depth) }\n  // :: number The start index of the range in the parent node.\n  get startIndex() { return this.$from.index(this.depth) }\n  // :: number The end index of the range in the parent node.\n  get endIndex() { return this.$to.indexAfter(this.depth) }\n}\n", "import {Fragment} from \"./fragment\"\nimport {Mark} from \"./mark\"\nimport {Slice, replace} from \"./replace\"\nimport {ResolvedPos} from \"./resolvedpos\"\nimport {compareDeep} from \"./comparedeep\"\n\nconst emptyAttrs = Object.create(null)\n\n// ::- This class represents a node in the tree that makes up a\n// ProseMirror document. So a document is an instance of `Node`, with\n// children that are also instances of `Node`.\n//\n// Nodes are persistent data structures. Instead of changing them, you\n// create new ones with the content you want. Old ones keep pointing\n// at the old document shape. This is made cheaper by sharing\n// structure between the old and new data as much as possible, which a\n// tree shape like this (without back pointers) makes easy.\n//\n// **Do not** directly mutate the properties of a `Node` object. See\n// [the guide](/docs/guide/#doc) for more information.\nexport class Node {\n  constructor(type, attrs, content, marks) {\n    // :: NodeType\n    // The type of node that this is.\n    this.type = type\n\n    // :: Object\n    // An object mapping attribute names to values. The kind of\n    // attributes allowed and required are\n    // [determined](#model.NodeSpec.attrs) by the node type.\n    this.attrs = attrs\n\n    // :: Fragment\n    // A container holding the node's children.\n    this.content = content || Fragment.empty\n\n    // :: [Mark]\n    // The marks (things like whether it is emphasized or part of a\n    // link) applied to this node.\n    this.marks = marks || Mark.none\n  }\n\n  // text:: ?string\n  // For text nodes, this contains the node's text content.\n\n  // :: number\n  // The size of this node, as defined by the integer-based [indexing\n  // scheme](/docs/guide/#doc.indexing). For text nodes, this is the\n  // amount of characters. For other leaf nodes, it is one. For\n  // non-leaf nodes, it is the size of the content plus two (the start\n  // and end token).\n  get nodeSize() { return this.isLeaf ? 1 : 2 + this.content.size }\n\n  // :: number\n  // The number of children that the node has.\n  get childCount() { return this.content.childCount }\n\n  // :: (number) \u2192 Node\n  // Get the child node at the given index. Raises an error when the\n  // index is out of range.\n  child(index) { return this.content.child(index) }\n\n  // :: (number) \u2192 ?Node\n  // Get the child node at the given index, if it exists.\n  maybeChild(index) { return this.content.maybeChild(index) }\n\n  // :: ((node: Node, offset: number, index: number))\n  // Call `f` for every child node, passing the node, its offset\n  // into this parent node, and its index.\n  forEach(f) { this.content.forEach(f) }\n\n  // :: (number, number, (node: Node, pos: number, parent: Node, index: number) \u2192 ?bool, ?number)\n  // Invoke a callback for all descendant nodes recursively between\n  // the given two positions that are relative to start of this node's\n  // content. The callback is invoked with the node, its\n  // parent-relative position, its parent node, and its child index.\n  // When the callback returns false for a given node, that node's\n  // children will not be recursed over. The last parameter can be\n  // used to specify a starting position to count from.\n  nodesBetween(from, to, f, startPos = 0) {\n    this.content.nodesBetween(from, to, f, startPos, this)\n  }\n\n  // :: ((node: Node, pos: number, parent: Node) \u2192 ?bool)\n  // Call the given callback for every descendant node. Doesn't\n  // descend into a node when the callback returns `false`.\n  descendants(f) {\n    this.nodesBetween(0, this.content.size, f)\n  }\n\n  // :: string\n  // Concatenates all the text nodes found in this fragment and its\n  // children.\n  get textContent() { return this.textBetween(0, this.content.size, \"\") }\n\n  // :: (number, number, ?string, ?string | ?(leafNode: Node) -> string) \u2192 string\n  // Get all text between positions `from` and `to`. When\n  // `blockSeparator` is given, it will be inserted whenever a new\n  // block node is started. When `leafText` is given, it'll be\n  // inserted for every non-text leaf node encountered.\n  textBetween(from, to, blockSeparator, leafText) {\n    return this.content.textBetween(from, to, blockSeparator, leafText)\n  }\n\n  // :: ?Node\n  // Returns this node's first child, or `null` if there are no\n  // children.\n  get firstChild() { return this.content.firstChild }\n\n  // :: ?Node\n  // Returns this node's last child, or `null` if there are no\n  // children.\n  get lastChild() { return this.content.lastChild }\n\n  // :: (Node) \u2192 bool\n  // Test whether two nodes represent the same piece of document.\n  eq(other) {\n    return this == other || (this.sameMarkup(other) && this.content.eq(other.content))\n  }\n\n  // :: (Node) \u2192 bool\n  // Compare the markup (type, attributes, and marks) of this node to\n  // those of another. Returns `true` if both have the same markup.\n  sameMarkup(other) {\n    return this.hasMarkup(other.type, other.attrs, other.marks)\n  }\n\n  // :: (NodeType, ?Object, ?[Mark]) \u2192 bool\n  // Check whether this node's markup correspond to the given type,\n  // attributes, and marks.\n  hasMarkup(type, attrs, marks) {\n    return this.type == type &&\n      compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) &&\n      Mark.sameSet(this.marks, marks || Mark.none)\n  }\n\n  // :: (?Fragment) \u2192 Node\n  // Create a new node with the same markup as this node, containing\n  // the given content (or empty, if no content is given).\n  copy(content = null) {\n    if (content == this.content) return this\n    return new this.constructor(this.type, this.attrs, content, this.marks)\n  }\n\n  // :: ([Mark]) \u2192 Node\n  // Create a copy of this node, with the given set of marks instead\n  // of the node's own marks.\n  mark(marks) {\n    return marks == this.marks ? this : new this.constructor(this.type, this.attrs, this.content, marks)\n  }\n\n  // :: (number, ?number) \u2192 Node\n  // Create a copy of this node with only the content between the\n  // given positions. If `to` is not given, it defaults to the end of\n  // the node.\n  cut(from, to) {\n    if (from == 0 && to == this.content.size) return this\n    return this.copy(this.content.cut(from, to))\n  }\n\n  // :: (number, ?number) \u2192 Slice\n  // Cut out the part of the document between the given positions, and\n  // return it as a `Slice` object.\n  slice(from, to = this.content.size, includeParents = false) {\n    if (from == to) return Slice.empty\n\n    let $from = this.resolve(from), $to = this.resolve(to)\n    let depth = includeParents ? 0 : $from.sharedDepth(to)\n    let start = $from.start(depth), node = $from.node(depth)\n    let content = node.content.cut($from.pos - start, $to.pos - start)\n    return new Slice(content, $from.depth - depth, $to.depth - depth)\n  }\n\n  // :: (number, number, Slice) \u2192 Node\n  // Replace the part of the document between the given positions with\n  // the given slice. The slice must 'fit', meaning its open sides\n  // must be able to connect to the surrounding content, and its\n  // content nodes must be valid children for the node they are placed\n  // into. If any of this is violated, an error of type\n  // [`ReplaceError`](#model.ReplaceError) is thrown.\n  replace(from, to, slice) {\n    return replace(this.resolve(from), this.resolve(to), slice)\n  }\n\n  // :: (number) \u2192 ?Node\n  // Find the node directly after the given position.\n  nodeAt(pos) {\n    for (let node = this;;) {\n      let {index, offset} = node.content.findIndex(pos)\n      node = node.maybeChild(index)\n      if (!node) return null\n      if (offset == pos || node.isText) return node\n      pos -= offset + 1\n    }\n  }\n\n  // :: (number) \u2192 {node: ?Node, index: number, offset: number}\n  // Find the (direct) child node after the given offset, if any,\n  // and return it along with its index and offset relative to this\n  // node.\n  childAfter(pos) {\n    let {index, offset} = this.content.findIndex(pos)\n    return {node: this.content.maybeChild(index), index, offset}\n  }\n\n  // :: (number) \u2192 {node: ?Node, index: number, offset: number}\n  // Find the (direct) child node before the given offset, if any,\n  // and return it along with its index and offset relative to this\n  // node.\n  childBefore(pos) {\n    if (pos == 0) return {node: null, index: 0, offset: 0}\n    let {index, offset} = this.content.findIndex(pos)\n    if (offset < pos) return {node: this.content.child(index), index, offset}\n    let node = this.content.child(index - 1)\n    return {node, index: index - 1, offset: offset - node.nodeSize}\n  }\n\n  // :: (number) \u2192 ResolvedPos\n  // Resolve the given position in the document, returning an\n  // [object](#model.ResolvedPos) with information about its context.\n  resolve(pos) { return ResolvedPos.resolveCached(this, pos) }\n\n  resolveNoCache(pos) { return ResolvedPos.resolve(this, pos) }\n\n  // :: (number, number, union<Mark, MarkType>) \u2192 bool\n  // Test whether a given mark or mark type occurs in this document\n  // between the two given positions.\n  rangeHasMark(from, to, type) {\n    let found = false\n    if (to > from) this.nodesBetween(from, to, node => {\n      if (type.isInSet(node.marks)) found = true\n      return !found\n    })\n    return found\n  }\n\n  // :: bool\n  // True when this is a block (non-inline node)\n  get isBlock() { return this.type.isBlock }\n\n  // :: bool\n  // True when this is a textblock node, a block node with inline\n  // content.\n  get isTextblock() { return this.type.isTextblock }\n\n  // :: bool\n  // True when this node allows inline content.\n  get inlineContent() { return this.type.inlineContent }\n\n  // :: bool\n  // True when this is an inline node (a text node or a node that can\n  // appear among text).\n  get isInline() { return this.type.isInline }\n\n  // :: bool\n  // True when this is a text node.\n  get isText() { return this.type.isText }\n\n  // :: bool\n  // True when this is a leaf node.\n  get isLeaf() { return this.type.isLeaf }\n\n  // :: bool\n  // True when this is an atom, i.e. when it does not have directly\n  // editable content. This is usually the same as `isLeaf`, but can\n  // be configured with the [`atom` property](#model.NodeSpec.atom) on\n  // a node's spec (typically used when the node is displayed as an\n  // uneditable [node view](#view.NodeView)).\n  get isAtom() { return this.type.isAtom }\n\n  // :: () \u2192 string\n  // Return a string representation of this node for debugging\n  // purposes.\n  toString() {\n    if (this.type.spec.toDebugString) return this.type.spec.toDebugString(this)\n    let name = this.type.name\n    if (this.content.size)\n      name += \"(\" + this.content.toStringInner() + \")\"\n    return wrapMarks(this.marks, name)\n  }\n\n  // :: (number) \u2192 ContentMatch\n  // Get the content match in this node at the given index.\n  contentMatchAt(index) {\n    let match = this.type.contentMatch.matchFragment(this.content, 0, index)\n    if (!match) throw new Error(\"Called contentMatchAt on a node with invalid content\")\n    return match\n  }\n\n  // :: (number, number, ?Fragment, ?number, ?number) \u2192 bool\n  // Test whether replacing the range between `from` and `to` (by\n  // child index) with the given replacement fragment (which defaults\n  // to the empty fragment) would leave the node's content valid. You\n  // can optionally pass `start` and `end` indices into the\n  // replacement fragment.\n  canReplace(from, to, replacement = Fragment.empty, start = 0, end = replacement.childCount) {\n    let one = this.contentMatchAt(from).matchFragment(replacement, start, end)\n    let two = one && one.matchFragment(this.content, to)\n    if (!two || !two.validEnd) return false\n    for (let i = start; i < end; i++) if (!this.type.allowsMarks(replacement.child(i).marks)) return false\n    return true\n  }\n\n  // :: (number, number, NodeType, ?[Mark]) \u2192 bool\n  // Test whether replacing the range `from` to `to` (by index) with a\n  // node of the given type would leave the node's content valid.\n  canReplaceWith(from, to, type, marks) {\n    if (marks && !this.type.allowsMarks(marks)) return false\n    let start = this.contentMatchAt(from).matchType(type)\n    let end = start && start.matchFragment(this.content, to)\n    return end ? end.validEnd : false\n  }\n\n  // :: (Node) \u2192 bool\n  // Test whether the given node's content could be appended to this\n  // node. If that node is empty, this will only return true if there\n  // is at least one node type that can appear in both nodes (to avoid\n  // merging completely incompatible nodes).\n  canAppend(other) {\n    if (other.content.size) return this.canReplace(this.childCount, this.childCount, other.content)\n    else return this.type.compatibleContent(other.type)\n  }\n\n  // :: ()\n  // Check whether this node and its descendants conform to the\n  // schema, and raise error when they do not.\n  check() {\n    if (!this.type.validContent(this.content))\n      throw new RangeError(`Invalid content for node ${this.type.name}: ${this.content.toString().slice(0, 50)}`)\n    let copy = Mark.none\n    for (let i = 0; i < this.marks.length; i++) copy = this.marks[i].addToSet(copy)\n    if (!Mark.sameSet(copy, this.marks))\n      throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map(m => m.type.name)}`)\n    this.content.forEach(node => node.check())\n  }\n\n  // :: () \u2192 Object\n  // Return a JSON-serializeable representation of this node.\n  toJSON() {\n    let obj = {type: this.type.name}\n    for (let _ in this.attrs) {\n      obj.attrs = this.attrs\n      break\n    }\n    if (this.content.size)\n      obj.content = this.content.toJSON()\n    if (this.marks.length)\n      obj.marks = this.marks.map(n => n.toJSON())\n    return obj\n  }\n\n  // :: (Schema, Object) \u2192 Node\n  // Deserialize a node from its JSON representation.\n  static fromJSON(schema, json) {\n    if (!json) throw new RangeError(\"Invalid input for Node.fromJSON\")\n    let marks = null\n    if (json.marks) {\n      if (!Array.isArray(json.marks)) throw new RangeError(\"Invalid mark data for Node.fromJSON\")\n      marks = json.marks.map(schema.markFromJSON)\n    }\n    if (json.type == \"text\") {\n      if (typeof json.text != \"string\") throw new RangeError(\"Invalid text node in JSON\")\n      return schema.text(json.text, marks)\n    }\n    let content = Fragment.fromJSON(schema, json.content)\n    return schema.nodeType(json.type).create(json.attrs, content, marks)\n  }\n}\n\nexport class TextNode extends Node {\n  constructor(type, attrs, content, marks) {\n    super(type, attrs, null, marks)\n\n    if (!content) throw new RangeError(\"Empty text nodes are not allowed\")\n\n    this.text = content\n  }\n\n  toString() {\n    if (this.type.spec.toDebugString) return this.type.spec.toDebugString(this)\n    return wrapMarks(this.marks, JSON.stringify(this.text))\n  }\n\n  get textContent() { return this.text }\n\n  textBetween(from, to) { return this.text.slice(from, to) }\n\n  get nodeSize() { return this.text.length }\n\n  mark(marks) {\n    return marks == this.marks ? this : new TextNode(this.type, this.attrs, this.text, marks)\n  }\n\n  withText(text) {\n    if (text == this.text) return this\n    return new TextNode(this.type, this.attrs, text, this.marks)\n  }\n\n  cut(from = 0, to = this.text.length) {\n    if (from == 0 && to == this.text.length) return this\n    return this.withText(this.text.slice(from, to))\n  }\n\n  eq(other) {\n    return this.sameMarkup(other) && this.text == other.text\n  }\n\n  toJSON() {\n    let base = super.toJSON()\n    base.text = this.text\n    return base\n  }\n}\n\nfunction wrapMarks(marks, str) {\n  for (let i = marks.length - 1; i >= 0; i--)\n    str = marks[i].type.name + \"(\" + str + \")\"\n  return str\n}\n", "import {Fragment} from \"./fragment\"\n\n// ::- Instances of this class represent a match state of a node\n// type's [content expression](#model.NodeSpec.content), and can be\n// used to find out whether further content matches here, and whether\n// a given position is a valid end of the node.\nexport class ContentMatch {\n  constructor(validEnd) {\n    // :: bool\n    // True when this match state represents a valid end of the node.\n    this.validEnd = validEnd\n    this.next = []\n    this.wrapCache = []\n  }\n\n  static parse(string, nodeTypes) {\n    let stream = new TokenStream(string, nodeTypes)\n    if (stream.next == null) return ContentMatch.empty\n    let expr = parseExpr(stream)\n    if (stream.next) stream.err(\"Unexpected trailing text\")\n    let match = dfa(nfa(expr))\n    checkForDeadEnds(match, stream)\n    return match\n  }\n\n  // :: (NodeType) \u2192 ?ContentMatch\n  // Match a node type, returning a match after that node if\n  // successful.\n  matchType(type) {\n    for (let i = 0; i < this.next.length; i += 2)\n      if (this.next[i] == type) return this.next[i + 1]\n    return null\n  }\n\n  // :: (Fragment, ?number, ?number) \u2192 ?ContentMatch\n  // Try to match a fragment. Returns the resulting match when\n  // successful.\n  matchFragment(frag, start = 0, end = frag.childCount) {\n    let cur = this\n    for (let i = start; cur && i < end; i++)\n      cur = cur.matchType(frag.child(i).type)\n    return cur\n  }\n\n  get inlineContent() {\n    let first = this.next[0]\n    return first ? first.isInline : false\n  }\n\n  // :: ?NodeType\n  // Get the first matching node type at this match position that can\n  // be generated.\n  get defaultType() {\n    for (let i = 0; i < this.next.length; i += 2) {\n      let type = this.next[i]\n      if (!(type.isText || type.hasRequiredAttrs())) return type\n    }\n  }\n\n  compatible(other) {\n    for (let i = 0; i < this.next.length; i += 2)\n      for (let j = 0; j < other.next.length; j += 2)\n        if (this.next[i] == other.next[j]) return true\n    return false\n  }\n\n  // :: (Fragment, bool, ?number) \u2192 ?Fragment\n  // Try to match the given fragment, and if that fails, see if it can\n  // be made to match by inserting nodes in front of it. When\n  // successful, return a fragment of inserted nodes (which may be\n  // empty if nothing had to be inserted). When `toEnd` is true, only\n  // return a fragment if the resulting match goes to the end of the\n  // content expression.\n  fillBefore(after, toEnd = false, startIndex = 0) {\n    let seen = [this]\n    function search(match, types) {\n      let finished = match.matchFragment(after, startIndex)\n      if (finished && (!toEnd || finished.validEnd))\n        return Fragment.from(types.map(tp => tp.createAndFill()))\n\n      for (let i = 0; i < match.next.length; i += 2) {\n        let type = match.next[i], next = match.next[i + 1]\n        if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next) == -1) {\n          seen.push(next)\n          let found = search(next, types.concat(type))\n          if (found) return found\n        }\n      }\n    }\n\n    return search(this, [])\n  }\n\n  // :: (NodeType) \u2192 ?[NodeType]\n  // Find a set of wrapping node types that would allow a node of the\n  // given type to appear at this position. The result may be empty\n  // (when it fits directly) and will be null when no such wrapping\n  // exists.\n  findWrapping(target) {\n    for (let i = 0; i < this.wrapCache.length; i += 2)\n      if (this.wrapCache[i] == target) return this.wrapCache[i + 1]\n    let computed = this.computeWrapping(target)\n    this.wrapCache.push(target, computed)\n    return computed\n  }\n\n  computeWrapping(target) {\n    let seen = Object.create(null), active = [{match: this, type: null, via: null}]\n    while (active.length) {\n      let current = active.shift(), match = current.match\n      if (match.matchType(target)) {\n        let result = []\n        for (let obj = current; obj.type; obj = obj.via)\n          result.push(obj.type)\n        return result.reverse()\n      }\n      for (let i = 0; i < match.next.length; i += 2) {\n        let type = match.next[i]\n        if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || match.next[i + 1].validEnd)) {\n          active.push({match: type.contentMatch, type, via: current})\n          seen[type.name] = true\n        }\n      }\n    }\n  }\n\n  // :: number\n  // The number of outgoing edges this node has in the finite\n  // automaton that describes the content expression.\n  get edgeCount() {\n    return this.next.length >> 1\n  }\n\n  // :: (number) \u2192 {type: NodeType, next: ContentMatch}\n  // Get the _n_\u200Bth outgoing edge from this node in the finite\n  // automaton that describes the content expression.\n  edge(n) {\n    let i = n << 1\n    if (i >= this.next.length) throw new RangeError(`There's no ${n}th edge in this content match`)\n    return {type: this.next[i], next: this.next[i + 1]}\n  }\n\n  toString() {\n    let seen = []\n    function scan(m) {\n      seen.push(m)\n      for (let i = 1; i < m.next.length; i += 2)\n        if (seen.indexOf(m.next[i]) == -1) scan(m.next[i])\n    }\n    scan(this)\n    return seen.map((m, i) => {\n      let out = i + (m.validEnd ? \"*\" : \" \") + \" \"\n      for (let i = 0; i < m.next.length; i += 2)\n        out += (i ? \", \" : \"\") + m.next[i].name + \"->\" + seen.indexOf(m.next[i + 1])\n      return out\n    }).join(\"\\n\")\n  }\n}\n\nContentMatch.empty = new ContentMatch(true)\n\nclass TokenStream {\n  constructor(string, nodeTypes) {\n    this.string = string\n    this.nodeTypes = nodeTypes\n    this.inline = null\n    this.pos = 0\n    this.tokens = string.split(/\\s*(?=\\b|\\W|$)/)\n    if (this.tokens[this.tokens.length - 1] == \"\") this.tokens.pop()\n    if (this.tokens[0] == \"\") this.tokens.shift()\n  }\n\n  get next() { return this.tokens[this.pos] }\n\n  eat(tok) { return this.next == tok && (this.pos++ || true) }\n\n  err(str) { throw new SyntaxError(str + \" (in content expression '\" + this.string + \"')\") }\n}\n\nfunction parseExpr(stream) {\n  let exprs = []\n  do { exprs.push(parseExprSeq(stream)) }\n  while (stream.eat(\"|\"))\n  return exprs.length == 1 ? exprs[0] : {type: \"choice\", exprs}\n}\n\nfunction parseExprSeq(stream) {\n  let exprs = []\n  do { exprs.push(parseExprSubscript(stream)) }\n  while (stream.next && stream.next != \")\" && stream.next != \"|\")\n  return exprs.length == 1 ? exprs[0] : {type: \"seq\", exprs}\n}\n\nfunction parseExprSubscript(stream) {\n  let expr = parseExprAtom(stream)\n  for (;;) {\n    if (stream.eat(\"+\"))\n      expr = {type: \"plus\", expr}\n    else if (stream.eat(\"*\"))\n      expr = {type: \"star\", expr}\n    else if (stream.eat(\"?\"))\n      expr = {type: \"opt\", expr}\n    else if (stream.eat(\"{\"))\n      expr = parseExprRange(stream, expr)\n    else break\n  }\n  return expr\n}\n\nfunction parseNum(stream) {\n  if (/\\D/.test(stream.next)) stream.err(\"Expected number, got '\" + stream.next + \"'\")\n  let result = Number(stream.next)\n  stream.pos++\n  return result\n}\n\nfunction parseExprRange(stream, expr) {\n  let min = parseNum(stream), max = min\n  if (stream.eat(\",\")) {\n    if (stream.next != \"}\") max = parseNum(stream)\n    else max = -1\n  }\n  if (!stream.eat(\"}\")) stream.err(\"Unclosed braced range\")\n  return {type: \"range\", min, max, expr}\n}\n\nfunction resolveName(stream, name) {\n  let types = stream.nodeTypes, type = types[name]\n  if (type) return [type]\n  let result = []\n  for (let typeName in types) {\n    let type = types[typeName]\n    if (type.groups.indexOf(name) > -1) result.push(type)\n  }\n  if (result.length == 0) stream.err(\"No node type or group '\" + name + \"' found\")\n  return result\n}\n\nfunction parseExprAtom(stream) {\n  if (stream.eat(\"(\")) {\n    let expr = parseExpr(stream)\n    if (!stream.eat(\")\")) stream.err(\"Missing closing paren\")\n    return expr\n  } else if (!/\\W/.test(stream.next)) {\n    let exprs = resolveName(stream, stream.next).map(type => {\n      if (stream.inline == null) stream.inline = type.isInline\n      else if (stream.inline != type.isInline) stream.err(\"Mixing inline and block content\")\n      return {type: \"name\", value: type}\n    })\n    stream.pos++\n    return exprs.length == 1 ? exprs[0] : {type: \"choice\", exprs}\n  } else {\n    stream.err(\"Unexpected token '\" + stream.next + \"'\")\n  }\n}\n\n// The code below helps compile a regular-expression-like language\n// into a deterministic finite automaton. For a good introduction to\n// these concepts, see https://swtch.com/~rsc/regexp/regexp1.html\n\n// : (Object) \u2192 [[{term: ?any, to: number}]]\n// Construct an NFA from an expression as returned by the parser. The\n// NFA is represented as an array of states, which are themselves\n// arrays of edges, which are `{term, to}` objects. The first state is\n// the entry state and the last node is the success state.\n//\n// Note that unlike typical NFAs, the edge ordering in this one is\n// significant, in that it is used to contruct filler content when\n// necessary.\nfunction nfa(expr) {\n  let nfa = [[]]\n  connect(compile(expr, 0), node())\n  return nfa\n\n  function node() { return nfa.push([]) - 1 }\n  function edge(from, to, term) {\n    let edge = {term, to}\n    nfa[from].push(edge)\n    return edge\n  }\n  function connect(edges, to) { edges.forEach(edge => edge.to = to) }\n\n  function compile(expr, from) {\n    if (expr.type == \"choice\") {\n      return expr.exprs.reduce((out, expr) => out.concat(compile(expr, from)), [])\n    } else if (expr.type == \"seq\") {\n      for (let i = 0;; i++) {\n        let next = compile(expr.exprs[i], from)\n        if (i == expr.exprs.length - 1) return next\n        connect(next, from = node())\n      }\n    } else if (expr.type == \"star\") {\n      let loop = node()\n      edge(from, loop)\n      connect(compile(expr.expr, loop), loop)\n      return [edge(loop)]\n    } else if (expr.type == \"plus\") {\n      let loop = node()\n      connect(compile(expr.expr, from), loop)\n      connect(compile(expr.expr, loop), loop)\n      return [edge(loop)]\n    } else if (expr.type == \"opt\") {\n      return [edge(from)].concat(compile(expr.expr, from))\n    } else if (expr.type == \"range\") {\n      let cur = from\n      for (let i = 0; i < expr.min; i++) {\n        let next = node()\n        connect(compile(expr.expr, cur), next)\n        cur = next\n      }\n      if (expr.max == -1) {\n        connect(compile(expr.expr, cur), cur)\n      } else {\n        for (let i = expr.min; i < expr.max; i++) {\n          let next = node()\n          edge(cur, next)\n          connect(compile(expr.expr, cur), next)\n          cur = next\n        }\n      }\n      return [edge(cur)]\n    } else if (expr.type == \"name\") {\n      return [edge(from, null, expr.value)]\n    }\n  }\n}\n\nfunction cmp(a, b) { return b - a }\n\n// Get the set of nodes reachable by null edges from `node`. Omit\n// nodes with only a single null-out-edge, since they may lead to\n// needless duplicated nodes.\nfunction nullFrom(nfa, node) {\n  let result = []\n  scan(node)\n  return result.sort(cmp)\n\n  function scan(node) {\n    let edges = nfa[node]\n    if (edges.length == 1 && !edges[0].term) return scan(edges[0].to)\n    result.push(node)\n    for (let i = 0; i < edges.length; i++) {\n      let {term, to} = edges[i]\n      if (!term && result.indexOf(to) == -1) scan(to)\n    }\n  }\n}\n\n// : ([[{term: ?any, to: number}]]) \u2192 ContentMatch\n// Compiles an NFA as produced by `nfa` into a DFA, modeled as a set\n// of state objects (`ContentMatch` instances) with transitions\n// between them.\nfunction dfa(nfa) {\n  let labeled = Object.create(null)\n  return explore(nullFrom(nfa, 0))\n\n  function explore(states) {\n    let out = []\n    states.forEach(node => {\n      nfa[node].forEach(({term, to}) => {\n        if (!term) return\n        let known = out.indexOf(term), set = known > -1 && out[known + 1]\n        nullFrom(nfa, to).forEach(node => {\n          if (!set) out.push(term, set = [])\n          if (set.indexOf(node) == -1) set.push(node)\n        })\n      })\n    })\n    let state = labeled[states.join(\",\")] = new ContentMatch(states.indexOf(nfa.length - 1) > -1)\n    for (let i = 0; i < out.length; i += 2) {\n      let states = out[i + 1].sort(cmp)\n      state.next.push(out[i], labeled[states.join(\",\")] || explore(states))\n    }\n    return state\n  }\n}\n\nfunction checkForDeadEnds(match, stream) {\n  for (let i = 0, work = [match]; i < work.length; i++) {\n    let state = work[i], dead = !state.validEnd, nodes = []\n    for (let j = 0; j < state.next.length; j += 2) {\n      let node = state.next[j], next = state.next[j + 1]\n      nodes.push(node.name)\n      if (dead && !(node.isText || node.hasRequiredAttrs())) dead = false\n      if (work.indexOf(next) == -1) work.push(next)\n    }\n    if (dead) stream.err(\"Only non-generatable nodes (\" + nodes.join(\", \") + \") in a required position (see https://prosemirror.net/docs/guide/#generatable)\")\n  }\n}\n", "import OrderedMap from \"orderedmap\"\n\nimport {Node, TextNode} from \"./node\"\nimport {Fragment} from \"./fragment\"\nimport {Mark} from \"./mark\"\nimport {ContentMatch} from \"./content\"\n\n// For node types where all attrs have a default value (or which don't\n// have any attributes), build up a single reusable default attribute\n// object, and use it for all nodes that don't specify specific\n// attributes.\nfunction defaultAttrs(attrs) {\n  let defaults = Object.create(null)\n  for (let attrName in attrs) {\n    let attr = attrs[attrName]\n    if (!attr.hasDefault) return null\n    defaults[attrName] = attr.default\n  }\n  return defaults\n}\n\nfunction computeAttrs(attrs, value) {\n  let built = Object.create(null)\n  for (let name in attrs) {\n    let given = value && value[name]\n    if (given === undefined) {\n      let attr = attrs[name]\n      if (attr.hasDefault) given = attr.default\n      else throw new RangeError(\"No value supplied for attribute \" + name)\n    }\n    built[name] = given\n  }\n  return built\n}\n\nfunction initAttrs(attrs) {\n  let result = Object.create(null)\n  if (attrs) for (let name in attrs) result[name] = new Attribute(attrs[name])\n  return result\n}\n\n// ::- Node types are objects allocated once per `Schema` and used to\n// [tag](#model.Node.type) `Node` instances. They contain information\n// about the node type, such as its name and what kind of node it\n// represents.\nexport class NodeType {\n  constructor(name, schema, spec) {\n    // :: string\n    // The name the node type has in this schema.\n    this.name = name\n\n    // :: Schema\n    // A link back to the `Schema` the node type belongs to.\n    this.schema = schema\n\n    // :: NodeSpec\n    // The spec that this type is based on\n    this.spec = spec\n\n    this.groups = spec.group ? spec.group.split(\" \") : []\n    this.attrs = initAttrs(spec.attrs)\n\n    this.defaultAttrs = defaultAttrs(this.attrs)\n\n    // :: ContentMatch\n    // The starting match of the node type's content expression.\n    this.contentMatch = null\n\n    // : ?[MarkType]\n    // The set of marks allowed in this node. `null` means all marks\n    // are allowed.\n    this.markSet = null\n\n    // :: bool\n    // True if this node type has inline content.\n    this.inlineContent = null\n\n    // :: bool\n    // True if this is a block type\n    this.isBlock = !(spec.inline || name == \"text\")\n\n    // :: bool\n    // True if this is the text node type.\n    this.isText = name == \"text\"\n  }\n\n  // :: bool\n  // True if this is an inline type.\n  get isInline() { return !this.isBlock }\n\n  // :: bool\n  // True if this is a textblock type, a block that contains inline\n  // content.\n  get isTextblock() { return this.isBlock && this.inlineContent }\n\n  // :: bool\n  // True for node types that allow no content.\n  get isLeaf() { return this.contentMatch == ContentMatch.empty }\n\n  // :: bool\n  // True when this node is an atom, i.e. when it does not have\n  // directly editable content.\n  get isAtom() { return this.isLeaf || this.spec.atom }\n\n  // :: () \u2192 bool\n  // Tells you whether this node type has any required attributes.\n  hasRequiredAttrs() {\n    for (let n in this.attrs) if (this.attrs[n].isRequired) return true\n    return false\n  }\n\n  compatibleContent(other) {\n    return this == other || this.contentMatch.compatible(other.contentMatch)\n  }\n\n  computeAttrs(attrs) {\n    if (!attrs && this.defaultAttrs) return this.defaultAttrs\n    else return computeAttrs(this.attrs, attrs)\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) \u2192 Node\n  // Create a `Node` of this type. The given attributes are\n  // checked and defaulted (you can pass `null` to use the type's\n  // defaults entirely, if no required attributes exist). `content`\n  // may be a `Fragment`, a node, an array of nodes, or\n  // `null`. Similarly `marks` may be `null` to default to the empty\n  // set of marks.\n  create(attrs, content, marks) {\n    if (this.isText) throw new Error(\"NodeType.create can't construct text nodes\")\n    return new Node(this, this.computeAttrs(attrs), Fragment.from(content), Mark.setFrom(marks))\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) \u2192 Node\n  // Like [`create`](#model.NodeType.create), but check the given content\n  // against the node type's content restrictions, and throw an error\n  // if it doesn't match.\n  createChecked(attrs, content, marks) {\n    content = Fragment.from(content)\n    if (!this.validContent(content))\n      throw new RangeError(\"Invalid content for node \" + this.name)\n    return new Node(this, this.computeAttrs(attrs), content, Mark.setFrom(marks))\n  }\n\n  // :: (?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) \u2192 ?Node\n  // Like [`create`](#model.NodeType.create), but see if it is necessary to\n  // add nodes to the start or end of the given fragment to make it\n  // fit the node. If no fitting wrapping can be found, return null.\n  // Note that, due to the fact that required nodes can always be\n  // created, this will always succeed if you pass null or\n  // `Fragment.empty` as content.\n  createAndFill(attrs, content, marks) {\n    attrs = this.computeAttrs(attrs)\n    content = Fragment.from(content)\n    if (content.size) {\n      let before = this.contentMatch.fillBefore(content)\n      if (!before) return null\n      content = before.append(content)\n    }\n    let after = this.contentMatch.matchFragment(content).fillBefore(Fragment.empty, true)\n    if (!after) return null\n    return new Node(this, attrs, content.append(after), Mark.setFrom(marks))\n  }\n\n  // :: (Fragment) \u2192 bool\n  // Returns true if the given fragment is valid content for this node\n  // type with the given attributes.\n  validContent(content) {\n    let result = this.contentMatch.matchFragment(content)\n    if (!result || !result.validEnd) return false\n    for (let i = 0; i < content.childCount; i++)\n      if (!this.allowsMarks(content.child(i).marks)) return false\n    return true\n  }\n\n  // :: (MarkType) \u2192 bool\n  // Check whether the given mark type is allowed in this node.\n  allowsMarkType(markType) {\n    return this.markSet == null || this.markSet.indexOf(markType) > -1\n  }\n\n  // :: ([Mark]) \u2192 bool\n  // Test whether the given set of marks are allowed in this node.\n  allowsMarks(marks) {\n    if (this.markSet == null) return true\n    for (let i = 0; i < marks.length; i++) if (!this.allowsMarkType(marks[i].type)) return false\n    return true\n  }\n\n  // :: ([Mark]) \u2192 [Mark]\n  // Removes the marks that are not allowed in this node from the given set.\n  allowedMarks(marks) {\n    if (this.markSet == null) return marks\n    let copy\n    for (let i = 0; i < marks.length; i++) {\n      if (!this.allowsMarkType(marks[i].type)) {\n        if (!copy) copy = marks.slice(0, i)\n      } else if (copy) {\n        copy.push(marks[i])\n      }\n    }\n    return !copy ? marks : copy.length ? copy : Mark.empty\n  }\n\n  static compile(nodes, schema) {\n    let result = Object.create(null)\n    nodes.forEach((name, spec) => result[name] = new NodeType(name, schema, spec))\n\n    let topType = schema.spec.topNode || \"doc\"\n    if (!result[topType]) throw new RangeError(\"Schema is missing its top node type ('\" + topType + \"')\")\n    if (!result.text) throw new RangeError(\"Every schema needs a 'text' type\")\n    for (let _ in result.text.attrs) throw new RangeError(\"The text node type should not have attributes\")\n\n    return result\n  }\n}\n\n// Attribute descriptors\n\nclass Attribute {\n  constructor(options) {\n    this.hasDefault = Object.prototype.hasOwnProperty.call(options, \"default\")\n    this.default = options.default\n  }\n\n  get isRequired() {\n    return !this.hasDefault\n  }\n}\n\n// Marks\n\n// ::- Like nodes, marks (which are associated with nodes to signify\n// things like emphasis or being part of a link) are\n// [tagged](#model.Mark.type) with type objects, which are\n// instantiated once per `Schema`.\nexport class MarkType {\n  constructor(name, rank, schema, spec) {\n    // :: string\n    // The name of the mark type.\n    this.name = name\n\n    // :: Schema\n    // The schema that this mark type instance is part of.\n    this.schema = schema\n\n    // :: MarkSpec\n    // The spec on which the type is based.\n    this.spec = spec\n\n    this.attrs = initAttrs(spec.attrs)\n\n    this.rank = rank\n    this.excluded = null\n    let defaults = defaultAttrs(this.attrs)\n    this.instance = defaults && new Mark(this, defaults)\n  }\n\n  // :: (?Object) \u2192 Mark\n  // Create a mark of this type. `attrs` may be `null` or an object\n  // containing only some of the mark's attributes. The others, if\n  // they have defaults, will be added.\n  create(attrs) {\n    if (!attrs && this.instance) return this.instance\n    return new Mark(this, computeAttrs(this.attrs, attrs))\n  }\n\n  static compile(marks, schema) {\n    let result = Object.create(null), rank = 0\n    marks.forEach((name, spec) => result[name] = new MarkType(name, rank++, schema, spec))\n    return result\n  }\n\n  // :: ([Mark]) \u2192 [Mark]\n  // When there is a mark of this type in the given set, a new set\n  // without it is returned. Otherwise, the input set is returned.\n  removeFromSet(set) {\n    for (var i = 0; i < set.length; i++) if (set[i].type == this) {\n      set = set.slice(0, i).concat(set.slice(i + 1))\n      i--\n    }\n    return set\n  }\n\n  // :: ([Mark]) \u2192 ?Mark\n  // Tests whether there is a mark of this type in the given set.\n  isInSet(set) {\n    for (let i = 0; i < set.length; i++)\n      if (set[i].type == this) return set[i]\n  }\n\n  // :: (MarkType) \u2192 bool\n  // Queries whether a given mark type is\n  // [excluded](#model.MarkSpec.excludes) by this one.\n  excludes(other) {\n    return this.excluded.indexOf(other) > -1\n  }\n}\n\n// SchemaSpec:: interface\n// An object describing a schema, as passed to the [`Schema`](#model.Schema)\n// constructor.\n//\n//   nodes:: union<Object<NodeSpec>, OrderedMap<NodeSpec>>\n//   The node types in this schema. Maps names to\n//   [`NodeSpec`](#model.NodeSpec) objects that describe the node type\n//   associated with that name. Their order is significant\u2014it\n//   determines which [parse rules](#model.NodeSpec.parseDOM) take\n//   precedence by default, and which nodes come first in a given\n//   [group](#model.NodeSpec.group).\n//\n//   marks:: ?union<Object<MarkSpec>, OrderedMap<MarkSpec>>\n//   The mark types that exist in this schema. The order in which they\n//   are provided determines the order in which [mark\n//   sets](#model.Mark.addToSet) are sorted and in which [parse\n//   rules](#model.MarkSpec.parseDOM) are tried.\n//\n//   topNode:: ?string\n//   The name of the default top-level node for the schema. Defaults\n//   to `\"doc\"`.\n\n// NodeSpec:: interface\n//\n//   content:: ?string\n//   The content expression for this node, as described in the [schema\n//   guide](/docs/guide/#schema.content_expressions). When not given,\n//   the node does not allow any content.\n//\n//   marks:: ?string\n//   The marks that are allowed inside of this node. May be a\n//   space-separated string referring to mark names or groups, `\"_\"`\n//   to explicitly allow all marks, or `\"\"` to disallow marks. When\n//   not given, nodes with inline content default to allowing all\n//   marks, other nodes default to not allowing marks.\n//\n//   group:: ?string\n//   The group or space-separated groups to which this node belongs,\n//   which can be referred to in the content expressions for the\n//   schema.\n//\n//   inline:: ?bool\n//   Should be set to true for inline nodes. (Implied for text nodes.)\n//\n//   atom:: ?bool\n//   Can be set to true to indicate that, though this isn't a [leaf\n//   node](#model.NodeType.isLeaf), it doesn't have directly editable\n//   content and should be treated as a single unit in the view.\n//\n//   attrs:: ?Object<AttributeSpec>\n//   The attributes that nodes of this type get.\n//\n//   selectable:: ?bool\n//   Controls whether nodes of this type can be selected as a [node\n//   selection](#state.NodeSelection). Defaults to true for non-text\n//   nodes.\n//\n//   draggable:: ?bool\n//   Determines whether nodes of this type can be dragged without\n//   being selected. Defaults to false.\n//\n//   code:: ?bool\n//   Can be used to indicate that this node contains code, which\n//   causes some commands to behave differently.\n//\n//   defining:: ?bool\n//   Determines whether this node is considered an important parent\n//   node during replace operations (such as paste). Non-defining (the\n//   default) nodes get dropped when their entire content is replaced,\n//   whereas defining nodes persist and wrap the inserted content.\n//   Likewise, in _inserted_ content the defining parents of the\n//   content are preserved when possible. Typically,\n//   non-default-paragraph textblock types, and possibly list items,\n//   are marked as defining.\n//\n//   isolating:: ?bool\n//   When enabled (default is false), the sides of nodes of this type\n//   count as boundaries that regular editing operations, like\n//   backspacing or lifting, won't cross. An example of a node that\n//   should probably have this enabled is a table cell.\n//\n//   toDOM:: ?(node: Node) \u2192 DOMOutputSpec\n//   Defines the default way a node of this type should be serialized\n//   to DOM/HTML (as used by\n//   [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)).\n//   Should return a DOM node or an [array\n//   structure](#model.DOMOutputSpec) that describes one, with an\n//   optional number zero (\u201Chole\u201D) in it to indicate where the node's\n//   content should be inserted.\n//\n//   For text nodes, the default is to create a text DOM node. Though\n//   it is possible to create a serializer where text is rendered\n//   differently, this is not supported inside the editor, so you\n//   shouldn't override that in your text node spec.\n//\n//   parseDOM:: ?[ParseRule]\n//   Associates DOM parser information with this node, which can be\n//   used by [`DOMParser.fromSchema`](#model.DOMParser^fromSchema) to\n//   automatically derive a parser. The `node` field in the rules is\n//   implied (the name of this node will be filled in automatically).\n//   If you supply your own parser, you do not need to also specify\n//   parsing rules in your schema.\n//\n//   toDebugString:: ?(node: Node) -> string\n//   Defines the default way a node of this type should be serialized\n//   to a string representation for debugging (e.g. in error messages).\n\n// MarkSpec:: interface\n//\n//   attrs:: ?Object<AttributeSpec>\n//   The attributes that marks of this type get.\n//\n//   inclusive:: ?bool\n//   Whether this mark should be active when the cursor is positioned\n//   at its end (or at its start when that is also the start of the\n//   parent node). Defaults to true.\n//\n//   excludes:: ?string\n//   Determines which other marks this mark can coexist with. Should\n//   be a space-separated strings naming other marks or groups of marks.\n//   When a mark is [added](#model.Mark.addToSet) to a set, all marks\n//   that it excludes are removed in the process. If the set contains\n//   any mark that excludes the new mark but is not, itself, excluded\n//   by the new mark, the mark can not be added an the set. You can\n//   use the value `\"_\"` to indicate that the mark excludes all\n//   marks in the schema.\n//\n//   Defaults to only being exclusive with marks of the same type. You\n//   can set it to an empty string (or any string not containing the\n//   mark's own name) to allow multiple marks of a given type to\n//   coexist (as long as they have different attributes).\n//\n//   group:: ?string\n//   The group or space-separated groups to which this mark belongs.\n//\n//   spanning:: ?bool\n//   Determines whether marks of this type can span multiple adjacent\n//   nodes when serialized to DOM/HTML. Defaults to true.\n//\n//   toDOM:: ?(mark: Mark, inline: bool) \u2192 DOMOutputSpec\n//   Defines the default way marks of this type should be serialized\n//   to DOM/HTML. When the resulting spec contains a hole, that is\n//   where the marked content is placed. Otherwise, it is appended to\n//   the top node.\n//\n//   parseDOM:: ?[ParseRule]\n//   Associates DOM parser information with this mark (see the\n//   corresponding [node spec field](#model.NodeSpec.parseDOM)). The\n//   `mark` field in the rules is implied.\n\n// AttributeSpec:: interface\n//\n// Used to [define](#model.NodeSpec.attrs) attributes on nodes or\n// marks.\n//\n//   default:: ?any\n//   The default value for this attribute, to use when no explicit\n//   value is provided. Attributes that have no default must be\n//   provided whenever a node or mark of a type that has them is\n//   created.\n\n// ::- A document schema. Holds [node](#model.NodeType) and [mark\n// type](#model.MarkType) objects for the nodes and marks that may\n// occur in conforming documents, and provides functionality for\n// creating and deserializing such documents.\nexport class Schema {\n  // :: (SchemaSpec)\n  // Construct a schema from a schema [specification](#model.SchemaSpec).\n  constructor(spec) {\n    // :: SchemaSpec\n    // The [spec](#model.SchemaSpec) on which the schema is based,\n    // with the added guarantee that its `nodes` and `marks`\n    // properties are\n    // [`OrderedMap`](https://github.com/marijnh/orderedmap) instances\n    // (not raw objects).\n    this.spec = {}\n    for (let prop in spec) this.spec[prop] = spec[prop]\n    this.spec.nodes = OrderedMap.from(spec.nodes)\n    this.spec.marks = OrderedMap.from(spec.marks)\n\n    // :: Object<NodeType>\n    // An object mapping the schema's node names to node type objects.\n    this.nodes = NodeType.compile(this.spec.nodes, this)\n\n    // :: Object<MarkType>\n    // A map from mark names to mark type objects.\n    this.marks = MarkType.compile(this.spec.marks, this)\n\n    let contentExprCache = Object.create(null)\n    for (let prop in this.nodes) {\n      if (prop in this.marks)\n        throw new RangeError(prop + \" can not be both a node and a mark\")\n      let type = this.nodes[prop], contentExpr = type.spec.content || \"\", markExpr = type.spec.marks\n      type.contentMatch = contentExprCache[contentExpr] ||\n        (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this.nodes))\n      type.inlineContent = type.contentMatch.inlineContent\n      type.markSet = markExpr == \"_\" ? null :\n        markExpr ? gatherMarks(this, markExpr.split(\" \")) :\n        markExpr == \"\" || !type.inlineContent ? [] : null\n    }\n    for (let prop in this.marks) {\n      let type = this.marks[prop], excl = type.spec.excludes\n      type.excluded = excl == null ? [type] : excl == \"\" ? [] : gatherMarks(this, excl.split(\" \"))\n    }\n\n    this.nodeFromJSON = this.nodeFromJSON.bind(this)\n    this.markFromJSON = this.markFromJSON.bind(this)\n\n    // :: NodeType\n    // The type of the [default top node](#model.SchemaSpec.topNode)\n    // for this schema.\n    this.topNodeType = this.nodes[this.spec.topNode || \"doc\"]\n\n    // :: Object\n    // An object for storing whatever values modules may want to\n    // compute and cache per schema. (If you want to store something\n    // in it, try to use property names unlikely to clash.)\n    this.cached = Object.create(null)\n    this.cached.wrappings = Object.create(null)\n  }\n\n  // :: (union<string, NodeType>, ?Object, ?union<Fragment, Node, [Node]>, ?[Mark]) \u2192 Node\n  // Create a node in this schema. The `type` may be a string or a\n  // `NodeType` instance. Attributes will be extended\n  // with defaults, `content` may be a `Fragment`,\n  // `null`, a `Node`, or an array of nodes.\n  node(type, attrs, content, marks) {\n    if (typeof type == \"string\")\n      type = this.nodeType(type)\n    else if (!(type instanceof NodeType))\n      throw new RangeError(\"Invalid node type: \" + type)\n    else if (type.schema != this)\n      throw new RangeError(\"Node type from different schema used (\" + type.name + \")\")\n\n    return type.createChecked(attrs, content, marks)\n  }\n\n  // :: (string, ?[Mark]) \u2192 Node\n  // Create a text node in the schema. Empty text nodes are not\n  // allowed.\n  text(text, marks) {\n    let type = this.nodes.text\n    return new TextNode(type, type.defaultAttrs, text, Mark.setFrom(marks))\n  }\n\n  // :: (union<string, MarkType>, ?Object) \u2192 Mark\n  // Create a mark with the given type and attributes.\n  mark(type, attrs) {\n    if (typeof type == \"string\") type = this.marks[type]\n    return type.create(attrs)\n  }\n\n  // :: (Object) \u2192 Node\n  // Deserialize a node from its JSON representation. This method is\n  // bound.\n  nodeFromJSON(json) {\n    return Node.fromJSON(this, json)\n  }\n\n  // :: (Object) \u2192 Mark\n  // Deserialize a mark from its JSON representation. This method is\n  // bound.\n  markFromJSON(json) {\n    return Mark.fromJSON(this, json)\n  }\n\n  nodeType(name) {\n    let found = this.nodes[name]\n    if (!found) throw new RangeError(\"Unknown node type: \" + name)\n    return found\n  }\n}\n\nfunction gatherMarks(schema, marks) {\n  let found = []\n  for (let i = 0; i < marks.length; i++) {\n    let name = marks[i], mark = schema.marks[name], ok = mark\n    if (mark) {\n      found.push(mark)\n    } else {\n      for (let prop in schema.marks) {\n        let mark = schema.marks[prop]\n        if (name == \"_\" || (mark.spec.group && mark.spec.group.split(\" \").indexOf(name) > -1))\n          found.push(ok = mark)\n      }\n    }\n    if (!ok) throw new SyntaxError(\"Unknown mark type: '\" + marks[i] + \"'\")\n  }\n  return found\n}\n", "import {Fragment} from \"./fragment\"\nimport {Slice} from \"./replace\"\nimport {Mark} from \"./mark\"\n\n// ParseOptions:: interface\n// These are the options recognized by the\n// [`parse`](#model.DOMParser.parse) and\n// [`parseSlice`](#model.DOMParser.parseSlice) methods.\n//\n//   preserveWhitespace:: ?union<bool, \"full\">\n//   By default, whitespace is collapsed as per HTML's rules. Pass\n//   `true` to preserve whitespace, but normalize newlines to\n//   spaces, and `\"full\"` to preserve whitespace entirely.\n//\n//   findPositions:: ?[{node: dom.Node, offset: number}]\n//   When given, the parser will, beside parsing the content,\n//   record the document positions of the given DOM positions. It\n//   will do so by writing to the objects, adding a `pos` property\n//   that holds the document position. DOM positions that are not\n//   in the parsed content will not be written to.\n//\n//   from:: ?number\n//   The child node index to start parsing from.\n//\n//   to:: ?number\n//   The child node index to stop parsing at.\n//\n//   topNode:: ?Node\n//   By default, the content is parsed into the schema's default\n//   [top node type](#model.Schema.topNodeType). You can pass this\n//   option to use the type and attributes from a different node\n//   as the top container.\n//\n//   topMatch:: ?ContentMatch\n//   Provide the starting content match that content parsed into the\n//   top node is matched against.\n//\n//   context:: ?ResolvedPos\n//   A set of additional nodes to count as\n//   [context](#model.ParseRule.context) when parsing, above the\n//   given [top node](#model.ParseOptions.topNode).\n\n// ParseRule:: interface\n// A value that describes how to parse a given DOM node or inline\n// style as a ProseMirror node or mark.\n//\n//   tag:: ?string\n//   A CSS selector describing the kind of DOM elements to match. A\n//   single rule should have _either_ a `tag` or a `style` property.\n//\n//   namespace:: ?string\n//   The namespace to match. This should be used with `tag`.\n//   Nodes are only matched when the namespace matches or this property\n//   is null.\n//\n//   style:: ?string\n//   A CSS property name to match. When given, this rule matches\n//   inline styles that list that property. May also have the form\n//   `\"property=value\"`, in which case the rule only matches if the\n//   property's value exactly matches the given value. (For more\n//   complicated filters, use [`getAttrs`](#model.ParseRule.getAttrs)\n//   and return false to indicate that the match failed.) Rules\n//   matching styles may only produce [marks](#model.ParseRule.mark),\n//   not nodes.\n//\n//   priority:: ?number\n//   Can be used to change the order in which the parse rules in a\n//   schema are tried. Those with higher priority come first. Rules\n//   without a priority are counted as having priority 50. This\n//   property is only meaningful in a schema\u2014when directly\n//   constructing a parser, the order of the rule array is used.\n//\n//   consuming:: ?boolean\n//   By default, when a rule matches an element or style, no further\n//   rules get a chance to match it. By setting this to `false`, you\n//   indicate that even when this rule matches, other rules that come\n//   after it should also run.\n//\n//   context:: ?string\n//   When given, restricts this rule to only match when the current\n//   context\u2014the parent nodes into which the content is being\n//   parsed\u2014matches this expression. Should contain one or more node\n//   names or node group names followed by single or double slashes.\n//   For example `\"paragraph/\"` means the rule only matches when the\n//   parent node is a paragraph, `\"blockquote/paragraph/\"` restricts\n//   it to be in a paragraph that is inside a blockquote, and\n//   `\"section//\"` matches any position inside a section\u2014a double\n//   slash matches any sequence of ancestor nodes. To allow multiple\n//   different contexts, they can be separated by a pipe (`|`)\n//   character, as in `\"blockquote/|list_item/\"`.\n//\n//   node:: ?string\n//   The name of the node type to create when this rule matches. Only\n//   valid for rules with a `tag` property, not for style rules. Each\n//   rule should have one of a `node`, `mark`, or `ignore` property\n//   (except when it appears in a [node](#model.NodeSpec.parseDOM) or\n//   [mark spec](#model.MarkSpec.parseDOM), in which case the `node`\n//   or `mark` property will be derived from its position).\n//\n//   mark:: ?string\n//   The name of the mark type to wrap the matched content in.\n//\n//   ignore:: ?bool\n//   When true, ignore content that matches this rule.\n//\n//   closeParent:: ?bool\n//   When true, finding an element that matches this rule will close\n//   the current node.\n//\n//   skip:: ?bool\n//   When true, ignore the node that matches this rule, but do parse\n//   its content.\n//\n//   attrs:: ?Object\n//   Attributes for the node or mark created by this rule. When\n//   `getAttrs` is provided, it takes precedence.\n//\n//   getAttrs:: ?(union<dom.Node, string>) \u2192 ?union<Object, false>\n//   A function used to compute the attributes for the node or mark\n//   created by this rule. Can also be used to describe further\n//   conditions the DOM element or style must match. When it returns\n//   `false`, the rule won't match. When it returns null or undefined,\n//   that is interpreted as an empty/default set of attributes.\n//\n//   Called with a DOM Element for `tag` rules, and with a string (the\n//   style's value) for `style` rules.\n//\n//   contentElement:: ?union<string, (dom.Node) \u2192 dom.Node>\n//   For `tag` rules that produce non-leaf nodes or marks, by default\n//   the content of the DOM element is parsed as content of the mark\n//   or node. If the child nodes are in a descendent node, this may be\n//   a CSS selector string that the parser must use to find the actual\n//   content element, or a function that returns the actual content\n//   element to the parser.\n//\n//   getContent:: ?(dom.Node, schema: Schema) \u2192 Fragment\n//   Can be used to override the content of a matched node. When\n//   present, instead of parsing the node's child nodes, the result of\n//   this function is used.\n//\n//   preserveWhitespace:: ?union<bool, \"full\">\n//   Controls whether whitespace should be preserved when parsing the\n//   content inside the matched element. `false` means whitespace may\n//   be collapsed, `true` means that whitespace should be preserved\n//   but newlines normalized to spaces, and `\"full\"` means that\n//   newlines should also be preserved.\n\n// ::- A DOM parser represents a strategy for parsing DOM content into\n// a ProseMirror document conforming to a given schema. Its behavior\n// is defined by an array of [rules](#model.ParseRule).\nexport class DOMParser {\n  // :: (Schema, [ParseRule])\n  // Create a parser that targets the given schema, using the given\n  // parsing rules.\n  constructor(schema, rules) {\n    // :: Schema\n    // The schema into which the parser parses.\n    this.schema = schema\n    // :: [ParseRule]\n    // The set of [parse rules](#model.ParseRule) that the parser\n    // uses, in order of precedence.\n    this.rules = rules\n    this.tags = []\n    this.styles = []\n\n    rules.forEach(rule => {\n      if (rule.tag) this.tags.push(rule)\n      else if (rule.style) this.styles.push(rule)\n    })\n\n    // Only normalize list elements when lists in the schema can't directly contain themselves\n    this.normalizeLists = !this.tags.some(r => {\n      if (!/^(ul|ol)\\b/.test(r.tag) || !r.node) return false\n      let node = schema.nodes[r.node]\n      return node.contentMatch.matchType(node)\n    })\n  }\n\n  // :: (dom.Node, ?ParseOptions) \u2192 Node\n  // Parse a document from the content of a DOM node.\n  parse(dom, options = {}) {\n    let context = new ParseContext(this, options, false)\n    context.addAll(dom, null, options.from, options.to)\n    return context.finish()\n  }\n\n  // :: (dom.Node, ?ParseOptions) \u2192 Slice\n  // Parses the content of the given DOM node, like\n  // [`parse`](#model.DOMParser.parse), and takes the same set of\n  // options. But unlike that method, which produces a whole node,\n  // this one returns a slice that is open at the sides, meaning that\n  // the schema constraints aren't applied to the start of nodes to\n  // the left of the input and the end of nodes at the end.\n  parseSlice(dom, options = {}) {\n    let context = new ParseContext(this, options, true)\n    context.addAll(dom, null, options.from, options.to)\n    return Slice.maxOpen(context.finish())\n  }\n\n  matchTag(dom, context, after) {\n    for (let i = after ? this.tags.indexOf(after) + 1 : 0; i < this.tags.length; i++) {\n      let rule = this.tags[i]\n      if (matches(dom, rule.tag) &&\n          (rule.namespace === undefined || dom.namespaceURI == rule.namespace) &&\n          (!rule.context || context.matchesContext(rule.context))) {\n        if (rule.getAttrs) {\n          let result = rule.getAttrs(dom)\n          if (result === false) continue\n          rule.attrs = result\n        }\n        return rule\n      }\n    }\n  }\n\n  matchStyle(prop, value, context, after) {\n    for (let i = after ? this.styles.indexOf(after) + 1 : 0; i < this.styles.length; i++) {\n      let rule = this.styles[i]\n      if (rule.style.indexOf(prop) != 0 ||\n          rule.context && !context.matchesContext(rule.context) ||\n          // Test that the style string either precisely matches the prop,\n          // or has an '=' sign after the prop, followed by the given\n          // value.\n          rule.style.length > prop.length &&\n          (rule.style.charCodeAt(prop.length) != 61 || rule.style.slice(prop.length + 1) != value))\n        continue\n      if (rule.getAttrs) {\n        let result = rule.getAttrs(value)\n        if (result === false) continue\n        rule.attrs = result\n      }\n      return rule\n    }\n  }\n\n  // : (Schema) \u2192 [ParseRule]\n  static schemaRules(schema) {\n    let result = []\n    function insert(rule) {\n      let priority = rule.priority == null ? 50 : rule.priority, i = 0\n      for (; i < result.length; i++) {\n        let next = result[i], nextPriority = next.priority == null ? 50 : next.priority\n        if (nextPriority < priority) break\n      }\n      result.splice(i, 0, rule)\n    }\n\n    for (let name in schema.marks) {\n      let rules = schema.marks[name].spec.parseDOM\n      if (rules) rules.forEach(rule => {\n        insert(rule = copy(rule))\n        rule.mark = name\n      })\n    }\n    for (let name in schema.nodes) {\n      let rules = schema.nodes[name].spec.parseDOM\n      if (rules) rules.forEach(rule => {\n        insert(rule = copy(rule))\n        rule.node = name\n      })\n    }\n    return result\n  }\n\n  // :: (Schema) \u2192 DOMParser\n  // Construct a DOM parser using the parsing rules listed in a\n  // schema's [node specs](#model.NodeSpec.parseDOM), reordered by\n  // [priority](#model.ParseRule.priority).\n  static fromSchema(schema) {\n    return schema.cached.domParser ||\n      (schema.cached.domParser = new DOMParser(schema, DOMParser.schemaRules(schema)))\n  }\n}\n\n// : Object<bool> The block-level tags in HTML5\nconst blockTags = {\n  address: true, article: true, aside: true, blockquote: true, canvas: true,\n  dd: true, div: true, dl: true, fieldset: true, figcaption: true, figure: true,\n  footer: true, form: true, h1: true, h2: true, h3: true, h4: true, h5: true,\n  h6: true, header: true, hgroup: true, hr: true, li: true, noscript: true, ol: true,\n  output: true, p: true, pre: true, section: true, table: true, tfoot: true, ul: true\n}\n\n// : Object<bool> The tags that we normally ignore.\nconst ignoreTags = {\n  head: true, noscript: true, object: true, script: true, style: true, title: true\n}\n\n// : Object<bool> List tags.\nconst listTags = {ol: true, ul: true}\n\n// Using a bitfield for node context options\nconst OPT_PRESERVE_WS = 1, OPT_PRESERVE_WS_FULL = 2, OPT_OPEN_LEFT = 4\n\nfunction wsOptionsFor(preserveWhitespace) {\n  return (preserveWhitespace ? OPT_PRESERVE_WS : 0) | (preserveWhitespace === \"full\" ? OPT_PRESERVE_WS_FULL : 0)\n}\n\nclass NodeContext {\n  constructor(type, attrs, marks, pendingMarks, solid, match, options) {\n    this.type = type\n    this.attrs = attrs\n    this.solid = solid\n    this.match = match || (options & OPT_OPEN_LEFT ? null : type.contentMatch)\n    this.options = options\n    this.content = []\n    // Marks applied to this node itself\n    this.marks = marks\n    // Marks applied to its children\n    this.activeMarks = Mark.none\n    // Marks that can't apply here, but will be used in children if possible\n    this.pendingMarks = pendingMarks\n    // Nested Marks with same type\n    this.stashMarks = []\n  }\n\n  findWrapping(node) {\n    if (!this.match) {\n      if (!this.type) return []\n      let fill = this.type.contentMatch.fillBefore(Fragment.from(node))\n      if (fill) {\n        this.match = this.type.contentMatch.matchFragment(fill)\n      } else {\n        let start = this.type.contentMatch, wrap\n        if (wrap = start.findWrapping(node.type)) {\n          this.match = start\n          return wrap\n        } else {\n          return null\n        }\n      }\n    }\n    return this.match.findWrapping(node.type)\n  }\n\n  finish(openEnd) {\n    if (!(this.options & OPT_PRESERVE_WS)) { // Strip trailing whitespace\n      let last = this.content[this.content.length - 1], m\n      if (last && last.isText && (m = /[ \\t\\r\\n\\u000c]+$/.exec(last.text))) {\n        if (last.text.length == m[0].length) this.content.pop()\n        else this.content[this.content.length - 1] = last.withText(last.text.slice(0, last.text.length - m[0].length))\n      }\n    }\n    let content = Fragment.from(this.content)\n    if (!openEnd && this.match)\n      content = content.append(this.match.fillBefore(Fragment.empty, true))\n    return this.type ? this.type.create(this.attrs, content, this.marks) : content\n  }\n\n  popFromStashMark(mark) {\n    for (let i = this.stashMarks.length - 1; i >= 0; i--)\n      if (mark.eq(this.stashMarks[i])) return this.stashMarks.splice(i, 1)[0]\n  }\n\n  applyPending(nextType) {\n    for (let i = 0, pending = this.pendingMarks; i < pending.length; i++) {\n      let mark = pending[i]\n      if ((this.type ? this.type.allowsMarkType(mark.type) : markMayApply(mark.type, nextType)) &&\n          !mark.isInSet(this.activeMarks)) {\n        this.activeMarks = mark.addToSet(this.activeMarks)\n        this.pendingMarks = mark.removeFromSet(this.pendingMarks)\n      }\n    }\n  }\n\n  inlineContext(node) {\n    if (this.type) return this.type.inlineContent\n    if (this.content.length) return this.content[0].isInline\n    return node.parentNode && !blockTags.hasOwnProperty(node.parentNode.nodeName.toLowerCase())\n  }\n}\n\nclass ParseContext {\n  // : (DOMParser, Object)\n  constructor(parser, options, open) {\n    // : DOMParser The parser we are using.\n    this.parser = parser\n    // : Object The options passed to this parse.\n    this.options = options\n    this.isOpen = open\n    let topNode = options.topNode, topContext\n    let topOptions = wsOptionsFor(options.preserveWhitespace) | (open ? OPT_OPEN_LEFT : 0)\n    if (topNode)\n      topContext = new NodeContext(topNode.type, topNode.attrs, Mark.none, Mark.none, true,\n                                   options.topMatch || topNode.type.contentMatch, topOptions)\n    else if (open)\n      topContext = new NodeContext(null, null, Mark.none, Mark.none, true, null, topOptions)\n    else\n      topContext = new NodeContext(parser.schema.topNodeType, null, Mark.none, Mark.none, true, null, topOptions)\n    this.nodes = [topContext]\n    // : [Mark] The current set of marks\n    this.open = 0\n    this.find = options.findPositions\n    this.needsBlock = false\n  }\n\n  get top() {\n    return this.nodes[this.open]\n  }\n\n  // : (dom.Node)\n  // Add a DOM node to the content. Text is inserted as text node,\n  // otherwise, the node is passed to `addElement` or, if it has a\n  // `style` attribute, `addElementWithStyles`.\n  addDOM(dom) {\n    if (dom.nodeType == 3) {\n      this.addTextNode(dom)\n    } else if (dom.nodeType == 1) {\n      let style = dom.getAttribute(\"style\")\n      let marks = style ? this.readStyles(parseStyles(style)) : null, top = this.top\n      if (marks != null) for (let i = 0; i < marks.length; i++) this.addPendingMark(marks[i])\n      this.addElement(dom)\n      if (marks != null) for (let i = 0; i < marks.length; i++) this.removePendingMark(marks[i], top)\n    }\n  }\n\n  addTextNode(dom) {\n    let value = dom.nodeValue\n    let top = this.top\n    if (top.options & OPT_PRESERVE_WS_FULL ||\n        top.inlineContext(dom) ||\n        /[^ \\t\\r\\n\\u000c]/.test(value)) {\n      if (!(top.options & OPT_PRESERVE_WS)) {\n        value = value.replace(/[ \\t\\r\\n\\u000c]+/g, \" \")\n        // If this starts with whitespace, and there is no node before it, or\n        // a hard break, or a text node that ends with whitespace, strip the\n        // leading space.\n        if (/^[ \\t\\r\\n\\u000c]/.test(value) && this.open == this.nodes.length - 1) {\n          let nodeBefore = top.content[top.content.length - 1]\n          let domNodeBefore = dom.previousSibling\n          if (!nodeBefore ||\n              (domNodeBefore && domNodeBefore.nodeName == 'BR') ||\n              (nodeBefore.isText && /[ \\t\\r\\n\\u000c]$/.test(nodeBefore.text)))\n            value = value.slice(1)\n        }\n      } else if (!(top.options & OPT_PRESERVE_WS_FULL)) {\n        value = value.replace(/\\r?\\n|\\r/g, \" \")\n      } else {\n        value = value.replace(/\\r\\n?/g, \"\\n\")\n      }\n      if (value) this.insertNode(this.parser.schema.text(value))\n      this.findInText(dom)\n    } else {\n      this.findInside(dom)\n    }\n  }\n\n  // : (dom.Element, ?ParseRule)\n  // Try to find a handler for the given tag and use that to parse. If\n  // none is found, the element's content nodes are added directly.\n  addElement(dom, matchAfter) {\n    let name = dom.nodeName.toLowerCase(), ruleID\n    if (listTags.hasOwnProperty(name) && this.parser.normalizeLists) normalizeList(dom)\n    let rule = (this.options.ruleFromNode && this.options.ruleFromNode(dom)) ||\n        (ruleID = this.parser.matchTag(dom, this, matchAfter))\n    if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {\n      this.findInside(dom)\n      this.ignoreFallback(dom)\n    } else if (!rule || rule.skip || rule.closeParent) {\n      if (rule && rule.closeParent) this.open = Math.max(0, this.open - 1)\n      else if (rule && rule.skip.nodeType) dom = rule.skip\n      let sync, top = this.top, oldNeedsBlock = this.needsBlock\n      if (blockTags.hasOwnProperty(name)) {\n        sync = true\n        if (!top.type) this.needsBlock = true\n      } else if (!dom.firstChild) {\n        this.leafFallback(dom)\n        return\n      }\n      this.addAll(dom)\n      if (sync) this.sync(top)\n      this.needsBlock = oldNeedsBlock\n    } else {\n      this.addElementByRule(dom, rule, rule.consuming === false ? ruleID : null)\n    }\n  }\n\n  // Called for leaf DOM nodes that would otherwise be ignored\n  leafFallback(dom) {\n    if (dom.nodeName == \"BR\" && this.top.type && this.top.type.inlineContent)\n      this.addTextNode(dom.ownerDocument.createTextNode(\"\\n\"))\n  }\n\n  // Called for ignored nodes\n  ignoreFallback(dom) {\n    // Ignored BR nodes should at least create an inline context\n    if (dom.nodeName == \"BR\" && (!this.top.type || !this.top.type.inlineContent))\n      this.findPlace(this.parser.schema.text(\"-\"))\n  }\n\n  // Run any style parser associated with the node's styles. Either\n  // return an array of marks, or null to indicate some of the styles\n  // had a rule with `ignore` set.\n  readStyles(styles) {\n    let marks = Mark.none\n    style: for (let i = 0; i < styles.length; i += 2) {\n      for (let after = null;;) {\n        let rule = this.parser.matchStyle(styles[i], styles[i + 1], this, after)\n        if (!rule) continue style\n        if (rule.ignore) return null\n        marks = this.parser.schema.marks[rule.mark].create(rule.attrs).addToSet(marks)\n        if (rule.consuming === false) after = rule\n        else break\n      }\n    }\n    return marks\n  }\n\n  // : (dom.Element, ParseRule) \u2192 bool\n  // Look up a handler for the given node. If none are found, return\n  // false. Otherwise, apply it, use its return value to drive the way\n  // the node's content is wrapped, and return true.\n  addElementByRule(dom, rule, continueAfter) {\n    let sync, nodeType, markType, mark\n    if (rule.node) {\n      nodeType = this.parser.schema.nodes[rule.node]\n      if (!nodeType.isLeaf) {\n        sync = this.enter(nodeType, rule.attrs, rule.preserveWhitespace)\n      } else if (!this.insertNode(nodeType.create(rule.attrs))) {\n        this.leafFallback(dom)\n      }\n    } else {\n      markType = this.parser.schema.marks[rule.mark]\n      mark = markType.create(rule.attrs)\n      this.addPendingMark(mark)\n    }\n    let startIn = this.top\n\n    if (nodeType && nodeType.isLeaf) {\n      this.findInside(dom)\n    } else if (continueAfter) {\n      this.addElement(dom, continueAfter)\n    } else if (rule.getContent) {\n      this.findInside(dom)\n      rule.getContent(dom, this.parser.schema).forEach(node => this.insertNode(node))\n    } else {\n      let contentDOM = rule.contentElement\n      if (typeof contentDOM == \"string\") contentDOM = dom.querySelector(contentDOM)\n      else if (typeof contentDOM == \"function\") contentDOM = contentDOM(dom)\n      if (!contentDOM) contentDOM = dom\n      this.findAround(dom, contentDOM, true)\n      this.addAll(contentDOM, sync)\n    }\n    if (sync) { this.sync(startIn); this.open-- }\n    if (mark) this.removePendingMark(mark, startIn)\n  }\n\n  // : (dom.Node, ?NodeBuilder, ?number, ?number)\n  // Add all child nodes between `startIndex` and `endIndex` (or the\n  // whole node, if not given). If `sync` is passed, use it to\n  // synchronize after every block element.\n  addAll(parent, sync, startIndex, endIndex) {\n    let index = startIndex || 0\n    for (let dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild,\n             end = endIndex == null ? null : parent.childNodes[endIndex];\n         dom != end; dom = dom.nextSibling, ++index) {\n      this.findAtPoint(parent, index)\n      this.addDOM(dom)\n      if (sync && blockTags.hasOwnProperty(dom.nodeName.toLowerCase()))\n        this.sync(sync)\n    }\n    this.findAtPoint(parent, index)\n  }\n\n  // Try to find a way to fit the given node type into the current\n  // context. May add intermediate wrappers and/or leave non-solid\n  // nodes that we're in.\n  findPlace(node) {\n    let route, sync\n    for (let depth = this.open; depth >= 0; depth--) {\n      let cx = this.nodes[depth]\n      let found = cx.findWrapping(node)\n      if (found && (!route || route.length > found.length)) {\n        route = found\n        sync = cx\n        if (!found.length) break\n      }\n      if (cx.solid) break\n    }\n    if (!route) return false\n    this.sync(sync)\n    for (let i = 0; i < route.length; i++)\n      this.enterInner(route[i], null, false)\n    return true\n  }\n\n  // : (Node) \u2192 ?Node\n  // Try to insert the given node, adjusting the context when needed.\n  insertNode(node) {\n    if (node.isInline && this.needsBlock && !this.top.type) {\n      let block = this.textblockFromContext()\n      if (block) this.enterInner(block)\n    }\n    if (this.findPlace(node)) {\n      this.closeExtra()\n      let top = this.top\n      top.applyPending(node.type)\n      if (top.match) top.match = top.match.matchType(node.type)\n      let marks = top.activeMarks\n      for (let i = 0; i < node.marks.length; i++)\n        if (!top.type || top.type.allowsMarkType(node.marks[i].type))\n          marks = node.marks[i].addToSet(marks)\n      top.content.push(node.mark(marks))\n      return true\n    }\n    return false\n  }\n\n  // : (NodeType, ?Object) \u2192 bool\n  // Try to start a node of the given type, adjusting the context when\n  // necessary.\n  enter(type, attrs, preserveWS) {\n    let ok = this.findPlace(type.create(attrs))\n    if (ok) this.enterInner(type, attrs, true, preserveWS)\n    return ok\n  }\n\n  // Open a node of the given type\n  enterInner(type, attrs, solid, preserveWS) {\n    this.closeExtra()\n    let top = this.top\n    top.applyPending(type)\n    top.match = top.match && top.match.matchType(type, attrs)\n    let options = preserveWS == null ? top.options & ~OPT_OPEN_LEFT : wsOptionsFor(preserveWS)\n    if ((top.options & OPT_OPEN_LEFT) && top.content.length == 0) options |= OPT_OPEN_LEFT\n    this.nodes.push(new NodeContext(type, attrs, top.activeMarks, top.pendingMarks, solid, null, options))\n    this.open++\n  }\n\n  // Make sure all nodes above this.open are finished and added to\n  // their parents\n  closeExtra(openEnd) {\n    let i = this.nodes.length - 1\n    if (i > this.open) {\n      for (; i > this.open; i--) this.nodes[i - 1].content.push(this.nodes[i].finish(openEnd))\n      this.nodes.length = this.open + 1\n    }\n  }\n\n  finish() {\n    this.open = 0\n    this.closeExtra(this.isOpen)\n    return this.nodes[0].finish(this.isOpen || this.options.topOpen)\n  }\n\n  sync(to) {\n    for (let i = this.open; i >= 0; i--) if (this.nodes[i] == to) {\n      this.open = i\n      return\n    }\n  }\n\n  get currentPos() {\n    this.closeExtra()\n    let pos = 0\n    for (let i = this.open; i >= 0; i--) {\n      let content = this.nodes[i].content\n      for (let j = content.length - 1; j >= 0; j--)\n        pos += content[j].nodeSize\n      if (i) pos++\n    }\n    return pos\n  }\n\n  findAtPoint(parent, offset) {\n    if (this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].node == parent && this.find[i].offset == offset)\n        this.find[i].pos = this.currentPos\n    }\n  }\n\n  findInside(parent) {\n    if (this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node))\n        this.find[i].pos = this.currentPos\n    }\n  }\n\n  findAround(parent, content, before) {\n    if (parent != content && this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node)) {\n        let pos = content.compareDocumentPosition(this.find[i].node)\n        if (pos & (before ? 2 : 4))\n          this.find[i].pos = this.currentPos\n      }\n    }\n  }\n\n  findInText(textNode) {\n    if (this.find) for (let i = 0; i < this.find.length; i++) {\n      if (this.find[i].node == textNode)\n        this.find[i].pos = this.currentPos - (textNode.nodeValue.length - this.find[i].offset)\n    }\n  }\n\n  // : (string) \u2192 bool\n  // Determines whether the given [context\n  // string](#ParseRule.context) matches this context.\n  matchesContext(context) {\n    if (context.indexOf(\"|\") > -1)\n      return context.split(/\\s*\\|\\s*/).some(this.matchesContext, this)\n\n    let parts = context.split(\"/\")\n    let option = this.options.context\n    let useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type)\n    let minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1)\n    let match = (i, depth) => {\n      for (; i >= 0; i--) {\n        let part = parts[i]\n        if (part == \"\") {\n          if (i == parts.length - 1 || i == 0) continue\n          for (; depth >= minDepth; depth--)\n            if (match(i - 1, depth)) return true\n          return false\n        } else {\n          let next = depth > 0 || (depth == 0 && useRoot) ? this.nodes[depth].type\n              : option && depth >= minDepth ? option.node(depth - minDepth).type\n              : null\n          if (!next || (next.name != part && next.groups.indexOf(part) == -1))\n            return false\n          depth--\n        }\n      }\n      return true\n    }\n    return match(parts.length - 1, this.open)\n  }\n\n  textblockFromContext() {\n    let $context = this.options.context\n    if ($context) for (let d = $context.depth; d >= 0; d--) {\n      let deflt = $context.node(d).contentMatchAt($context.indexAfter(d)).defaultType\n      if (deflt && deflt.isTextblock && deflt.defaultAttrs) return deflt\n    }\n    for (let name in this.parser.schema.nodes) {\n      let type = this.parser.schema.nodes[name]\n      if (type.isTextblock && type.defaultAttrs) return type\n    }\n  }\n\n  addPendingMark(mark) {\n    let found = findSameMarkInSet(mark, this.top.pendingMarks)\n    if (found) this.top.stashMarks.push(found)\n    this.top.pendingMarks = mark.addToSet(this.top.pendingMarks)\n  }\n\n  removePendingMark(mark, upto) {\n    for (let depth = this.open; depth >= 0; depth--) {\n      let level = this.nodes[depth]\n      let found = level.pendingMarks.lastIndexOf(mark)\n      if (found > -1) {\n        level.pendingMarks = mark.removeFromSet(level.pendingMarks)\n      } else {\n        level.activeMarks = mark.removeFromSet(level.activeMarks)\n        let stashMark = level.popFromStashMark(mark)\n        if (stashMark && level.type && level.type.allowsMarkType(stashMark.type))\n          level.activeMarks = stashMark.addToSet(level.activeMarks)\n      }\n      if (level == upto) break\n    }\n  }\n}\n\n// Kludge to work around directly nested list nodes produced by some\n// tools and allowed by browsers to mean that the nested list is\n// actually part of the list item above it.\nfunction normalizeList(dom) {\n  for (let child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {\n    let name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null\n    if (name && listTags.hasOwnProperty(name) && prevItem) {\n      prevItem.appendChild(child)\n      child = prevItem\n    } else if (name == \"li\") {\n      prevItem = child\n    } else if (name) {\n      prevItem = null\n    }\n  }\n}\n\n// Apply a CSS selector.\nfunction matches(dom, selector) {\n  return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector)\n}\n\n// : (string) \u2192 [string]\n// Tokenize a style attribute into property/value pairs.\nfunction parseStyles(style) {\n  let re = /\\s*([\\w-]+)\\s*:\\s*([^;]+)/g, m, result = []\n  while (m = re.exec(style)) result.push(m[1], m[2].trim())\n  return result\n}\n\nfunction copy(obj) {\n  let copy = {}\n  for (let prop in obj) copy[prop] = obj[prop]\n  return copy\n}\n\n// Used when finding a mark at the top level of a fragment parse.\n// Checks whether it would be reasonable to apply a given mark type to\n// a given node, by looking at the way the mark occurs in the schema.\nfunction markMayApply(markType, nodeType) {\n  let nodes = nodeType.schema.nodes\n  for (let name in nodes) {\n    let parent = nodes[name]\n    if (!parent.allowsMarkType(markType)) continue\n    let seen = [], scan = match => {\n      seen.push(match)\n      for (let i = 0; i < match.edgeCount; i++) {\n        let {type, next} = match.edge(i)\n        if (type == nodeType) return true\n        if (seen.indexOf(next) < 0 && scan(next)) return true\n      }\n    }\n    if (scan(parent.contentMatch)) return true\n  }\n}\n\nfunction findSameMarkInSet(mark, set) {\n  for (let i = 0; i < set.length; i++) {\n    if (mark.eq(set[i])) return set[i]\n  }\n}\n", "// DOMOutputSpec:: interface\n// A description of a DOM structure. Can be either a string, which is\n// interpreted as a text node, a DOM node, which is interpreted as\n// itself, a `{dom: Node, contentDOM: ?Node}` object, or an array.\n//\n// An array describes a DOM element. The first value in the array\n// should be a string\u2014the name of the DOM element, optionally prefixed\n// by a namespace URL and a space. If the second element is plain\n// object, it is interpreted as a set of attributes for the element.\n// Any elements after that (including the 2nd if it's not an attribute\n// object) are interpreted as children of the DOM elements, and must\n// either be valid `DOMOutputSpec` values, or the number zero.\n//\n// The number zero (pronounced \u201Chole\u201D) is used to indicate the place\n// where a node's child nodes should be inserted. If it occurs in an\n// output spec, it should be the only child element in its parent\n// node.\n\n// ::- A DOM serializer knows how to convert ProseMirror nodes and\n// marks of various types to DOM nodes.\nexport class DOMSerializer {\n  // :: (Object<(node: Node) \u2192 DOMOutputSpec>, Object<?(mark: Mark, inline: bool) \u2192 DOMOutputSpec>)\n  // Create a serializer. `nodes` should map node names to functions\n  // that take a node and return a description of the corresponding\n  // DOM. `marks` does the same for mark names, but also gets an\n  // argument that tells it whether the mark's content is block or\n  // inline content (for typical use, it'll always be inline). A mark\n  // serializer may be `null` to indicate that marks of that type\n  // should not be serialized.\n  constructor(nodes, marks) {\n    // :: Object<(node: Node) \u2192 DOMOutputSpec>\n    // The node serialization functions.\n    this.nodes = nodes || {}\n    // :: Object<?(mark: Mark, inline: bool) \u2192 DOMOutputSpec>\n    // The mark serialization functions.\n    this.marks = marks || {}\n  }\n\n  // :: (Fragment, ?Object) \u2192 dom.DocumentFragment\n  // Serialize the content of this fragment to a DOM fragment. When\n  // not in the browser, the `document` option, containing a DOM\n  // document, should be passed so that the serializer can create\n  // nodes.\n  serializeFragment(fragment, options = {}, target) {\n    if (!target) target = doc(options).createDocumentFragment()\n\n    let top = target, active = null\n    fragment.forEach(node => {\n      if (active || node.marks.length) {\n        if (!active) active = []\n        let keep = 0, rendered = 0\n        while (keep < active.length && rendered < node.marks.length) {\n          let next = node.marks[rendered]\n          if (!this.marks[next.type.name]) { rendered++; continue }\n          if (!next.eq(active[keep]) || next.type.spec.spanning === false) break\n          keep += 2; rendered++\n        }\n        while (keep < active.length) {\n          top = active.pop()\n          active.pop()\n        }\n        while (rendered < node.marks.length) {\n          let add = node.marks[rendered++]\n          let markDOM = this.serializeMark(add, node.isInline, options)\n          if (markDOM) {\n            active.push(add, top)\n            top.appendChild(markDOM.dom)\n            top = markDOM.contentDOM || markDOM.dom\n          }\n        }\n      }\n      top.appendChild(this.serializeNodeInner(node, options))\n    })\n\n    return target\n  }\n\n  serializeNodeInner(node, options = {}) {\n    let {dom, contentDOM} =\n        DOMSerializer.renderSpec(doc(options), this.nodes[node.type.name](node))\n    if (contentDOM) {\n      if (node.isLeaf)\n        throw new RangeError(\"Content hole not allowed in a leaf node spec\")\n      if (options.onContent)\n        options.onContent(node, contentDOM, options)\n      else\n        this.serializeFragment(node.content, options, contentDOM)\n    }\n    return dom\n  }\n\n  // :: (Node, ?Object) \u2192 dom.Node\n  // Serialize this node to a DOM node. This can be useful when you\n  // need to serialize a part of a document, as opposed to the whole\n  // document. To serialize a whole document, use\n  // [`serializeFragment`](#model.DOMSerializer.serializeFragment) on\n  // its [content](#model.Node.content).\n  serializeNode(node, options = {}) {\n    let dom = this.serializeNodeInner(node, options)\n    for (let i = node.marks.length - 1; i >= 0; i--) {\n      let wrap = this.serializeMark(node.marks[i], node.isInline, options)\n      if (wrap) {\n        ;(wrap.contentDOM || wrap.dom).appendChild(dom)\n        dom = wrap.dom\n      }\n    }\n    return dom\n  }\n\n  serializeMark(mark, inline, options = {}) {\n    let toDOM = this.marks[mark.type.name]\n    return toDOM && DOMSerializer.renderSpec(doc(options), toDOM(mark, inline))\n  }\n\n  // :: (dom.Document, DOMOutputSpec) \u2192 {dom: dom.Node, contentDOM: ?dom.Node}\n  // Render an [output spec](#model.DOMOutputSpec) to a DOM node. If\n  // the spec has a hole (zero) in it, `contentDOM` will point at the\n  // node with the hole.\n  static renderSpec(doc, structure, xmlNS = null) {\n    if (typeof structure == \"string\")\n      return {dom: doc.createTextNode(structure)}\n    if (structure.nodeType != null)\n      return {dom: structure}\n    if (structure.dom && structure.dom.nodeType != null)\n      return structure\n    let tagName = structure[0], space = tagName.indexOf(\" \")\n    if (space > 0) {\n      xmlNS = tagName.slice(0, space)\n      tagName = tagName.slice(space + 1)\n    }\n    let contentDOM = null, dom = xmlNS ? doc.createElementNS(xmlNS, tagName) : doc.createElement(tagName)\n    let attrs = structure[1], start = 1\n    if (attrs && typeof attrs == \"object\" && attrs.nodeType == null && !Array.isArray(attrs)) {\n      start = 2\n      for (let name in attrs) if (attrs[name] != null) {\n        let space = name.indexOf(\" \")\n        if (space > 0) dom.setAttributeNS(name.slice(0, space), name.slice(space + 1), attrs[name])\n        else dom.setAttribute(name, attrs[name])\n      }\n    }\n    for (let i = start; i < structure.length; i++) {\n      let child = structure[i]\n      if (child === 0) {\n        if (i < structure.length - 1 || i > start)\n          throw new RangeError(\"Content hole must be the only child of its parent node\")\n        return {dom, contentDOM: dom}\n      } else {\n        let {dom: inner, contentDOM: innerContent} = DOMSerializer.renderSpec(doc, child, xmlNS)\n        dom.appendChild(inner)\n        if (innerContent) {\n          if (contentDOM) throw new RangeError(\"Multiple content holes\")\n          contentDOM = innerContent\n        }\n      }\n    }\n    return {dom, contentDOM}\n  }\n\n  // :: (Schema) \u2192 DOMSerializer\n  // Build a serializer using the [`toDOM`](#model.NodeSpec.toDOM)\n  // properties in a schema's node and mark specs.\n  static fromSchema(schema) {\n    return schema.cached.domSerializer ||\n      (schema.cached.domSerializer = new DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)))\n  }\n\n  // : (Schema) \u2192 Object<(node: Node) \u2192 DOMOutputSpec>\n  // Gather the serializers in a schema's node specs into an object.\n  // This can be useful as a base to build a custom serializer from.\n  static nodesFromSchema(schema) {\n    let result = gatherToDOM(schema.nodes)\n    if (!result.text) result.text = node => node.text\n    return result\n  }\n\n  // : (Schema) \u2192 Object<(mark: Mark) \u2192 DOMOutputSpec>\n  // Gather the serializers in a schema's mark specs into an object.\n  static marksFromSchema(schema) {\n    return gatherToDOM(schema.marks)\n  }\n}\n\nfunction gatherToDOM(obj) {\n  let result = {}\n  for (let name in obj) {\n    let toDOM = obj[name].spec.toDOM\n    if (toDOM) result[name] = toDOM\n  }\n  return result\n}\n\nfunction doc(options) {\n  // declare global: window\n  return options.document || window.document\n}\n", "import { Schema } from \"prosemirror-model\";\n\nconst pDOM = [\"p\", 0] as const;\n\n// :: Object\n// [Specs](#model.NodeSpec) for the nodes defined in this schema.\nexport const nodes = {\n  // :: NodeSpec The top level document node.\n  doc: {\n    content: \"block+\",\n  },\n\n  // :: NodeSpec A plain paragraph textblock. Represented in the DOM\n  // as a `<p>` element.\n  paragraph: {\n    content: \"inline*\",\n    group: \"block\",\n    parseDOM: [{ tag: \"p\" }],\n    toDOM() {\n      return pDOM;\n    },\n  },\n\n  // :: NodeSpec The text node.\n  text: {\n    group: \"inline\",\n  },\n};\n\n// :: Object [Specs](#model.MarkSpec) for the marks in the schema.\nexport const marks = {};\n\n// :: Schema\n// This schema roughly corresponds to the document schema used by\n// [CommonMark](http://commonmark.org/), minus the list elements,\n// which are defined in the [`prosemirror-schema-list`](#schema-list)\n// module.\n//\n// To reuse elements from this schema, extend or read from its\n// `spec.nodes` and `spec.marks` [properties](#model.Schema.spec).\nexport const schema = new Schema({ nodes, marks } as const);\n", "// Mappable:: interface\n// There are several things that positions can be mapped through.\n// Such objects conform to this interface.\n//\n//   map:: (pos: number, assoc: ?number) \u2192 number\n//   Map a position through this object. When given, `assoc` (should\n//   be -1 or 1, defaults to 1) determines with which side the\n//   position is associated, which determines in which direction to\n//   move when a chunk of content is inserted at the mapped position.\n//\n//   mapResult:: (pos: number, assoc: ?number) \u2192 MapResult\n//   Map a position, and return an object containing additional\n//   information about the mapping. The result's `deleted` field tells\n//   you whether the position was deleted (completely enclosed in a\n//   replaced range) during the mapping. When content on only one side\n//   is deleted, the position itself is only considered deleted when\n//   `assoc` points in the direction of the deleted content.\n\n// Recovery values encode a range index and an offset. They are\n// represented as numbers, because tons of them will be created when\n// mapping, for example, a large number of decorations. The number's\n// lower 16 bits provide the index, the remaining bits the offset.\n//\n// Note: We intentionally don't use bit shift operators to en- and\n// decode these, since those clip to 32 bits, which we might in rare\n// cases want to overflow. A 64-bit float can represent 48-bit\n// integers precisely.\n\nconst lower16 = 0xffff\nconst factor16 = Math.pow(2, 16)\n\nfunction makeRecover(index, offset) { return index + offset * factor16 }\nfunction recoverIndex(value) { return value & lower16 }\nfunction recoverOffset(value) { return (value - (value & lower16)) / factor16 }\n\n// ::- An object representing a mapped position with extra\n// information.\nexport class MapResult {\n  constructor(pos, deleted = false, recover = null) {\n    // :: number The mapped version of the position.\n    this.pos = pos\n    // :: bool Tells you whether the position was deleted, that is,\n    // whether the step removed its surroundings from the document.\n    this.deleted = deleted\n    this.recover = recover\n  }\n}\n\n// :: class extends Mappable\n// A map describing the deletions and insertions made by a step, which\n// can be used to find the correspondence between positions in the\n// pre-step version of a document and the same position in the\n// post-step version.\nexport class StepMap {\n  // :: ([number])\n  // Create a position map. The modifications to the document are\n  // represented as an array of numbers, in which each group of three\n  // represents a modified chunk as `[start, oldSize, newSize]`.\n  constructor(ranges, inverted = false) {\n    this.ranges = ranges\n    this.inverted = inverted\n  }\n\n  recover(value) {\n    let diff = 0, index = recoverIndex(value)\n    if (!this.inverted) for (let i = 0; i < index; i++)\n      diff += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1]\n    return this.ranges[index * 3] + diff + recoverOffset(value)\n  }\n\n  // : (number, ?number) \u2192 MapResult\n  mapResult(pos, assoc = 1) { return this._map(pos, assoc, false) }\n\n  // : (number, ?number) \u2192 number\n  map(pos, assoc = 1) { return this._map(pos, assoc, true) }\n\n  _map(pos, assoc, simple) {\n    let diff = 0, oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2\n    for (let i = 0; i < this.ranges.length; i += 3) {\n      let start = this.ranges[i] - (this.inverted ? diff : 0)\n      if (start > pos) break\n      let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex], end = start + oldSize\n      if (pos <= end) {\n        let side = !oldSize ? assoc : pos == start ? -1 : pos == end ? 1 : assoc\n        let result = start + diff + (side < 0 ? 0 : newSize)\n        if (simple) return result\n        let recover = pos == (assoc < 0 ? start : end) ? null : makeRecover(i / 3, pos - start)\n        return new MapResult(result, assoc < 0 ? pos != start : pos != end, recover)\n      }\n      diff += newSize - oldSize\n    }\n    return simple ? pos + diff : new MapResult(pos + diff)\n  }\n\n  touches(pos, recover) {\n    let diff = 0, index = recoverIndex(recover)\n    let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2\n    for (let i = 0; i < this.ranges.length; i += 3) {\n      let start = this.ranges[i] - (this.inverted ? diff : 0)\n      if (start > pos) break\n      let oldSize = this.ranges[i + oldIndex], end = start + oldSize\n      if (pos <= end && i == index * 3) return true\n      diff += this.ranges[i + newIndex] - oldSize\n    }\n    return false\n  }\n\n  // :: ((oldStart: number, oldEnd: number, newStart: number, newEnd: number))\n  // Calls the given function on each of the changed ranges included in\n  // this map.\n  forEach(f) {\n    let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2\n    for (let i = 0, diff = 0; i < this.ranges.length; i += 3) {\n      let start = this.ranges[i], oldStart = start - (this.inverted ? diff : 0), newStart = start + (this.inverted ? 0 : diff)\n      let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex]\n      f(oldStart, oldStart + oldSize, newStart, newStart + newSize)\n      diff += newSize - oldSize\n    }\n  }\n\n  // :: () \u2192 StepMap\n  // Create an inverted version of this map. The result can be used to\n  // map positions in the post-step document to the pre-step document.\n  invert() {\n    return new StepMap(this.ranges, !this.inverted)\n  }\n\n  toString() {\n    return (this.inverted ? \"-\" : \"\") + JSON.stringify(this.ranges)\n  }\n\n  // :: (n: number) \u2192 StepMap\n  // Create a map that moves all positions by offset `n` (which may be\n  // negative). This can be useful when applying steps meant for a\n  // sub-document to a larger document, or vice-versa.\n  static offset(n) {\n    return n == 0 ? StepMap.empty : new StepMap(n < 0 ? [0, -n, 0] : [0, 0, n])\n  }\n}\n\nStepMap.empty = new StepMap([])\n\n// :: class extends Mappable\n// A mapping represents a pipeline of zero or more [step\n// maps](#transform.StepMap). It has special provisions for losslessly\n// handling mapping positions through a series of steps in which some\n// steps are inverted versions of earlier steps. (This comes up when\n// \u2018[rebasing](/docs/guide/#transform.rebasing)\u2019 steps for\n// collaboration or history management.)\nexport class Mapping {\n  // :: (?[StepMap])\n  // Create a new mapping with the given position maps.\n  constructor(maps, mirror, from, to) {\n    // :: [StepMap]\n    // The step maps in this mapping.\n    this.maps = maps || []\n    // :: number\n    // The starting position in the `maps` array, used when `map` or\n    // `mapResult` is called.\n    this.from = from || 0\n    // :: number\n    // The end position in the `maps` array.\n    this.to = to == null ? this.maps.length : to\n    this.mirror = mirror\n  }\n\n  // :: (?number, ?number) \u2192 Mapping\n  // Create a mapping that maps only through a part of this one.\n  slice(from = 0, to = this.maps.length) {\n    return new Mapping(this.maps, this.mirror, from, to)\n  }\n\n  copy() {\n    return new Mapping(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to)\n  }\n\n  // :: (StepMap, ?number)\n  // Add a step map to the end of this mapping. If `mirrors` is\n  // given, it should be the index of the step map that is the mirror\n  // image of this one.\n  appendMap(map, mirrors) {\n    this.to = this.maps.push(map)\n    if (mirrors != null) this.setMirror(this.maps.length - 1, mirrors)\n  }\n\n  // :: (Mapping)\n  // Add all the step maps in a given mapping to this one (preserving\n  // mirroring information).\n  appendMapping(mapping) {\n    for (let i = 0, startSize = this.maps.length; i < mapping.maps.length; i++) {\n      let mirr = mapping.getMirror(i)\n      this.appendMap(mapping.maps[i], mirr != null && mirr < i ? startSize + mirr : null)\n    }\n  }\n\n  // :: (number) \u2192 ?number\n  // Finds the offset of the step map that mirrors the map at the\n  // given offset, in this mapping (as per the second argument to\n  // `appendMap`).\n  getMirror(n) {\n    if (this.mirror) for (let i = 0; i < this.mirror.length; i++)\n      if (this.mirror[i] == n) return this.mirror[i + (i % 2 ? -1 : 1)]\n  }\n\n  setMirror(n, m) {\n    if (!this.mirror) this.mirror = []\n    this.mirror.push(n, m)\n  }\n\n  // :: (Mapping)\n  // Append the inverse of the given mapping to this one.\n  appendMappingInverted(mapping) {\n    for (let i = mapping.maps.length - 1, totalSize = this.maps.length + mapping.maps.length; i >= 0; i--) {\n      let mirr = mapping.getMirror(i)\n      this.appendMap(mapping.maps[i].invert(), mirr != null && mirr > i ? totalSize - mirr - 1 : null)\n    }\n  }\n\n  // :: () \u2192 Mapping\n  // Create an inverted version of this mapping.\n  invert() {\n    let inverse = new Mapping\n    inverse.appendMappingInverted(this)\n    return inverse\n  }\n\n  // : (number, ?number) \u2192 number\n  // Map a position through this mapping.\n  map(pos, assoc = 1) {\n    if (this.mirror) return this._map(pos, assoc, true)\n    for (let i = this.from; i < this.to; i++)\n      pos = this.maps[i].map(pos, assoc)\n    return pos\n  }\n\n  // : (number, ?number) \u2192 MapResult\n  // Map a position through this mapping, returning a mapping\n  // result.\n  mapResult(pos, assoc = 1) { return this._map(pos, assoc, false) }\n\n  _map(pos, assoc, simple) {\n    let deleted = false\n\n    for (let i = this.from; i < this.to; i++) {\n      let map = this.maps[i], result = map.mapResult(pos, assoc)\n      if (result.recover != null) {\n        let corr = this.getMirror(i)\n        if (corr != null && corr > i && corr < this.to) {\n          i = corr\n          pos = this.maps[corr].recover(result.recover)\n          continue\n        }\n      }\n\n      if (result.deleted) deleted = true\n      pos = result.pos\n    }\n\n    return simple ? pos : new MapResult(pos, deleted)\n  }\n}\n", "import {Mapping} from \"./map\"\n\nexport function TransformError(message) {\n  let err = Error.call(this, message)\n  err.__proto__ = TransformError.prototype\n  return err\n}\n\nTransformError.prototype = Object.create(Error.prototype)\nTransformError.prototype.constructor = TransformError\nTransformError.prototype.name = \"TransformError\"\n\n// ::- Abstraction to build up and track an array of\n// [steps](#transform.Step) representing a document transformation.\n//\n// Most transforming methods return the `Transform` object itself, so\n// that they can be chained.\nexport class Transform {\n  // :: (Node)\n  // Create a transform that starts with the given document.\n  constructor(doc) {\n    // :: Node\n    // The current document (the result of applying the steps in the\n    // transform).\n    this.doc = doc\n    // :: [Step]\n    // The steps in this transform.\n    this.steps = []\n    // :: [Node]\n    // The documents before each of the steps.\n    this.docs = []\n    // :: Mapping\n    // A mapping with the maps for each of the steps in this transform.\n    this.mapping = new Mapping\n  }\n\n  // :: Node The starting document.\n  get before() { return this.docs.length ? this.docs[0] : this.doc }\n\n  // :: (step: Step) \u2192 this\n  // Apply a new step in this transform, saving the result. Throws an\n  // error when the step fails.\n  step(object) {\n    let result = this.maybeStep(object)\n    if (result.failed) throw new TransformError(result.failed)\n    return this\n  }\n\n  // :: (Step) \u2192 StepResult\n  // Try to apply a step in this transformation, ignoring it if it\n  // fails. Returns the step result.\n  maybeStep(step) {\n    let result = step.apply(this.doc)\n    if (!result.failed) this.addStep(step, result.doc)\n    return result\n  }\n\n  // :: bool\n  // True when the document has been changed (when there are any\n  // steps).\n  get docChanged() {\n    return this.steps.length > 0\n  }\n\n  addStep(step, doc) {\n    this.docs.push(this.doc)\n    this.steps.push(step)\n    this.mapping.appendMap(step.getMap())\n    this.doc = doc\n  }\n}\n", "import {ReplaceError} from \"prosemirror-model\"\n\nimport {StepMap} from \"./map\"\n\nfunction mustOverride() { throw new Error(\"Override me\") }\n\nconst stepsByID = Object.create(null)\n\n// ::- A step object represents an atomic change. It generally applies\n// only to the document it was created for, since the positions\n// stored in it will only make sense for that document.\n//\n// New steps are defined by creating classes that extend `Step`,\n// overriding the `apply`, `invert`, `map`, `getMap` and `fromJSON`\n// methods, and registering your class with a unique\n// JSON-serialization identifier using\n// [`Step.jsonID`](#transform.Step^jsonID).\nexport class Step {\n  // :: (doc: Node) \u2192 StepResult\n  // Applies this step to the given document, returning a result\n  // object that either indicates failure, if the step can not be\n  // applied to this document, or indicates success by containing a\n  // transformed document.\n  apply(_doc) { return mustOverride() }\n\n  // :: () \u2192 StepMap\n  // Get the step map that represents the changes made by this step,\n  // and which can be used to transform between positions in the old\n  // and the new document.\n  getMap() { return StepMap.empty }\n\n  // :: (doc: Node) \u2192 Step\n  // Create an inverted version of this step. Needs the document as it\n  // was before the step as argument.\n  invert(_doc) { return mustOverride() }\n\n  // :: (mapping: Mappable) \u2192 ?Step\n  // Map this step through a mappable thing, returning either a\n  // version of that step with its positions adjusted, or `null` if\n  // the step was entirely deleted by the mapping.\n  map(_mapping) { return mustOverride() }\n\n  // :: (other: Step) \u2192 ?Step\n  // Try to merge this step with another one, to be applied directly\n  // after it. Returns the merged step when possible, null if the\n  // steps can't be merged.\n  merge(_other) { return null }\n\n  // :: () \u2192 Object\n  // Create a JSON-serializeable representation of this step. When\n  // defining this for a custom subclass, make sure the result object\n  // includes the step type's [JSON id](#transform.Step^jsonID) under\n  // the `stepType` property.\n  toJSON() { return mustOverride() }\n\n  // :: (Schema, Object) \u2192 Step\n  // Deserialize a step from its JSON representation. Will call\n  // through to the step class' own implementation of this method.\n  static fromJSON(schema, json) {\n    if (!json || !json.stepType) throw new RangeError(\"Invalid input for Step.fromJSON\")\n    let type = stepsByID[json.stepType]\n    if (!type) throw new RangeError(`No step type ${json.stepType} defined`)\n    return type.fromJSON(schema, json)\n  }\n\n  // :: (string, constructor<Step>)\n  // To be able to serialize steps to JSON, each step needs a string\n  // ID to attach to its JSON representation. Use this method to\n  // register an ID for your step classes. Try to pick something\n  // that's unlikely to clash with steps from other modules.\n  static jsonID(id, stepClass) {\n    if (id in stepsByID) throw new RangeError(\"Duplicate use of step JSON ID \" + id)\n    stepsByID[id] = stepClass\n    stepClass.prototype.jsonID = id\n    return stepClass\n  }\n}\n\n// ::- The result of [applying](#transform.Step.apply) a step. Contains either a\n// new document or a failure value.\nexport class StepResult {\n  // : (?Node, ?string)\n  constructor(doc, failed) {\n    // :: ?Node The transformed document.\n    this.doc = doc\n    // :: ?string Text providing information about a failed step.\n    this.failed = failed\n  }\n\n  // :: (Node) \u2192 StepResult\n  // Create a successful step result.\n  static ok(doc) { return new StepResult(doc, null) }\n\n  // :: (string) \u2192 StepResult\n  // Create a failed step result.\n  static fail(message) { return new StepResult(null, message) }\n\n  // :: (Node, number, number, Slice) \u2192 StepResult\n  // Call [`Node.replace`](#model.Node.replace) with the given\n  // arguments. Create a successful result if it succeeds, and a\n  // failed one if it throws a `ReplaceError`.\n  static fromReplace(doc, from, to, slice) {\n    try {\n      return StepResult.ok(doc.replace(from, to, slice))\n    } catch (e) {\n      if (e instanceof ReplaceError) return StepResult.fail(e.message)\n      throw e\n    }\n  }\n}\n", "import {Slice} from \"prosemirror-model\"\n\nimport {Step, StepResult} from \"./step\"\nimport {StepMap} from \"./map\"\n\n// ::- Replace a part of the document with a slice of new content.\nexport class ReplaceStep extends Step {\n  // :: (number, number, Slice, ?bool)\n  // The given `slice` should fit the 'gap' between `from` and\n  // `to`\u2014the depths must line up, and the surrounding nodes must be\n  // able to be joined with the open sides of the slice. When\n  // `structure` is true, the step will fail if the content between\n  // from and to is not just a sequence of closing and then opening\n  // tokens (this is to guard against rebased replace steps\n  // overwriting something they weren't supposed to).\n  constructor(from, to, slice, structure) {\n    super()\n    // :: number\n    // The start position of the replaced range.\n    this.from = from\n    // :: number\n    // The end position of the replaced range.\n    this.to = to\n    // :: Slice\n    // The slice to insert.\n    this.slice = slice\n    this.structure = !!structure\n  }\n\n  apply(doc) {\n    if (this.structure && contentBetween(doc, this.from, this.to))\n      return StepResult.fail(\"Structure replace would overwrite content\")\n    return StepResult.fromReplace(doc, this.from, this.to, this.slice)\n  }\n\n  getMap() {\n    return new StepMap([this.from, this.to - this.from, this.slice.size])\n  }\n\n  invert(doc) {\n    return new ReplaceStep(this.from, this.from + this.slice.size, doc.slice(this.from, this.to))\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    if (from.deleted && to.deleted) return null\n    return new ReplaceStep(from.pos, Math.max(from.pos, to.pos), this.slice)\n  }\n\n  merge(other) {\n    if (!(other instanceof ReplaceStep) || other.structure || this.structure) return null\n\n    if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {\n      let slice = this.slice.size + other.slice.size == 0 ? Slice.empty\n          : new Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd)\n      return new ReplaceStep(this.from, this.to + (other.to - other.from), slice, this.structure)\n    } else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {\n      let slice = this.slice.size + other.slice.size == 0 ? Slice.empty\n          : new Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd)\n      return new ReplaceStep(other.from, this.to, slice, this.structure)\n    } else {\n      return null\n    }\n  }\n\n  toJSON() {\n    let json = {stepType: \"replace\", from: this.from, to: this.to}\n    if (this.slice.size) json.slice = this.slice.toJSON()\n    if (this.structure) json.structure = true\n    return json\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      throw new RangeError(\"Invalid input for ReplaceStep.fromJSON\")\n    return new ReplaceStep(json.from, json.to, Slice.fromJSON(schema, json.slice), !!json.structure)\n  }\n}\n\nStep.jsonID(\"replace\", ReplaceStep)\n\n// ::- Replace a part of the document with a slice of content, but\n// preserve a range of the replaced content by moving it into the\n// slice.\nexport class ReplaceAroundStep extends Step {\n  // :: (number, number, number, number, Slice, number, ?bool)\n  // Create a replace-around step with the given range and gap.\n  // `insert` should be the point in the slice into which the content\n  // of the gap should be moved. `structure` has the same meaning as\n  // it has in the [`ReplaceStep`](#transform.ReplaceStep) class.\n  constructor(from, to, gapFrom, gapTo, slice, insert, structure) {\n    super()\n    // :: number\n    // The start position of the replaced range.\n    this.from = from\n    // :: number\n    // The end position of the replaced range.\n    this.to = to\n    // :: number\n    // The start of preserved range.\n    this.gapFrom = gapFrom\n    // :: number\n    // The end of preserved range.\n    this.gapTo = gapTo\n    // :: Slice\n    // The slice to insert.\n    this.slice = slice\n    // :: number\n    // The position in the slice where the preserved range should be\n    // inserted.\n    this.insert = insert\n    this.structure = !!structure\n  }\n\n  apply(doc) {\n    if (this.structure && (contentBetween(doc, this.from, this.gapFrom) ||\n                           contentBetween(doc, this.gapTo, this.to)))\n      return StepResult.fail(\"Structure gap-replace would overwrite content\")\n\n    let gap = doc.slice(this.gapFrom, this.gapTo)\n    if (gap.openStart || gap.openEnd)\n      return StepResult.fail(\"Gap is not a flat range\")\n    let inserted = this.slice.insertAt(this.insert, gap.content)\n    if (!inserted) return StepResult.fail(\"Content does not fit in gap\")\n    return StepResult.fromReplace(doc, this.from, this.to, inserted)\n  }\n\n  getMap() {\n    return new StepMap([this.from, this.gapFrom - this.from, this.insert,\n                        this.gapTo, this.to - this.gapTo, this.slice.size - this.insert])\n  }\n\n  invert(doc) {\n    let gap = this.gapTo - this.gapFrom\n    return new ReplaceAroundStep(this.from, this.from + this.slice.size + gap,\n                                 this.from + this.insert, this.from + this.insert + gap,\n                                 doc.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from),\n                                 this.gapFrom - this.from, this.structure)\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    let gapFrom = mapping.map(this.gapFrom, -1), gapTo = mapping.map(this.gapTo, 1)\n    if ((from.deleted && to.deleted) || gapFrom < from.pos || gapTo > to.pos) return null\n    return new ReplaceAroundStep(from.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure)\n  }\n\n  toJSON() {\n    let json = {stepType: \"replaceAround\", from: this.from, to: this.to,\n                gapFrom: this.gapFrom, gapTo: this.gapTo, insert: this.insert}\n    if (this.slice.size) json.slice = this.slice.toJSON()\n    if (this.structure) json.structure = true\n    return json\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\" ||\n        typeof json.gapFrom != \"number\" || typeof json.gapTo != \"number\" || typeof json.insert != \"number\")\n      throw new RangeError(\"Invalid input for ReplaceAroundStep.fromJSON\")\n    return new ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo,\n                                 Slice.fromJSON(schema, json.slice), json.insert, !!json.structure)\n  }\n}\n\nStep.jsonID(\"replaceAround\", ReplaceAroundStep)\n\nfunction contentBetween(doc, from, to) {\n  let $from = doc.resolve(from), dist = to - from, depth = $from.depth\n  while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {\n    depth--\n    dist--\n  }\n  if (dist > 0) {\n    let next = $from.node(depth).maybeChild($from.indexAfter(depth))\n    while (dist > 0) {\n      if (!next || next.isLeaf) return true\n      next = next.firstChild\n      dist--\n    }\n  }\n  return false\n}\n", "import {Slice, Fragment} from \"prosemirror-model\"\n\nimport {Transform} from \"./transform\"\nimport {ReplaceStep, ReplaceAroundStep} from \"./replace_step\"\n\nfunction canCut(node, start, end) {\n  return (start == 0 || node.canReplace(start, node.childCount)) &&\n    (end == node.childCount || node.canReplace(0, end))\n}\n\n// :: (NodeRange) \u2192 ?number\n// Try to find a target depth to which the content in the given range\n// can be lifted. Will not go across\n// [isolating](#model.NodeSpec.isolating) parent nodes.\nexport function liftTarget(range) {\n  let parent = range.parent\n  let content = parent.content.cutByIndex(range.startIndex, range.endIndex)\n  for (let depth = range.depth;; --depth) {\n    let node = range.$from.node(depth)\n    let index = range.$from.index(depth), endIndex = range.$to.indexAfter(depth)\n    if (depth < range.depth && node.canReplace(index, endIndex, content))\n      return depth\n    if (depth == 0 || node.type.spec.isolating || !canCut(node, index, endIndex)) break\n  }\n}\n\n// :: (NodeRange, number) \u2192 this\n// Split the content in the given range off from its parent, if there\n// is sibling content before or after it, and move it up the tree to\n// the depth specified by `target`. You'll probably want to use\n// [`liftTarget`](#transform.liftTarget) to compute `target`, to make\n// sure the lift is valid.\nTransform.prototype.lift = function(range, target) {\n  let {$from, $to, depth} = range\n\n  let gapStart = $from.before(depth + 1), gapEnd = $to.after(depth + 1)\n  let start = gapStart, end = gapEnd\n\n  let before = Fragment.empty, openStart = 0\n  for (let d = depth, splitting = false; d > target; d--)\n    if (splitting || $from.index(d) > 0) {\n      splitting = true\n      before = Fragment.from($from.node(d).copy(before))\n      openStart++\n    } else {\n      start--\n    }\n  let after = Fragment.empty, openEnd = 0\n  for (let d = depth, splitting = false; d > target; d--)\n    if (splitting || $to.after(d + 1) < $to.end(d)) {\n      splitting = true\n      after = Fragment.from($to.node(d).copy(after))\n      openEnd++\n    } else {\n      end++\n    }\n\n  return this.step(new ReplaceAroundStep(start, end, gapStart, gapEnd,\n                                         new Slice(before.append(after), openStart, openEnd),\n                                         before.size - openStart, true))\n}\n\n// :: (NodeRange, NodeType, ?Object, ?NodeRange) \u2192 ?[{type: NodeType, attrs: ?Object}]\n// Try to find a valid way to wrap the content in the given range in a\n// node of the given type. May introduce extra nodes around and inside\n// the wrapper node, if necessary. Returns null if no valid wrapping\n// could be found. When `innerRange` is given, that range's content is\n// used as the content to fit into the wrapping, instead of the\n// content of `range`.\nexport function findWrapping(range, nodeType, attrs, innerRange = range) {\n  let around = findWrappingOutside(range, nodeType)\n  let inner = around && findWrappingInside(innerRange, nodeType)\n  if (!inner) return null\n  return around.map(withAttrs).concat({type: nodeType, attrs}).concat(inner.map(withAttrs))\n}\n\nfunction withAttrs(type) { return {type, attrs: null} }\n\nfunction findWrappingOutside(range, type) {\n  let {parent, startIndex, endIndex} = range\n  let around = parent.contentMatchAt(startIndex).findWrapping(type)\n  if (!around) return null\n  let outer = around.length ? around[0] : type\n  return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null\n}\n\nfunction findWrappingInside(range, type) {\n  let {parent, startIndex, endIndex} = range\n  let inner = parent.child(startIndex)\n  let inside = type.contentMatch.findWrapping(inner.type)\n  if (!inside) return null\n  let lastType = inside.length ? inside[inside.length - 1] : type\n  let innerMatch = lastType.contentMatch\n  for (let i = startIndex; innerMatch && i < endIndex; i++)\n    innerMatch = innerMatch.matchType(parent.child(i).type)\n  if (!innerMatch || !innerMatch.validEnd) return null\n  return inside\n}\n\n// :: (NodeRange, [{type: NodeType, attrs: ?Object}]) \u2192 this\n// Wrap the given [range](#model.NodeRange) in the given set of wrappers.\n// The wrappers are assumed to be valid in this position, and should\n// probably be computed with [`findWrapping`](#transform.findWrapping).\nTransform.prototype.wrap = function(range, wrappers) {\n  let content = Fragment.empty\n  for (let i = wrappers.length - 1; i >= 0; i--)\n    content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content))\n\n  let start = range.start, end = range.end\n  return this.step(new ReplaceAroundStep(start, end, start, end, new Slice(content, 0, 0), wrappers.length, true))\n}\n\n// :: (number, ?number, NodeType, ?Object) \u2192 this\n// Set the type of all textblocks (partly) between `from` and `to` to\n// the given node type with the given attributes.\nTransform.prototype.setBlockType = function(from, to = from, type, attrs) {\n  if (!type.isTextblock) throw new RangeError(\"Type given to setBlockType should be a textblock\")\n  let mapFrom = this.steps.length\n  this.doc.nodesBetween(from, to, (node, pos) => {\n    if (node.isTextblock && !node.hasMarkup(type, attrs) && canChangeType(this.doc, this.mapping.slice(mapFrom).map(pos), type)) {\n      // Ensure all markup that isn't allowed in the new node type is cleared\n      this.clearIncompatible(this.mapping.slice(mapFrom).map(pos, 1), type)\n      let mapping = this.mapping.slice(mapFrom)\n      let startM = mapping.map(pos, 1), endM = mapping.map(pos + node.nodeSize, 1)\n      this.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1,\n                                      new Slice(Fragment.from(type.create(attrs, null, node.marks)), 0, 0), 1, true))\n      return false\n    }\n  })\n  return this\n}\n\nfunction canChangeType(doc, pos, type) {\n  let $pos = doc.resolve(pos), index = $pos.index()\n  return $pos.parent.canReplaceWith(index, index + 1, type)\n}\n\n// :: (number, ?NodeType, ?Object, ?[Mark]) \u2192 this\n// Change the type, attributes, and/or marks of the node at `pos`.\n// When `type` isn't given, the existing node type is preserved,\nTransform.prototype.setNodeMarkup = function(pos, type, attrs, marks) {\n  let node = this.doc.nodeAt(pos)\n  if (!node) throw new RangeError(\"No node at given position\")\n  if (!type) type = node.type\n  let newNode = type.create(attrs, null, marks || node.marks)\n  if (node.isLeaf)\n    return this.replaceWith(pos, pos + node.nodeSize, newNode)\n\n  if (!type.validContent(node.content))\n    throw new RangeError(\"Invalid content for node type \" + type.name)\n\n  return this.step(new ReplaceAroundStep(pos, pos + node.nodeSize, pos + 1, pos + node.nodeSize - 1,\n                                         new Slice(Fragment.from(newNode), 0, 0), 1, true))\n}\n\n// :: (Node, number, number, ?[?{type: NodeType, attrs: ?Object}]) \u2192 bool\n// Check whether splitting at the given position is allowed.\nexport function canSplit(doc, pos, depth = 1, typesAfter) {\n  let $pos = doc.resolve(pos), base = $pos.depth - depth\n  let innerType = (typesAfter && typesAfter[typesAfter.length - 1]) || $pos.parent\n  if (base < 0 || $pos.parent.type.spec.isolating ||\n      !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) ||\n      !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount)))\n    return false\n  for (let d = $pos.depth - 1, i = depth - 2; d > base; d--, i--) {\n    let node = $pos.node(d), index = $pos.index(d)\n    if (node.type.spec.isolating) return false\n    let rest = node.content.cutByIndex(index, node.childCount)\n    let after = (typesAfter && typesAfter[i]) || node\n    if (after != node) rest = rest.replaceChild(0, after.type.create(after.attrs))\n    if (!node.canReplace(index + 1, node.childCount) || !after.type.validContent(rest))\n      return false\n  }\n  let index = $pos.indexAfter(base)\n  let baseType = typesAfter && typesAfter[0]\n  return $pos.node(base).canReplaceWith(index, index, baseType ? baseType.type : $pos.node(base + 1).type)\n}\n\n// :: (number, ?number, ?[?{type: NodeType, attrs: ?Object}]) \u2192 this\n// Split the node at the given position, and optionally, if `depth` is\n// greater than one, any number of nodes above that. By default, the\n// parts split off will inherit the node type of the original node.\n// This can be changed by passing an array of types and attributes to\n// use after the split.\nTransform.prototype.split = function(pos, depth = 1, typesAfter) {\n  let $pos = this.doc.resolve(pos), before = Fragment.empty, after = Fragment.empty\n  for (let d = $pos.depth, e = $pos.depth - depth, i = depth - 1; d > e; d--, i--) {\n    before = Fragment.from($pos.node(d).copy(before))\n    let typeAfter = typesAfter && typesAfter[i]\n    after = Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d).copy(after))\n  }\n  return this.step(new ReplaceStep(pos, pos, new Slice(before.append(after), depth, depth), true))\n}\n\n// :: (Node, number) \u2192 bool\n// Test whether the blocks before and after a given position can be\n// joined.\nexport function canJoin(doc, pos) {\n  let $pos = doc.resolve(pos), index = $pos.index()\n  return joinable($pos.nodeBefore, $pos.nodeAfter) &&\n    $pos.parent.canReplace(index, index + 1)\n}\n\nfunction joinable(a, b) {\n  return a && b && !a.isLeaf && a.canAppend(b)\n}\n\n// :: (Node, number, ?number) \u2192 ?number\n// Find an ancestor of the given position that can be joined to the\n// block before (or after if `dir` is positive). Returns the joinable\n// point, if any.\nexport function joinPoint(doc, pos, dir = -1) {\n  let $pos = doc.resolve(pos)\n  for (let d = $pos.depth;; d--) {\n    let before, after, index = $pos.index(d)\n    if (d == $pos.depth) {\n      before = $pos.nodeBefore\n      after = $pos.nodeAfter\n    } else if (dir > 0) {\n      before = $pos.node(d + 1)\n      index++\n      after = $pos.node(d).maybeChild(index)\n    } else {\n      before = $pos.node(d).maybeChild(index - 1)\n      after = $pos.node(d + 1)\n    }\n    if (before && !before.isTextblock && joinable(before, after) &&\n        $pos.node(d).canReplace(index, index + 1)) return pos\n    if (d == 0) break\n    pos = dir < 0 ? $pos.before(d) : $pos.after(d)\n  }\n}\n\n// :: (number, ?number) \u2192 this\n// Join the blocks around the given position. If depth is 2, their\n// last and first siblings are also joined, and so on.\nTransform.prototype.join = function(pos, depth = 1) {\n  let step = new ReplaceStep(pos - depth, pos + depth, Slice.empty, true)\n  return this.step(step)\n}\n\n// :: (Node, number, NodeType) \u2192 ?number\n// Try to find a point where a node of the given type can be inserted\n// near `pos`, by searching up the node hierarchy when `pos` itself\n// isn't a valid place but is at the start or end of a node. Return\n// null if no position was found.\nexport function insertPoint(doc, pos, nodeType) {\n  let $pos = doc.resolve(pos)\n  if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType)) return pos\n\n  if ($pos.parentOffset == 0)\n    for (let d = $pos.depth - 1; d >= 0; d--) {\n      let index = $pos.index(d)\n      if ($pos.node(d).canReplaceWith(index, index, nodeType)) return $pos.before(d + 1)\n      if (index > 0) return null\n    }\n  if ($pos.parentOffset == $pos.parent.content.size)\n    for (let d = $pos.depth - 1; d >= 0; d--) {\n      let index = $pos.indexAfter(d)\n      if ($pos.node(d).canReplaceWith(index, index, nodeType)) return $pos.after(d + 1)\n      if (index < $pos.node(d).childCount) return null\n    }\n}\n\n// :: (Node, number, Slice) \u2192 ?number\n// Finds a position at or around the given position where the given\n// slice can be inserted. Will look at parent nodes' nearest boundary\n// and try there, even if the original position wasn't directly at the\n// start or end of that node. Returns null when no position was found.\nexport function dropPoint(doc, pos, slice) {\n  let $pos = doc.resolve(pos)\n  if (!slice.content.size) return pos\n  let content = slice.content\n  for (let i = 0; i < slice.openStart; i++) content = content.firstChild.content\n  for (let pass = 1; pass <= (slice.openStart == 0 && slice.size ? 2 : 1); pass++) {\n    for (let d = $pos.depth; d >= 0; d--) {\n      let bias = d == $pos.depth ? 0 : $pos.pos <= ($pos.start(d + 1) + $pos.end(d + 1)) / 2 ? -1 : 1\n      let insertPos = $pos.index(d) + (bias > 0 ? 1 : 0)\n      let parent = $pos.node(d), fits = false\n      if (pass == 1) {\n        fits = parent.canReplace(insertPos, insertPos, content)\n      } else {\n        let wrapping = parent.contentMatchAt(insertPos).findWrapping(content.firstChild.type)\n        fits = wrapping && parent.canReplaceWith(insertPos, insertPos, wrapping[0])\n      }\n      if (fits)\n        return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d + 1) : $pos.after(d + 1)\n    }\n  }\n  return null\n}\n", "import {Fragment, Slice} from \"prosemirror-model\"\nimport {Step, StepResult} from \"./step\"\n\nfunction mapFragment(fragment, f, parent) {\n  let mapped = []\n  for (let i = 0; i < fragment.childCount; i++) {\n    let child = fragment.child(i)\n    if (child.content.size) child = child.copy(mapFragment(child.content, f, child))\n    if (child.isInline) child = f(child, parent, i)\n    mapped.push(child)\n  }\n  return Fragment.fromArray(mapped)\n}\n\n// ::- Add a mark to all inline content between two positions.\nexport class AddMarkStep extends Step {\n  // :: (number, number, Mark)\n  constructor(from, to, mark) {\n    super()\n    // :: number\n    // The start of the marked range.\n    this.from = from\n    // :: number\n    // The end of the marked range.\n    this.to = to\n    // :: Mark\n    // The mark to add.\n    this.mark = mark\n  }\n\n  apply(doc) {\n    let oldSlice = doc.slice(this.from, this.to), $from = doc.resolve(this.from)\n    let parent = $from.node($from.sharedDepth(this.to))\n    let slice = new Slice(mapFragment(oldSlice.content, (node, parent) => {\n      if (!node.isAtom || !parent.type.allowsMarkType(this.mark.type)) return node\n      return node.mark(this.mark.addToSet(node.marks))\n    }, parent), oldSlice.openStart, oldSlice.openEnd)\n    return StepResult.fromReplace(doc, this.from, this.to, slice)\n  }\n\n  invert() {\n    return new RemoveMarkStep(this.from, this.to, this.mark)\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    if (from.deleted && to.deleted || from.pos >= to.pos) return null\n    return new AddMarkStep(from.pos, to.pos, this.mark)\n  }\n\n  merge(other) {\n    if (other instanceof AddMarkStep &&\n        other.mark.eq(this.mark) &&\n        this.from <= other.to && this.to >= other.from)\n      return new AddMarkStep(Math.min(this.from, other.from),\n                             Math.max(this.to, other.to), this.mark)\n  }\n\n  toJSON() {\n    return {stepType: \"addMark\", mark: this.mark.toJSON(),\n            from: this.from, to: this.to}\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      throw new RangeError(\"Invalid input for AddMarkStep.fromJSON\")\n    return new AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark))\n  }\n}\n\nStep.jsonID(\"addMark\", AddMarkStep)\n\n// ::- Remove a mark from all inline content between two positions.\nexport class RemoveMarkStep extends Step {\n  // :: (number, number, Mark)\n  constructor(from, to, mark) {\n    super()\n    // :: number\n    // The start of the unmarked range.\n    this.from = from\n    // :: number\n    // The end of the unmarked range.\n    this.to = to\n    // :: Mark\n    // The mark to remove.\n    this.mark = mark\n  }\n\n  apply(doc) {\n    let oldSlice = doc.slice(this.from, this.to)\n    let slice = new Slice(mapFragment(oldSlice.content, node => {\n      return node.mark(this.mark.removeFromSet(node.marks))\n    }), oldSlice.openStart, oldSlice.openEnd)\n    return StepResult.fromReplace(doc, this.from, this.to, slice)\n  }\n\n  invert() {\n    return new AddMarkStep(this.from, this.to, this.mark)\n  }\n\n  map(mapping) {\n    let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1)\n    if (from.deleted && to.deleted || from.pos >= to.pos) return null\n    return new RemoveMarkStep(from.pos, to.pos, this.mark)\n  }\n\n  merge(other) {\n    if (other instanceof RemoveMarkStep &&\n        other.mark.eq(this.mark) &&\n        this.from <= other.to && this.to >= other.from)\n      return new RemoveMarkStep(Math.min(this.from, other.from),\n                                Math.max(this.to, other.to), this.mark)\n  }\n\n  toJSON() {\n    return {stepType: \"removeMark\", mark: this.mark.toJSON(),\n            from: this.from, to: this.to}\n  }\n\n  static fromJSON(schema, json) {\n    if (typeof json.from != \"number\" || typeof json.to != \"number\")\n      throw new RangeError(\"Invalid input for RemoveMarkStep.fromJSON\")\n    return new RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark))\n  }\n}\n\nStep.jsonID(\"removeMark\", RemoveMarkStep)\n", "import {MarkType, Slice, Fragment} from \"prosemirror-model\"\n\nimport {Transform} from \"./transform\"\nimport {AddMarkStep, RemoveMarkStep} from \"./mark_step\"\nimport {ReplaceStep} from \"./replace_step\"\n\n// :: (number, number, Mark) \u2192 this\n// Add the given mark to the inline content between `from` and `to`.\nTransform.prototype.addMark = function(from, to, mark) {\n  let removed = [], added = [], removing = null, adding = null\n  this.doc.nodesBetween(from, to, (node, pos, parent) => {\n    if (!node.isInline) return\n    let marks = node.marks\n    if (!mark.isInSet(marks) && parent.type.allowsMarkType(mark.type)) {\n      let start = Math.max(pos, from), end = Math.min(pos + node.nodeSize, to)\n      let newSet = mark.addToSet(marks)\n\n      for (let i = 0; i < marks.length; i++) {\n        if (!marks[i].isInSet(newSet)) {\n          if (removing && removing.to == start && removing.mark.eq(marks[i]))\n            removing.to = end\n          else\n            removed.push(removing = new RemoveMarkStep(start, end, marks[i]))\n        }\n      }\n\n      if (adding && adding.to == start)\n        adding.to = end\n      else\n        added.push(adding = new AddMarkStep(start, end, mark))\n    }\n  })\n\n  removed.forEach(s => this.step(s))\n  added.forEach(s => this.step(s))\n  return this\n}\n\n// :: (number, number, ?union<Mark, MarkType>) \u2192 this\n// Remove marks from inline nodes between `from` and `to`. When `mark`\n// is a single mark, remove precisely that mark. When it is a mark type,\n// remove all marks of that type. When it is null, remove all marks of\n// any type.\nTransform.prototype.removeMark = function(from, to, mark = null) {\n  let matched = [], step = 0\n  this.doc.nodesBetween(from, to, (node, pos) => {\n    if (!node.isInline) return\n    step++\n    let toRemove = null\n    if (mark instanceof MarkType) {\n      let set = node.marks, found\n      while (found = mark.isInSet(set)) {\n        ;(toRemove || (toRemove = [])).push(found)\n        set = found.removeFromSet(set)\n      }\n    } else if (mark) {\n      if (mark.isInSet(node.marks)) toRemove = [mark]\n    } else {\n      toRemove = node.marks\n    }\n    if (toRemove && toRemove.length) {\n      let end = Math.min(pos + node.nodeSize, to)\n      for (let i = 0; i < toRemove.length; i++) {\n        let style = toRemove[i], found\n        for (let j = 0; j < matched.length; j++) {\n          let m = matched[j]\n          if (m.step == step - 1 && style.eq(matched[j].style)) found = m\n        }\n        if (found) {\n          found.to = end\n          found.step = step\n        } else {\n          matched.push({style, from: Math.max(pos, from), to: end, step})\n        }\n      }\n    }\n  })\n  matched.forEach(m => this.step(new RemoveMarkStep(m.from, m.to, m.style)))\n  return this\n}\n\n// :: (number, NodeType, ?ContentMatch) \u2192 this\n// Removes all marks and nodes from the content of the node at `pos`\n// that don't match the given new parent node type. Accepts an\n// optional starting [content match](#model.ContentMatch) as third\n// argument.\nTransform.prototype.clearIncompatible = function(pos, parentType, match = parentType.contentMatch) {\n  let node = this.doc.nodeAt(pos)\n  let delSteps = [], cur = pos + 1\n  for (let i = 0; i < node.childCount; i++) {\n    let child = node.child(i), end = cur + child.nodeSize\n    let allowed = match.matchType(child.type, child.attrs)\n    if (!allowed) {\n      delSteps.push(new ReplaceStep(cur, end, Slice.empty))\n    } else {\n      match = allowed\n      for (let j = 0; j < child.marks.length; j++) if (!parentType.allowsMarkType(child.marks[j].type))\n        this.step(new RemoveMarkStep(cur, end, child.marks[j]))\n    }\n    cur = end\n  }\n  if (!match.validEnd) {\n    let fill = match.fillBefore(Fragment.empty, true)\n    this.replace(cur, cur, new Slice(fill, 0, 0))\n  }\n  for (let i = delSteps.length - 1; i >= 0; i--) this.step(delSteps[i])\n  return this\n}\n", "import {Fragment, Slice} from \"prosemirror-model\"\n\nimport {ReplaceStep, ReplaceAroundStep} from \"./replace_step\"\nimport {Transform} from \"./transform\"\nimport {insertPoint} from \"./structure\"\n\n// :: (Node, number, ?number, ?Slice) \u2192 ?Step\n// \u2018Fit\u2019 a slice into a given position in the document, producing a\n// [step](#transform.Step) that inserts it. Will return null if\n// there's no meaningful way to insert the slice here, or inserting it\n// would be a no-op (an empty slice over an empty range).\nexport function replaceStep(doc, from, to = from, slice = Slice.empty) {\n  if (from == to && !slice.size) return null\n\n  let $from = doc.resolve(from), $to = doc.resolve(to)\n  // Optimization -- avoid work if it's obvious that it's not needed.\n  if (fitsTrivially($from, $to, slice)) return new ReplaceStep(from, to, slice)\n  return new Fitter($from, $to, slice).fit()\n}\n\n// :: (number, ?number, ?Slice) \u2192 this\n// Replace the part of the document between `from` and `to` with the\n// given `slice`.\nTransform.prototype.replace = function(from, to = from, slice = Slice.empty) {\n  let step = replaceStep(this.doc, from, to, slice)\n  if (step) this.step(step)\n  return this\n}\n\n// :: (number, number, union<Fragment, Node, [Node]>) \u2192 this\n// Replace the given range with the given content, which may be a\n// fragment, node, or array of nodes.\nTransform.prototype.replaceWith = function(from, to, content) {\n  return this.replace(from, to, new Slice(Fragment.from(content), 0, 0))\n}\n\n// :: (number, number) \u2192 this\n// Delete the content between the given positions.\nTransform.prototype.delete = function(from, to) {\n  return this.replace(from, to, Slice.empty)\n}\n\n// :: (number, union<Fragment, Node, [Node]>) \u2192 this\n// Insert the given content at the given position.\nTransform.prototype.insert = function(pos, content) {\n  return this.replaceWith(pos, pos, content)\n}\n\nfunction fitsTrivially($from, $to, slice) {\n  return !slice.openStart && !slice.openEnd && $from.start() == $to.start() &&\n    $from.parent.canReplace($from.index(), $to.index(), slice.content)\n}\n\n// Algorithm for 'placing' the elements of a slice into a gap:\n//\n// We consider the content of each node that is open to the left to be\n// independently placeable. I.e. in <p(\"foo\"), p(\"bar\")>, when the\n// paragraph on the left is open, \"foo\" can be placed (somewhere on\n// the left side of the replacement gap) independently from p(\"bar\").\n//\n// This class tracks the state of the placement progress in the\n// following properties:\n//\n//  - `frontier` holds a stack of `{type, match}` objects that\n//    represent the open side of the replacement. It starts at\n//    `$from`, then moves forward as content is placed, and is finally\n//    reconciled with `$to`.\n//\n//  - `unplaced` is a slice that represents the content that hasn't\n//    been placed yet.\n//\n//  - `placed` is a fragment of placed content. Its open-start value\n//    is implicit in `$from`, and its open-end value in `frontier`.\nclass Fitter {\n  constructor($from, $to, slice) {\n    this.$to = $to\n    this.$from = $from\n    this.unplaced = slice\n\n    this.frontier = []\n    for (let i = 0; i <= $from.depth; i++) {\n      let node = $from.node(i)\n      this.frontier.push({\n        type: node.type,\n        match: node.contentMatchAt($from.indexAfter(i))\n      })\n    }\n\n    this.placed = Fragment.empty\n    for (let i = $from.depth; i > 0; i--)\n      this.placed = Fragment.from($from.node(i).copy(this.placed))\n  }\n\n  get depth() { return this.frontier.length - 1 }\n\n  fit() {\n    // As long as there's unplaced content, try to place some of it.\n    // If that fails, either increase the open score of the unplaced\n    // slice, or drop nodes from it, and then try again.\n    while (this.unplaced.size) {\n      let fit = this.findFittable()\n      if (fit) this.placeNodes(fit)\n      else this.openMore() || this.dropNode()\n    }\n    // When there's inline content directly after the frontier _and_\n    // directly after `this.$to`, we must generate a `ReplaceAround`\n    // step that pulls that content into the node after the frontier.\n    // That means the fitting must be done to the end of the textblock\n    // node after `this.$to`, not `this.$to` itself.\n    let moveInline = this.mustMoveInline(), placedSize = this.placed.size - this.depth - this.$from.depth\n    let $from = this.$from, $to = this.close(moveInline < 0 ? this.$to : $from.doc.resolve(moveInline))\n    if (!$to) return null\n\n    // If closing to `$to` succeeded, create a step\n    let content = this.placed, openStart = $from.depth, openEnd = $to.depth\n    while (openStart && openEnd && content.childCount == 1) { // Normalize by dropping open parent nodes\n      content = content.firstChild.content\n      openStart--; openEnd--\n    }\n    let slice = new Slice(content, openStart, openEnd)\n    if (moveInline > -1)\n      return new ReplaceAroundStep($from.pos, moveInline, this.$to.pos, this.$to.end(), slice, placedSize)\n    if (slice.size || $from.pos != this.$to.pos) // Don't generate no-op steps\n      return new ReplaceStep($from.pos, $to.pos, slice)\n  }\n\n  // Find a position on the start spine of `this.unplaced` that has\n  // content that can be moved somewhere on the frontier. Returns two\n  // depths, one for the slice and one for the frontier.\n  findFittable() {\n    // Only try wrapping nodes (pass 2) after finding a place without\n    // wrapping failed.\n    for (let pass = 1; pass <= 2; pass++) {\n      for (let sliceDepth = this.unplaced.openStart; sliceDepth >= 0; sliceDepth--) {\n        let fragment, parent\n        if (sliceDepth) {\n          parent = contentAt(this.unplaced.content, sliceDepth - 1).firstChild\n          fragment = parent.content\n        } else {\n          fragment = this.unplaced.content\n        }\n        let first = fragment.firstChild\n        for (let frontierDepth = this.depth; frontierDepth >= 0; frontierDepth--) {\n          let {type, match} = this.frontier[frontierDepth], wrap, inject\n          // In pass 1, if the next node matches, or there is no next\n          // node but the parents look compatible, we've found a\n          // place.\n          if (pass == 1 && (first ? match.matchType(first.type) || (inject = match.fillBefore(Fragment.from(first), false))\n                            : type.compatibleContent(parent.type)))\n            return {sliceDepth, frontierDepth, parent, inject}\n          // In pass 2, look for a set of wrapping nodes that make\n          // `first` fit here.\n          else if (pass == 2 && first && (wrap = match.findWrapping(first.type)))\n            return {sliceDepth, frontierDepth, parent, wrap}\n          // Don't continue looking further up if the parent node\n          // would fit here.\n          if (parent && match.matchType(parent.type)) break\n        }\n      }\n    }\n  }\n\n  openMore() {\n    let {content, openStart, openEnd} = this.unplaced\n    let inner = contentAt(content, openStart)\n    if (!inner.childCount || inner.firstChild.isLeaf) return false\n    this.unplaced = new Slice(content, openStart + 1,\n                              Math.max(openEnd, inner.size + openStart >= content.size - openEnd ? openStart + 1 : 0))\n    return true\n  }\n\n  dropNode() {\n    let {content, openStart, openEnd} = this.unplaced\n    let inner = contentAt(content, openStart)\n    if (inner.childCount <= 1 && openStart > 0) {\n      let openAtEnd = content.size - openStart <= openStart + inner.size\n      this.unplaced = new Slice(dropFromFragment(content, openStart - 1, 1), openStart - 1,\n                                openAtEnd ? openStart - 1 : openEnd)\n    } else {\n      this.unplaced = new Slice(dropFromFragment(content, openStart, 1), openStart, openEnd)\n    }\n  }\n\n  // : ({sliceDepth: number, frontierDepth: number, parent: ?Node, wrap: ?[NodeType], inject: ?Fragment})\n  // Move content from the unplaced slice at `sliceDepth` to the\n  // frontier node at `frontierDepth`. Close that frontier node when\n  // applicable.\n  placeNodes({sliceDepth, frontierDepth, parent, inject, wrap}) {\n    while (this.depth > frontierDepth) this.closeFrontierNode()\n    if (wrap) for (let i = 0; i < wrap.length; i++) this.openFrontierNode(wrap[i])\n\n    let slice = this.unplaced, fragment = parent ? parent.content : slice.content\n    let openStart = slice.openStart - sliceDepth\n    let taken = 0, add = []\n    let {match, type} = this.frontier[frontierDepth]\n    if (inject) {\n      for (let i = 0; i < inject.childCount; i++) add.push(inject.child(i))\n      match = match.matchFragment(inject)\n    }\n    // Computes the amount of (end) open nodes at the end of the\n    // fragment. When 0, the parent is open, but no more. When\n    // negative, nothing is open.\n    let openEndCount = (fragment.size + sliceDepth) - (slice.content.size - slice.openEnd)\n    // Scan over the fragment, fitting as many child nodes as\n    // possible.\n    while (taken < fragment.childCount) {\n      let next = fragment.child(taken), matches = match.matchType(next.type)\n      if (!matches) break\n      taken++\n      if (taken > 1 || openStart == 0 || next.content.size) { // Drop empty open nodes\n        match = matches\n        add.push(closeNodeStart(next.mark(type.allowedMarks(next.marks)), taken == 1 ? openStart : 0,\n                                taken == fragment.childCount ? openEndCount : -1))\n      }\n    }\n    let toEnd = taken == fragment.childCount\n    if (!toEnd) openEndCount = -1\n\n    this.placed = addToFragment(this.placed, frontierDepth, Fragment.from(add))\n    this.frontier[frontierDepth].match = match\n\n    // If the parent types match, and the entire node was moved, and\n    // it's not open, close this frontier node right away.\n    if (toEnd && openEndCount < 0 && parent && parent.type == this.frontier[this.depth].type && this.frontier.length > 1)\n      this.closeFrontierNode()\n\n    // Add new frontier nodes for any open nodes at the end.\n    for (let i = 0, cur = fragment; i < openEndCount; i++) {\n      let node = cur.lastChild\n      this.frontier.push({type: node.type, match: node.contentMatchAt(node.childCount)})\n      cur = node.content\n    }\n\n    // Update `this.unplaced`. Drop the entire node from which we\n    // placed it we got to its end, otherwise just drop the placed\n    // nodes.\n    this.unplaced = !toEnd ? new Slice(dropFromFragment(slice.content, sliceDepth, taken), slice.openStart, slice.openEnd)\n      : sliceDepth == 0 ? Slice.empty\n      : new Slice(dropFromFragment(slice.content, sliceDepth - 1, 1),\n                  sliceDepth - 1, openEndCount < 0 ? slice.openEnd : sliceDepth - 1)\n  }\n\n  mustMoveInline() {\n    if (!this.$to.parent.isTextblock || this.$to.end() == this.$to.pos) return -1\n    let top = this.frontier[this.depth], level\n    if (!top.type.isTextblock || !contentAfterFits(this.$to, this.$to.depth, top.type, top.match, false) ||\n        (this.$to.depth == this.depth && (level = this.findCloseLevel(this.$to)) && level.depth == this.depth)) return -1\n\n    let {depth} = this.$to, after = this.$to.after(depth)\n    while (depth > 1 && after == this.$to.end(--depth)) ++after\n    return after\n  }\n\n  findCloseLevel($to) {\n    scan: for (let i = Math.min(this.depth, $to.depth); i >= 0; i--) {\n      let {match, type} = this.frontier[i]\n      let dropInner = i < $to.depth && $to.end(i + 1) == $to.pos + ($to.depth - (i + 1))\n      let fit = contentAfterFits($to, i, type, match, dropInner)\n      if (!fit) continue\n      for (let d = i - 1; d >= 0; d--) {\n        let {match, type} = this.frontier[d]\n        let matches = contentAfterFits($to, d, type, match, true)\n        if (!matches || matches.childCount) continue scan\n      }\n      return {depth: i, fit, move: dropInner ? $to.doc.resolve($to.after(i + 1)) : $to}\n    }\n  }\n\n  close($to) {\n    let close = this.findCloseLevel($to)\n    if (!close) return null\n\n    while (this.depth > close.depth) this.closeFrontierNode()\n    if (close.fit.childCount) this.placed = addToFragment(this.placed, close.depth, close.fit)\n    $to = close.move\n    for (let d = close.depth + 1; d <= $to.depth; d++) {\n      let node = $to.node(d), add = node.type.contentMatch.fillBefore(node.content, true, $to.index(d))\n      this.openFrontierNode(node.type, node.attrs, add)\n    }\n    return $to\n  }\n\n  openFrontierNode(type, attrs, content) {\n    let top = this.frontier[this.depth]\n    top.match = top.match.matchType(type)\n    this.placed = addToFragment(this.placed, this.depth, Fragment.from(type.create(attrs, content)))\n    this.frontier.push({type, match: type.contentMatch})\n  }\n\n  closeFrontierNode() {\n    let open = this.frontier.pop()\n    let add = open.match.fillBefore(Fragment.empty, true)\n    if (add.childCount) this.placed = addToFragment(this.placed, this.frontier.length, add)\n  }\n}\n\nfunction dropFromFragment(fragment, depth, count) {\n  if (depth == 0) return fragment.cutByIndex(count)\n  return fragment.replaceChild(0, fragment.firstChild.copy(dropFromFragment(fragment.firstChild.content, depth - 1, count)))\n}\n\nfunction addToFragment(fragment, depth, content) {\n  if (depth == 0) return fragment.append(content)\n  return fragment.replaceChild(fragment.childCount - 1,\n                               fragment.lastChild.copy(addToFragment(fragment.lastChild.content, depth - 1, content)))\n}\n\nfunction contentAt(fragment, depth) {\n  for (let i = 0; i < depth; i++) fragment = fragment.firstChild.content\n  return fragment\n}\n\nfunction closeNodeStart(node, openStart, openEnd) {\n  if (openStart <= 0) return node\n  let frag = node.content\n  if (openStart > 1)\n    frag = frag.replaceChild(0, closeNodeStart(frag.firstChild, openStart - 1, frag.childCount == 1 ? openEnd - 1 : 0))\n  if (openStart > 0) {\n    frag = node.type.contentMatch.fillBefore(frag).append(frag)\n    if (openEnd <= 0) frag = frag.append(node.type.contentMatch.matchFragment(frag).fillBefore(Fragment.empty, true))\n  }\n  return node.copy(frag)\n}\n\nfunction contentAfterFits($to, depth, type, match, open) {\n  let node = $to.node(depth), index = open ? $to.indexAfter(depth) : $to.index(depth)\n  if (index == node.childCount && !type.compatibleContent(node.type)) return null\n  let fit = match.fillBefore(node.content, true, index)\n  return fit && !invalidMarks(type, node.content, index) ? fit : null\n}\n\nfunction invalidMarks(type, fragment, start) {\n  for (let i = start; i < fragment.childCount; i++)\n    if (!type.allowsMarks(fragment.child(i).marks)) return true\n  return false\n}\n\n// :: (number, number, Slice) \u2192 this\n// Replace a range of the document with a given slice, using `from`,\n// `to`, and the slice's [`openStart`](#model.Slice.openStart) property\n// as hints, rather than fixed start and end points. This method may\n// grow the replaced area or close open nodes in the slice in order to\n// get a fit that is more in line with WYSIWYG expectations, by\n// dropping fully covered parent nodes of the replaced region when\n// they are marked [non-defining](#model.NodeSpec.defining), or\n// including an open parent node from the slice that _is_ marked as\n// [defining](#model.NodeSpec.defining).\n//\n// This is the method, for example, to handle paste. The similar\n// [`replace`](#transform.Transform.replace) method is a more\n// primitive tool which will _not_ move the start and end of its given\n// range, and is useful in situations where you need more precise\n// control over what happens.\nTransform.prototype.replaceRange = function(from, to, slice) {\n  if (!slice.size) return this.deleteRange(from, to)\n\n  let $from = this.doc.resolve(from), $to = this.doc.resolve(to)\n  if (fitsTrivially($from, $to, slice))\n    return this.step(new ReplaceStep(from, to, slice))\n\n  let targetDepths = coveredDepths($from, this.doc.resolve(to))\n  // Can't replace the whole document, so remove 0 if it's present\n  if (targetDepths[targetDepths.length - 1] == 0) targetDepths.pop()\n  // Negative numbers represent not expansion over the whole node at\n  // that depth, but replacing from $from.before(-D) to $to.pos.\n  let preferredTarget = -($from.depth + 1)\n  targetDepths.unshift(preferredTarget)\n  // This loop picks a preferred target depth, if one of the covering\n  // depths is not outside of a defining node, and adds negative\n  // depths for any depth that has $from at its start and does not\n  // cross a defining node.\n  for (let d = $from.depth, pos = $from.pos - 1; d > 0; d--, pos--) {\n    let spec = $from.node(d).type.spec\n    if (spec.defining || spec.isolating) break\n    if (targetDepths.indexOf(d) > -1) preferredTarget = d\n    else if ($from.before(d) == pos) targetDepths.splice(1, 0, -d)\n  }\n  // Try to fit each possible depth of the slice into each possible\n  // target depth, starting with the preferred depths.\n  let preferredTargetIndex = targetDepths.indexOf(preferredTarget)\n\n  let leftNodes = [], preferredDepth = slice.openStart\n  for (let content = slice.content, i = 0;; i++) {\n    let node = content.firstChild\n    leftNodes.push(node)\n    if (i == slice.openStart) break\n    content = node.content\n  }\n  // Back up if the node directly above openStart, or the node above\n  // that separated only by a non-defining textblock node, is defining.\n  if (preferredDepth > 0 && leftNodes[preferredDepth - 1].type.spec.defining &&\n      $from.node(preferredTargetIndex).type != leftNodes[preferredDepth - 1].type)\n    preferredDepth -= 1\n  else if (preferredDepth >= 2 && leftNodes[preferredDepth - 1].isTextblock && leftNodes[preferredDepth - 2].type.spec.defining &&\n           $from.node(preferredTargetIndex).type != leftNodes[preferredDepth - 2].type)\n    preferredDepth -= 2\n\n  for (let j = slice.openStart; j >= 0; j--) {\n    let openDepth = (j + preferredDepth + 1) % (slice.openStart + 1)\n    let insert = leftNodes[openDepth]\n    if (!insert) continue\n    for (let i = 0; i < targetDepths.length; i++) {\n      // Loop over possible expansion levels, starting with the\n      // preferred one\n      let targetDepth = targetDepths[(i + preferredTargetIndex) % targetDepths.length], expand = true\n      if (targetDepth < 0) { expand = false; targetDepth = -targetDepth }\n      let parent = $from.node(targetDepth - 1), index = $from.index(targetDepth - 1)\n      if (parent.canReplaceWith(index, index, insert.type, insert.marks))\n        return this.replace($from.before(targetDepth), expand ? $to.after(targetDepth) : to,\n                            new Slice(closeFragment(slice.content, 0, slice.openStart, openDepth),\n                                      openDepth, slice.openEnd))\n    }\n  }\n\n  let startSteps = this.steps.length\n  for (let i = targetDepths.length - 1; i >= 0; i--) {\n    this.replace(from, to, slice)\n    if (this.steps.length > startSteps) break\n    let depth = targetDepths[i]\n    if (depth < 0) continue\n    from = $from.before(depth); to = $to.after(depth)\n  }\n  return this\n}\n\nfunction closeFragment(fragment, depth, oldOpen, newOpen, parent) {\n  if (depth < oldOpen) {\n    let first = fragment.firstChild\n    fragment = fragment.replaceChild(0, first.copy(closeFragment(first.content, depth + 1, oldOpen, newOpen, first)))\n  }\n  if (depth > newOpen) {\n    let match = parent.contentMatchAt(0)\n    let start = match.fillBefore(fragment).append(fragment)\n    fragment = start.append(match.matchFragment(start).fillBefore(Fragment.empty, true))\n  }\n  return fragment\n}\n\n// :: (number, number, Node) \u2192 this\n// Replace the given range with a node, but use `from` and `to` as\n// hints, rather than precise positions. When from and to are the same\n// and are at the start or end of a parent node in which the given\n// node doesn't fit, this method may _move_ them out towards a parent\n// that does allow the given node to be placed. When the given range\n// completely covers a parent node, this method may completely replace\n// that parent node.\nTransform.prototype.replaceRangeWith = function(from, to, node) {\n  if (!node.isInline && from == to && this.doc.resolve(from).parent.content.size) {\n    let point = insertPoint(this.doc, from, node.type)\n    if (point != null) from = to = point\n  }\n  return this.replaceRange(from, to, new Slice(Fragment.from(node), 0, 0))\n}\n\n// :: (number, number) \u2192 this\n// Delete the given range, expanding it to cover fully covered\n// parent nodes until a valid replace is found.\nTransform.prototype.deleteRange = function(from, to) {\n  let $from = this.doc.resolve(from), $to = this.doc.resolve(to)\n  let covered = coveredDepths($from, $to)\n  for (let i = 0; i < covered.length; i++) {\n    let depth = covered[i], last = i == covered.length - 1\n    if ((last && depth == 0) || $from.node(depth).type.contentMatch.validEnd)\n      return this.delete($from.start(depth), $to.end(depth))\n    if (depth > 0 && (last || $from.node(depth - 1).canReplace($from.index(depth - 1), $to.indexAfter(depth - 1))))\n      return this.delete($from.before(depth), $to.after(depth))\n  }\n  for (let d = 1; d <= $from.depth && d <= $to.depth; d++) {\n    if (from - $from.start(d) == $from.depth - d && to > $from.end(d) && $to.end(d) - to != $to.depth - d)\n      return this.delete($from.before(d), to)\n  }\n  return this.delete(from, to)\n}\n\n// : (ResolvedPos, ResolvedPos) \u2192 [number]\n// Returns an array of all depths for which $from - $to spans the\n// whole content of the nodes at that depth.\nfunction coveredDepths($from, $to) {\n  let result = [], minDepth = Math.min($from.depth, $to.depth)\n  for (let d = minDepth; d >= 0; d--) {\n    let start = $from.start(d)\n    if (start < $from.pos - ($from.depth - d) ||\n        $to.end(d) > $to.pos + ($to.depth - d) ||\n        $from.node(d).type.spec.isolating ||\n        $to.node(d).type.spec.isolating) break\n    if (start == $to.start(d) ||\n        (d == $from.depth && d == $to.depth && $from.parent.inlineContent && $to.parent.inlineContent &&\n         d && $to.start(d - 1) == start - 1))\n      result.push(d)\n  }\n  return result\n}\n", "import {Slice, Fragment} from \"prosemirror-model\"\nimport {ReplaceStep, ReplaceAroundStep} from \"prosemirror-transform\"\n\nconst classesById = Object.create(null)\n\n// ::- Superclass for editor selections. Every selection type should\n// extend this. Should not be instantiated directly.\nexport class Selection {\n  // :: (ResolvedPos, ResolvedPos, ?[SelectionRange])\n  // Initialize a selection with the head and anchor and ranges. If no\n  // ranges are given, constructs a single range across `$anchor` and\n  // `$head`.\n  constructor($anchor, $head, ranges) {\n    // :: [SelectionRange]\n    // The ranges covered by the selection.\n    this.ranges = ranges || [new SelectionRange($anchor.min($head), $anchor.max($head))]\n    // :: ResolvedPos\n    // The resolved anchor of the selection (the side that stays in\n    // place when the selection is modified).\n    this.$anchor = $anchor\n    // :: ResolvedPos\n    // The resolved head of the selection (the side that moves when\n    // the selection is modified).\n    this.$head = $head\n  }\n\n  // :: number\n  // The selection's anchor, as an unresolved position.\n  get anchor() { return this.$anchor.pos }\n\n  // :: number\n  // The selection's head.\n  get head() { return this.$head.pos }\n\n  // :: number\n  // The lower bound of the selection's main range.\n  get from() { return this.$from.pos }\n\n  // :: number\n  // The upper bound of the selection's main range.\n  get to() { return this.$to.pos }\n\n  // :: ResolvedPos\n  // The resolved lower  bound of the selection's main range.\n  get $from() {\n    return this.ranges[0].$from\n  }\n\n  // :: ResolvedPos\n  // The resolved upper bound of the selection's main range.\n  get $to() {\n    return this.ranges[0].$to\n  }\n\n  // :: bool\n  // Indicates whether the selection contains any content.\n  get empty() {\n    let ranges = this.ranges\n    for (let i = 0; i < ranges.length; i++)\n      if (ranges[i].$from.pos != ranges[i].$to.pos) return false\n    return true\n  }\n\n  // eq:: (Selection) \u2192 bool\n  // Test whether the selection is the same as another selection.\n\n  // map:: (doc: Node, mapping: Mappable) \u2192 Selection\n  // Map this selection through a [mappable](#transform.Mappable) thing. `doc`\n  // should be the new document to which we are mapping.\n\n  // :: () \u2192 Slice\n  // Get the content of this selection as a slice.\n  content() {\n    return this.$from.node(0).slice(this.from, this.to, true)\n  }\n\n  // :: (Transaction, ?Slice)\n  // Replace the selection with a slice or, if no slice is given,\n  // delete the selection. Will append to the given transaction.\n  replace(tr, content = Slice.empty) {\n    // Put the new selection at the position after the inserted\n    // content. When that ended in an inline node, search backwards,\n    // to get the position after that node. If not, search forward.\n    let lastNode = content.content.lastChild, lastParent = null\n    for (let i = 0; i < content.openEnd; i++) {\n      lastParent = lastNode\n      lastNode = lastNode.lastChild\n    }\n\n    let mapFrom = tr.steps.length, ranges = this.ranges\n    for (let i = 0; i < ranges.length; i++) {\n      let {$from, $to} = ranges[i], mapping = tr.mapping.slice(mapFrom)\n      tr.replaceRange(mapping.map($from.pos), mapping.map($to.pos), i ? Slice.empty : content)\n      if (i == 0)\n        selectionToInsertionEnd(tr, mapFrom, (lastNode ? lastNode.isInline : lastParent && lastParent.isTextblock) ? -1 : 1)\n    }\n  }\n\n  // :: (Transaction, Node)\n  // Replace the selection with the given node, appending the changes\n  // to the given transaction.\n  replaceWith(tr, node) {\n    let mapFrom = tr.steps.length, ranges = this.ranges\n    for (let i = 0; i < ranges.length; i++) {\n      let {$from, $to} = ranges[i], mapping = tr.mapping.slice(mapFrom)\n      let from = mapping.map($from.pos), to = mapping.map($to.pos)\n      if (i) {\n        tr.deleteRange(from, to)\n      } else {\n        tr.replaceRangeWith(from, to, node)\n        selectionToInsertionEnd(tr, mapFrom, node.isInline ? -1 : 1)\n      }\n    }\n  }\n\n  // toJSON:: () \u2192 Object\n  // Convert the selection to a JSON representation. When implementing\n  // this for a custom selection class, make sure to give the object a\n  // `type` property whose value matches the ID under which you\n  // [registered](#state.Selection^jsonID) your class.\n\n  // :: (ResolvedPos, number, ?bool) \u2192 ?Selection\n  // Find a valid cursor or leaf node selection starting at the given\n  // position and searching back if `dir` is negative, and forward if\n  // positive. When `textOnly` is true, only consider cursor\n  // selections. Will return null when no valid selection position is\n  // found.\n  static findFrom($pos, dir, textOnly) {\n    let inner = $pos.parent.inlineContent ? new TextSelection($pos)\n        : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, textOnly)\n    if (inner) return inner\n\n    for (let depth = $pos.depth - 1; depth >= 0; depth--) {\n      let found = dir < 0\n          ? findSelectionIn($pos.node(0), $pos.node(depth), $pos.before(depth + 1), $pos.index(depth), dir, textOnly)\n          : findSelectionIn($pos.node(0), $pos.node(depth), $pos.after(depth + 1), $pos.index(depth) + 1, dir, textOnly)\n      if (found) return found\n    }\n  }\n\n  // :: (ResolvedPos, ?number) \u2192 Selection\n  // Find a valid cursor or leaf node selection near the given\n  // position. Searches forward first by default, but if `bias` is\n  // negative, it will search backwards first.\n  static near($pos, bias = 1) {\n    return this.findFrom($pos, bias) || this.findFrom($pos, -bias) || new AllSelection($pos.node(0))\n  }\n\n  // :: (Node) \u2192 Selection\n  // Find the cursor or leaf node selection closest to the start of\n  // the given document. Will return an\n  // [`AllSelection`](#state.AllSelection) if no valid position\n  // exists.\n  static atStart(doc) {\n    return findSelectionIn(doc, doc, 0, 0, 1) || new AllSelection(doc)\n  }\n\n  // :: (Node) \u2192 Selection\n  // Find the cursor or leaf node selection closest to the end of the\n  // given document.\n  static atEnd(doc) {\n    return findSelectionIn(doc, doc, doc.content.size, doc.childCount, -1) || new AllSelection(doc)\n  }\n\n  // :: (Node, Object) \u2192 Selection\n  // Deserialize the JSON representation of a selection. Must be\n  // implemented for custom classes (as a static class method).\n  static fromJSON(doc, json) {\n    if (!json || !json.type) throw new RangeError(\"Invalid input for Selection.fromJSON\")\n    let cls = classesById[json.type]\n    if (!cls) throw new RangeError(`No selection type ${json.type} defined`)\n    return cls.fromJSON(doc, json)\n  }\n\n  // :: (string, constructor<Selection>)\n  // To be able to deserialize selections from JSON, custom selection\n  // classes must register themselves with an ID string, so that they\n  // can be disambiguated. Try to pick something that's unlikely to\n  // clash with classes from other modules.\n  static jsonID(id, selectionClass) {\n    if (id in classesById) throw new RangeError(\"Duplicate use of selection JSON ID \" + id)\n    classesById[id] = selectionClass\n    selectionClass.prototype.jsonID = id\n    return selectionClass\n  }\n\n  // :: () \u2192 SelectionBookmark\n  // Get a [bookmark](#state.SelectionBookmark) for this selection,\n  // which is a value that can be mapped without having access to a\n  // current document, and later resolved to a real selection for a\n  // given document again. (This is used mostly by the history to\n  // track and restore old selections.) The default implementation of\n  // this method just converts the selection to a text selection and\n  // returns the bookmark for that.\n  getBookmark() {\n    return TextSelection.between(this.$anchor, this.$head).getBookmark()\n  }\n}\n\n// :: bool\n// Controls whether, when a selection of this type is active in the\n// browser, the selected range should be visible to the user. Defaults\n// to `true`.\nSelection.prototype.visible = true\n\n// SelectionBookmark:: interface\n// A lightweight, document-independent representation of a selection.\n// You can define a custom bookmark type for a custom selection class\n// to make the history handle it well.\n//\n//   map:: (mapping: Mapping) \u2192 SelectionBookmark\n//   Map the bookmark through a set of changes.\n//\n//   resolve:: (doc: Node) \u2192 Selection\n//   Resolve the bookmark to a real selection again. This may need to\n//   do some error checking and may fall back to a default (usually\n//   [`TextSelection.between`](#state.TextSelection^between)) if\n//   mapping made the bookmark invalid.\n\n// ::- Represents a selected range in a document.\nexport class SelectionRange {\n  // :: (ResolvedPos, ResolvedPos)\n  constructor($from, $to) {\n    // :: ResolvedPos\n    // The lower bound of the range.\n    this.$from = $from\n    // :: ResolvedPos\n    // The upper bound of the range.\n    this.$to = $to\n  }\n}\n\n// ::- A text selection represents a classical editor selection, with\n// a head (the moving side) and anchor (immobile side), both of which\n// point into textblock nodes. It can be empty (a regular cursor\n// position).\nexport class TextSelection extends Selection {\n  // :: (ResolvedPos, ?ResolvedPos)\n  // Construct a text selection between the given points.\n  constructor($anchor, $head = $anchor) {\n    super($anchor, $head)\n  }\n\n  // :: ?ResolvedPos\n  // Returns a resolved position if this is a cursor selection (an\n  // empty text selection), and null otherwise.\n  get $cursor() { return this.$anchor.pos == this.$head.pos ? this.$head : null }\n\n  map(doc, mapping) {\n    let $head = doc.resolve(mapping.map(this.head))\n    if (!$head.parent.inlineContent) return Selection.near($head)\n    let $anchor = doc.resolve(mapping.map(this.anchor))\n    return new TextSelection($anchor.parent.inlineContent ? $anchor : $head, $head)\n  }\n\n  replace(tr, content = Slice.empty) {\n    super.replace(tr, content)\n    if (content == Slice.empty) {\n      let marks = this.$from.marksAcross(this.$to)\n      if (marks) tr.ensureMarks(marks)\n    }\n  }\n\n  eq(other) {\n    return other instanceof TextSelection && other.anchor == this.anchor && other.head == this.head\n  }\n\n  getBookmark() {\n    return new TextBookmark(this.anchor, this.head)\n  }\n\n  toJSON() {\n    return {type: \"text\", anchor: this.anchor, head: this.head}\n  }\n\n  static fromJSON(doc, json) {\n    if (typeof json.anchor != \"number\" || typeof json.head != \"number\")\n      throw new RangeError(\"Invalid input for TextSelection.fromJSON\")\n    return new TextSelection(doc.resolve(json.anchor), doc.resolve(json.head))\n  }\n\n  // :: (Node, number, ?number) \u2192 TextSelection\n  // Create a text selection from non-resolved positions.\n  static create(doc, anchor, head = anchor) {\n    let $anchor = doc.resolve(anchor)\n    return new this($anchor, head == anchor ? $anchor : doc.resolve(head))\n  }\n\n  // :: (ResolvedPos, ResolvedPos, ?number) \u2192 Selection\n  // Return a text selection that spans the given positions or, if\n  // they aren't text positions, find a text selection near them.\n  // `bias` determines whether the method searches forward (default)\n  // or backwards (negative number) first. Will fall back to calling\n  // [`Selection.near`](#state.Selection^near) when the document\n  // doesn't contain a valid text position.\n  static between($anchor, $head, bias) {\n    let dPos = $anchor.pos - $head.pos\n    if (!bias || dPos) bias = dPos >= 0 ? 1 : -1\n    if (!$head.parent.inlineContent) {\n      let found = Selection.findFrom($head, bias, true) || Selection.findFrom($head, -bias, true)\n      if (found) $head = found.$head\n      else return Selection.near($head, bias)\n    }\n    if (!$anchor.parent.inlineContent) {\n      if (dPos == 0) {\n        $anchor = $head\n      } else {\n        $anchor = (Selection.findFrom($anchor, -bias, true) || Selection.findFrom($anchor, bias, true)).$anchor\n        if (($anchor.pos < $head.pos) != (dPos < 0)) $anchor = $head\n      }\n    }\n    return new TextSelection($anchor, $head)\n  }\n}\n\nSelection.jsonID(\"text\", TextSelection)\n\nclass TextBookmark {\n  constructor(anchor, head) {\n    this.anchor = anchor\n    this.head = head\n  }\n  map(mapping) {\n    return new TextBookmark(mapping.map(this.anchor), mapping.map(this.head))\n  }\n  resolve(doc) {\n    return TextSelection.between(doc.resolve(this.anchor), doc.resolve(this.head))\n  }\n}\n\n// ::- A node selection is a selection that points at a single node.\n// All nodes marked [selectable](#model.NodeSpec.selectable) can be\n// the target of a node selection. In such a selection, `from` and\n// `to` point directly before and after the selected node, `anchor`\n// equals `from`, and `head` equals `to`..\nexport class NodeSelection extends Selection {\n  // :: (ResolvedPos)\n  // Create a node selection. Does not verify the validity of its\n  // argument.\n  constructor($pos) {\n    let node = $pos.nodeAfter\n    let $end = $pos.node(0).resolve($pos.pos + node.nodeSize)\n    super($pos, $end)\n    // :: Node The selected node.\n    this.node = node\n  }\n\n  map(doc, mapping) {\n    let {deleted, pos} = mapping.mapResult(this.anchor)\n    let $pos = doc.resolve(pos)\n    if (deleted) return Selection.near($pos)\n    return new NodeSelection($pos)\n  }\n\n  content() {\n    return new Slice(Fragment.from(this.node), 0, 0)\n  }\n\n  eq(other) {\n    return other instanceof NodeSelection && other.anchor == this.anchor\n  }\n\n  toJSON() {\n    return {type: \"node\", anchor: this.anchor}\n  }\n\n  getBookmark() { return new NodeBookmark(this.anchor) }\n\n  static fromJSON(doc, json) {\n    if (typeof json.anchor != \"number\")\n      throw new RangeError(\"Invalid input for NodeSelection.fromJSON\")\n    return new NodeSelection(doc.resolve(json.anchor))\n  }\n\n  // :: (Node, number) \u2192 NodeSelection\n  // Create a node selection from non-resolved positions.\n  static create(doc, from) {\n    return new this(doc.resolve(from))\n  }\n\n  // :: (Node) \u2192 bool\n  // Determines whether the given node may be selected as a node\n  // selection.\n  static isSelectable(node) {\n    return !node.isText && node.type.spec.selectable !== false\n  }\n}\n\nNodeSelection.prototype.visible = false\n\nSelection.jsonID(\"node\", NodeSelection)\n\nclass NodeBookmark {\n  constructor(anchor) {\n    this.anchor = anchor\n  }\n  map(mapping) {\n    let {deleted, pos} = mapping.mapResult(this.anchor)\n    return deleted ? new TextBookmark(pos, pos) : new NodeBookmark(pos)\n  }\n  resolve(doc) {\n    let $pos = doc.resolve(this.anchor), node = $pos.nodeAfter\n    if (node && NodeSelection.isSelectable(node)) return new NodeSelection($pos)\n    return Selection.near($pos)\n  }\n}\n\n// ::- A selection type that represents selecting the whole document\n// (which can not necessarily be expressed with a text selection, when\n// there are for example leaf block nodes at the start or end of the\n// document).\nexport class AllSelection extends Selection {\n  // :: (Node)\n  // Create an all-selection over the given document.\n  constructor(doc) {\n    super(doc.resolve(0), doc.resolve(doc.content.size))\n  }\n\n  replace(tr, content = Slice.empty) {\n    if (content == Slice.empty) {\n      tr.delete(0, tr.doc.content.size)\n      let sel = Selection.atStart(tr.doc)\n      if (!sel.eq(tr.selection)) tr.setSelection(sel)\n    } else {\n      super.replace(tr, content)\n    }\n  }\n\n  toJSON() { return {type: \"all\"} }\n\n  static fromJSON(doc) { return new AllSelection(doc) }\n\n  map(doc) { return new AllSelection(doc) }\n\n  eq(other) { return other instanceof AllSelection }\n\n  getBookmark() { return AllBookmark }\n}\n\nSelection.jsonID(\"all\", AllSelection)\n\nconst AllBookmark = {\n  map() { return this },\n  resolve(doc) { return new AllSelection(doc) }\n}\n\n// FIXME we'll need some awareness of text direction when scanning for selections\n\n// Try to find a selection inside the given node. `pos` points at the\n// position where the search starts. When `text` is true, only return\n// text selections.\nfunction findSelectionIn(doc, node, pos, index, dir, text) {\n  if (node.inlineContent) return TextSelection.create(doc, pos)\n  for (let i = index - (dir > 0 ? 0 : 1); dir > 0 ? i < node.childCount : i >= 0; i += dir) {\n    let child = node.child(i)\n    if (!child.isAtom) {\n      let inner = findSelectionIn(doc, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text)\n      if (inner) return inner\n    } else if (!text && NodeSelection.isSelectable(child)) {\n      return NodeSelection.create(doc, pos - (dir < 0 ? child.nodeSize : 0))\n    }\n    pos += child.nodeSize * dir\n  }\n}\n\nfunction selectionToInsertionEnd(tr, startLen, bias) {\n  let last = tr.steps.length - 1\n  if (last < startLen) return\n  let step = tr.steps[last]\n  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) return\n  let map = tr.mapping.maps[last], end\n  map.forEach((_from, _to, _newFrom, newTo) => { if (end == null) end = newTo })\n  tr.setSelection(Selection.near(tr.doc.resolve(end), bias))\n}\n", "import {Transform} from \"prosemirror-transform\"\nimport {Mark} from \"prosemirror-model\"\nimport {Selection} from \"./selection\"\n\nconst UPDATED_SEL = 1, UPDATED_MARKS = 2, UPDATED_SCROLL = 4\n\n// ::- An editor state transaction, which can be applied to a state to\n// create an updated state. Use\n// [`EditorState.tr`](#state.EditorState.tr) to create an instance.\n//\n// Transactions track changes to the document (they are a subclass of\n// [`Transform`](#transform.Transform)), but also other state changes,\n// like selection updates and adjustments of the set of [stored\n// marks](#state.EditorState.storedMarks). In addition, you can store\n// metadata properties in a transaction, which are extra pieces of\n// information that client code or plugins can use to describe what a\n// transacion represents, so that they can update their [own\n// state](#state.StateField) accordingly.\n//\n// The [editor view](#view.EditorView) uses a few metadata properties:\n// it will attach a property `\"pointer\"` with the value `true` to\n// selection transactions directly caused by mouse or touch input, and\n// a `\"uiEvent\"` property of that may be `\"paste\"`, `\"cut\"`, or `\"drop\"`.\nexport class Transaction extends Transform {\n  constructor(state) {\n    super(state.doc)\n    // :: number\n    // The timestamp associated with this transaction, in the same\n    // format as `Date.now()`.\n    this.time = Date.now()\n    this.curSelection = state.selection\n    // The step count for which the current selection is valid.\n    this.curSelectionFor = 0\n    // :: ?[Mark]\n    // The stored marks set by this transaction, if any.\n    this.storedMarks = state.storedMarks\n    // Bitfield to track which aspects of the state were updated by\n    // this transaction.\n    this.updated = 0\n    // Object used to store metadata properties for the transaction.\n    this.meta = Object.create(null)\n  }\n\n  // :: Selection\n  // The transaction's current selection. This defaults to the editor\n  // selection [mapped](#state.Selection.map) through the steps in the\n  // transaction, but can be overwritten with\n  // [`setSelection`](#state.Transaction.setSelection).\n  get selection() {\n    if (this.curSelectionFor < this.steps.length) {\n      this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor))\n      this.curSelectionFor = this.steps.length\n    }\n    return this.curSelection\n  }\n\n  // :: (Selection) \u2192 Transaction\n  // Update the transaction's current selection. Will determine the\n  // selection that the editor gets when the transaction is applied.\n  setSelection(selection) {\n    if (selection.$from.doc != this.doc)\n      throw new RangeError(\"Selection passed to setSelection must point at the current document\")\n    this.curSelection = selection\n    this.curSelectionFor = this.steps.length\n    this.updated = (this.updated | UPDATED_SEL) & ~UPDATED_MARKS\n    this.storedMarks = null\n    return this\n  }\n\n  // :: bool\n  // Whether the selection was explicitly updated by this transaction.\n  get selectionSet() {\n    return (this.updated & UPDATED_SEL) > 0\n  }\n\n  // :: (?[Mark]) \u2192 Transaction\n  // Set the current stored marks.\n  setStoredMarks(marks) {\n    this.storedMarks = marks\n    this.updated |= UPDATED_MARKS\n    return this\n  }\n\n  // :: ([Mark]) \u2192 Transaction\n  // Make sure the current stored marks or, if that is null, the marks\n  // at the selection, match the given set of marks. Does nothing if\n  // this is already the case.\n  ensureMarks(marks) {\n    if (!Mark.sameSet(this.storedMarks || this.selection.$from.marks(), marks))\n      this.setStoredMarks(marks)\n    return this\n  }\n\n  // :: (Mark) \u2192 Transaction\n  // Add a mark to the set of stored marks.\n  addStoredMark(mark) {\n    return this.ensureMarks(mark.addToSet(this.storedMarks || this.selection.$head.marks()))\n  }\n\n  // :: (union<Mark, MarkType>) \u2192 Transaction\n  // Remove a mark or mark type from the set of stored marks.\n  removeStoredMark(mark) {\n    return this.ensureMarks(mark.removeFromSet(this.storedMarks || this.selection.$head.marks()))\n  }\n\n  // :: bool\n  // Whether the stored marks were explicitly set for this transaction.\n  get storedMarksSet() {\n    return (this.updated & UPDATED_MARKS) > 0\n  }\n\n  addStep(step, doc) {\n    super.addStep(step, doc)\n    this.updated = this.updated & ~UPDATED_MARKS\n    this.storedMarks = null\n  }\n\n  // :: (number) \u2192 Transaction\n  // Update the timestamp for the transaction.\n  setTime(time) {\n    this.time = time\n    return this\n  }\n\n  // :: (Slice) \u2192 Transaction\n  // Replace the current selection with the given slice.\n  replaceSelection(slice) {\n    this.selection.replace(this, slice)\n    return this\n  }\n\n  // :: (Node, ?bool) \u2192 Transaction\n  // Replace the selection with the given node. When `inheritMarks` is\n  // true and the content is inline, it inherits the marks from the\n  // place where it is inserted.\n  replaceSelectionWith(node, inheritMarks) {\n    let selection = this.selection\n    if (inheritMarks !== false)\n      node = node.mark(this.storedMarks || (selection.empty ? selection.$from.marks() : (selection.$from.marksAcross(selection.$to) || Mark.none)))\n    selection.replaceWith(this, node)\n    return this\n  }\n\n  // :: () \u2192 Transaction\n  // Delete the selection.\n  deleteSelection() {\n    this.selection.replace(this)\n    return this\n  }\n\n  // :: (string, from: ?number, to: ?number) \u2192 Transaction\n  // Replace the given range, or the selection if no range is given,\n  // with a text node containing the given string.\n  insertText(text, from, to = from) {\n    let schema = this.doc.type.schema\n    if (from == null) {\n      if (!text) return this.deleteSelection()\n      return this.replaceSelectionWith(schema.text(text), true)\n    } else {\n      if (!text) return this.deleteRange(from, to)\n      let marks = this.storedMarks\n      if (!marks) {\n        let $from = this.doc.resolve(from)\n        marks = to == from ? $from.marks() : $from.marksAcross(this.doc.resolve(to))\n      }\n      this.replaceRangeWith(from, to, schema.text(text, marks))\n      if (!this.selection.empty) this.setSelection(Selection.near(this.selection.$to))\n      return this\n    }\n  }\n\n  // :: (union<string, Plugin, PluginKey>, any) \u2192 Transaction\n  // Store a metadata property in this transaction, keyed either by\n  // name or by plugin.\n  setMeta(key, value) {\n    this.meta[typeof key == \"string\" ? key : key.key] = value\n    return this\n  }\n\n  // :: (union<string, Plugin, PluginKey>) \u2192 any\n  // Retrieve a metadata property for a given name or plugin.\n  getMeta(key) {\n    return this.meta[typeof key == \"string\" ? key : key.key]\n  }\n\n  // :: bool\n  // Returns true if this transaction doesn't contain any metadata,\n  // and can thus safely be extended.\n  get isGeneric() {\n    for (let _ in this.meta) return false\n    return true\n  }\n\n  // :: () \u2192 Transaction\n  // Indicate that the editor should scroll the selection into view\n  // when updated to the state produced by this transaction.\n  scrollIntoView() {\n    this.updated |= UPDATED_SCROLL\n    return this\n  }\n\n  get scrolledIntoView() {\n    return (this.updated & UPDATED_SCROLL) > 0\n  }\n}\n", "import {Node} from \"prosemirror-model\"\n\nimport {Selection} from \"./selection\"\nimport {Transaction} from \"./transaction\"\n\nfunction bind(f, self) {\n  return !self || !f ? f : f.bind(self)\n}\n\nclass FieldDesc {\n  constructor(name, desc, self) {\n    this.name = name\n    this.init = bind(desc.init, self)\n    this.apply = bind(desc.apply, self)\n  }\n}\n\nconst baseFields = [\n  new FieldDesc(\"doc\", {\n    init(config) { return config.doc || config.schema.topNodeType.createAndFill() },\n    apply(tr) { return tr.doc }\n  }),\n\n  new FieldDesc(\"selection\", {\n    init(config, instance) { return config.selection || Selection.atStart(instance.doc) },\n    apply(tr) { return tr.selection }\n  }),\n\n  new FieldDesc(\"storedMarks\", {\n    init(config) { return config.storedMarks || null },\n    apply(tr, _marks, _old, state) { return state.selection.$cursor ? tr.storedMarks : null }\n  }),\n\n  new FieldDesc(\"scrollToSelection\", {\n    init() { return 0 },\n    apply(tr, prev) { return tr.scrolledIntoView ? prev + 1 : prev }\n  })\n]\n\n// Object wrapping the part of a state object that stays the same\n// across transactions. Stored in the state's `config` property.\nclass Configuration {\n  constructor(schema, plugins) {\n    this.schema = schema\n    this.fields = baseFields.concat()\n    this.plugins = []\n    this.pluginsByKey = Object.create(null)\n    if (plugins) plugins.forEach(plugin => {\n      if (this.pluginsByKey[plugin.key])\n        throw new RangeError(\"Adding different instances of a keyed plugin (\" + plugin.key + \")\")\n      this.plugins.push(plugin)\n      this.pluginsByKey[plugin.key] = plugin\n      if (plugin.spec.state)\n        this.fields.push(new FieldDesc(plugin.key, plugin.spec.state, plugin))\n    })\n  }\n}\n\n// ::- The state of a ProseMirror editor is represented by an object\n// of this type. A state is a persistent data structure\u2014it isn't\n// updated, but rather a new state value is computed from an old one\n// using the [`apply`](#state.EditorState.apply) method.\n//\n// A state holds a number of built-in fields, and plugins can\n// [define](#state.PluginSpec.state) additional fields.\nexport class EditorState {\n  constructor(config) {\n    this.config = config\n  }\n\n  // doc:: Node\n  // The current document.\n\n  // selection:: Selection\n  // The selection.\n\n  // storedMarks:: ?[Mark]\n  // A set of marks to apply to the next input. Will be null when\n  // no explicit marks have been set.\n\n  // :: Schema\n  // The schema of the state's document.\n  get schema() {\n    return this.config.schema\n  }\n\n  // :: [Plugin]\n  // The plugins that are active in this state.\n  get plugins() {\n    return this.config.plugins\n  }\n\n  // :: (Transaction) \u2192 EditorState\n  // Apply the given transaction to produce a new state.\n  apply(tr) {\n    return this.applyTransaction(tr).state\n  }\n\n  // : (Transaction) \u2192 bool\n  filterTransaction(tr, ignore = -1) {\n    for (let i = 0; i < this.config.plugins.length; i++) if (i != ignore) {\n      let plugin = this.config.plugins[i]\n      if (plugin.spec.filterTransaction && !plugin.spec.filterTransaction.call(plugin, tr, this))\n        return false\n    }\n    return true\n  }\n\n  // :: (Transaction) \u2192 {state: EditorState, transactions: [Transaction]}\n  // Verbose variant of [`apply`](#state.EditorState.apply) that\n  // returns the precise transactions that were applied (which might\n  // be influenced by the [transaction\n  // hooks](#state.PluginSpec.filterTransaction) of\n  // plugins) along with the new state.\n  applyTransaction(rootTr) {\n    if (!this.filterTransaction(rootTr)) return {state: this, transactions: []}\n\n    let trs = [rootTr], newState = this.applyInner(rootTr), seen = null\n    // This loop repeatedly gives plugins a chance to respond to\n    // transactions as new transactions are added, making sure to only\n    // pass the transactions the plugin did not see before.\n    outer: for (;;) {\n      let haveNew = false\n      for (let i = 0; i < this.config.plugins.length; i++) {\n        let plugin = this.config.plugins[i]\n        if (plugin.spec.appendTransaction) {\n          let n = seen ? seen[i].n : 0, oldState = seen ? seen[i].state : this\n          let tr = n < trs.length &&\n              plugin.spec.appendTransaction.call(plugin, n ? trs.slice(n) : trs, oldState, newState)\n          if (tr && newState.filterTransaction(tr, i)) {\n            tr.setMeta(\"appendedTransaction\", rootTr)\n            if (!seen) {\n              seen = []\n              for (let j = 0; j < this.config.plugins.length; j++)\n                seen.push(j < i ? {state: newState, n: trs.length} : {state: this, n: 0})\n            }\n            trs.push(tr)\n            newState = newState.applyInner(tr)\n            haveNew = true\n          }\n          if (seen) seen[i] = {state: newState, n: trs.length}\n        }\n      }\n      if (!haveNew) return {state: newState, transactions: trs}\n    }\n  }\n\n  // : (Transaction) \u2192 EditorState\n  applyInner(tr) {\n    if (!tr.before.eq(this.doc)) throw new RangeError(\"Applying a mismatched transaction\")\n    let newInstance = new EditorState(this.config), fields = this.config.fields\n    for (let i = 0; i < fields.length; i++) {\n      let field = fields[i]\n      newInstance[field.name] = field.apply(tr, this[field.name], this, newInstance)\n    }\n    for (let i = 0; i < applyListeners.length; i++) applyListeners[i](this, tr, newInstance)\n    return newInstance\n  }\n\n  // :: Transaction\n  // Start a [transaction](#state.Transaction) from this state.\n  get tr() { return new Transaction(this) }\n\n  // :: (Object) \u2192 EditorState\n  // Create a new state.\n  //\n  //   config::- Configuration options. Must contain `schema` or `doc` (or both).\n  //\n  //      schema:: ?Schema\n  //      The schema to use (only relevant if no `doc` is specified).\n  //\n  //      doc:: ?Node\n  //      The starting document.\n  //\n  //      selection:: ?Selection\n  //      A valid selection in the document.\n  //\n  //      storedMarks:: ?[Mark]\n  //      The initial set of [stored marks](#state.EditorState.storedMarks).\n  //\n  //      plugins:: ?[Plugin]\n  //      The plugins that should be active in this state.\n  static create(config) {\n    let $config = new Configuration(config.doc ? config.doc.type.schema : config.schema, config.plugins)\n    let instance = new EditorState($config)\n    for (let i = 0; i < $config.fields.length; i++)\n      instance[$config.fields[i].name] = $config.fields[i].init(config, instance)\n    return instance\n  }\n\n  // :: (Object) \u2192 EditorState\n  // Create a new state based on this one, but with an adjusted set of\n  // active plugins. State fields that exist in both sets of plugins\n  // are kept unchanged. Those that no longer exist are dropped, and\n  // those that are new are initialized using their\n  // [`init`](#state.StateField.init) method, passing in the new\n  // configuration object..\n  //\n  //   config::- configuration options\n  //\n  //     plugins:: [Plugin]\n  //     New set of active plugins.\n  reconfigure(config) {\n    let $config = new Configuration(this.schema, config.plugins)\n    let fields = $config.fields, instance = new EditorState($config)\n    for (let i = 0; i < fields.length; i++) {\n      let name = fields[i].name\n      instance[name] = this.hasOwnProperty(name) ? this[name] : fields[i].init(config, instance)\n    }\n    return instance\n  }\n\n  // :: (?union<Object<Plugin>, string, number>) \u2192 Object\n  // Serialize this state to JSON. If you want to serialize the state\n  // of plugins, pass an object mapping property names to use in the\n  // resulting JSON object to plugin objects. The argument may also be\n  // a string or number, in which case it is ignored, to support the\n  // way `JSON.stringify` calls `toString` methods.\n  toJSON(pluginFields) {\n    let result = {doc: this.doc.toJSON(), selection: this.selection.toJSON()}\n    if (this.storedMarks) result.storedMarks = this.storedMarks.map(m => m.toJSON())\n    if (pluginFields && typeof pluginFields == 'object') for (let prop in pluginFields) {\n      if (prop == \"doc\" || prop == \"selection\")\n        throw new RangeError(\"The JSON fields `doc` and `selection` are reserved\")\n      let plugin = pluginFields[prop], state = plugin.spec.state\n      if (state && state.toJSON) result[prop] = state.toJSON.call(plugin, this[plugin.key])\n    }\n    return result\n  }\n\n  // :: (Object, Object, ?Object<Plugin>) \u2192 EditorState\n  // Deserialize a JSON representation of a state. `config` should\n  // have at least a `schema` field, and should contain array of\n  // plugins to initialize the state with. `pluginFields` can be used\n  // to deserialize the state of plugins, by associating plugin\n  // instances with the property names they use in the JSON object.\n  //\n  //   config::- configuration options\n  //\n  //     schema:: Schema\n  //     The schema to use.\n  //\n  //     plugins:: ?[Plugin]\n  //     The set of active plugins.\n  static fromJSON(config, json, pluginFields) {\n    if (!json) throw new RangeError(\"Invalid input for EditorState.fromJSON\")\n    if (!config.schema) throw new RangeError(\"Required config field 'schema' missing\")\n    let $config = new Configuration(config.schema, config.plugins)\n    let instance = new EditorState($config)\n    $config.fields.forEach(field => {\n      if (field.name == \"doc\") {\n        instance.doc = Node.fromJSON(config.schema, json.doc)\n      } else if (field.name == \"selection\") {\n        instance.selection = Selection.fromJSON(instance.doc, json.selection)\n      } else if (field.name == \"storedMarks\") {\n        if (json.storedMarks) instance.storedMarks = json.storedMarks.map(config.schema.markFromJSON)\n      } else {\n        if (pluginFields) for (let prop in pluginFields) {\n          let plugin = pluginFields[prop], state = plugin.spec.state\n          if (plugin.key == field.name && state && state.fromJSON &&\n              Object.prototype.hasOwnProperty.call(json, prop)) {\n            // This field belongs to a plugin mapped to a JSON field, read it from there.\n            instance[field.name] = state.fromJSON.call(plugin, config, json[prop], instance)\n            return\n          }\n        }\n        instance[field.name] = field.init(config, instance)\n      }\n    })\n    return instance\n  }\n\n  // Kludge to allow the view to track mappings between different\n  // instances of a state.\n  //\n  // FIXME this is no longer needed as of prosemirror-view 1.9.0,\n  // though due to backwards-compat we should probably keep it around\n  // for a while (if only as a no-op)\n  static addApplyListener(f) {\n    applyListeners.push(f)\n  }\n  static removeApplyListener(f) {\n    let found = applyListeners.indexOf(f)\n    if (found > -1) applyListeners.splice(found, 1)\n  }\n}\n\nconst applyListeners = []\n", "// PluginSpec:: interface\n//\n// This is the type passed to the [`Plugin`](#state.Plugin)\n// constructor. It provides a definition for a plugin.\n//\n//   props:: ?EditorProps\n//   The [view props](#view.EditorProps) added by this plugin. Props\n//   that are functions will be bound to have the plugin instance as\n//   their `this` binding.\n//\n//   state:: ?StateField<any>\n//   Allows a plugin to define a [state field](#state.StateField), an\n//   extra slot in the state object in which it can keep its own data.\n//\n//   key:: ?PluginKey\n//   Can be used to make this a keyed plugin. You can have only one\n//   plugin with a given key in a given state, but it is possible to\n//   access the plugin's configuration and state through the key,\n//   without having access to the plugin instance object.\n//\n//   view:: ?(EditorView) \u2192 Object\n//   When the plugin needs to interact with the editor view, or\n//   set something up in the DOM, use this field. The function\n//   will be called when the plugin's state is associated with an\n//   editor view.\n//\n//     return::-\n//     Should return an object with the following optional\n//     properties:\n//\n//       update:: ?(view: EditorView, prevState: EditorState)\n//       Called whenever the view's state is updated.\n//\n//       destroy:: ?()\n//       Called when the view is destroyed or receives a state\n//       with different plugins.\n//\n//   filterTransaction:: ?(Transaction, EditorState) \u2192 bool\n//   When present, this will be called before a transaction is\n//   applied by the state, allowing the plugin to cancel it (by\n//   returning false).\n//\n//   appendTransaction:: ?(transactions: [Transaction], oldState: EditorState, newState: EditorState) \u2192 ?Transaction\n//   Allows the plugin to append another transaction to be applied\n//   after the given array of transactions. When another plugin\n//   appends a transaction after this was called, it is called again\n//   with the new state and new transactions\u2014but only the new\n//   transactions, i.e. it won't be passed transactions that it\n//   already saw.\n\nfunction bindProps(obj, self, target) {\n  for (let prop in obj) {\n    let val = obj[prop]\n    if (val instanceof Function) val = val.bind(self)\n    else if (prop == \"handleDOMEvents\") val = bindProps(val, self, {})\n    target[prop] = val\n  }\n  return target\n}\n\n// ::- Plugins bundle functionality that can be added to an editor.\n// They are part of the [editor state](#state.EditorState) and\n// may influence that state and the view that contains it.\nexport class Plugin {\n  // :: (PluginSpec)\n  // Create a plugin.\n  constructor(spec) {\n    // :: EditorProps\n    // The [props](#view.EditorProps) exported by this plugin.\n    this.props = {}\n    if (spec.props) bindProps(spec.props, this, this.props)\n    // :: Object\n    // The plugin's [spec object](#state.PluginSpec).\n    this.spec = spec\n    this.key = spec.key ? spec.key.key : createKey(\"plugin\")\n  }\n\n  // :: (EditorState) \u2192 any\n  // Extract the plugin's state field from an editor state.\n  getState(state) { return state[this.key] }\n}\n\n// StateField:: interface<T>\n// A plugin spec may provide a state field (under its\n// [`state`](#state.PluginSpec.state) property) of this type, which\n// describes the state it wants to keep. Functions provided here are\n// always called with the plugin instance as their `this` binding.\n//\n//   init:: (config: Object, instance: EditorState) \u2192 T\n//   Initialize the value of the field. `config` will be the object\n//   passed to [`EditorState.create`](#state.EditorState^create). Note\n//   that `instance` is a half-initialized state instance, and will\n//   not have values for plugin fields initialized after this one.\n//\n//   apply:: (tr: Transaction, value: T, oldState: EditorState, newState: EditorState) \u2192 T\n//   Apply the given transaction to this state field, producing a new\n//   field value. Note that the `newState` argument is again a partially\n//   constructed state does not yet contain the state from plugins\n//   coming after this one.\n//\n//   toJSON:: ?(value: T) \u2192 *\n//   Convert this field to JSON. Optional, can be left off to disable\n//   JSON serialization for the field.\n//\n//   fromJSON:: ?(config: Object, value: *, state: EditorState) \u2192 T\n//   Deserialize the JSON representation of this field. Note that the\n//   `state` argument is again a half-initialized state.\n\nconst keys = Object.create(null)\n\nfunction createKey(name) {\n  if (name in keys) return name + \"$\" + ++keys[name]\n  keys[name] = 0\n  return name + \"$\"\n}\n\n// ::- A key is used to [tag](#state.PluginSpec.key)\n// plugins in a way that makes it possible to find them, given an\n// editor state. Assigning a key does mean only one plugin of that\n// type can be active in a state.\nexport class PluginKey {\n  // :: (?string)\n  // Create a plugin key.\n  constructor(name = \"key\") { this.key = createKey(name) }\n\n  // :: (EditorState) \u2192 ?Plugin\n  // Get the active plugin with this key, if any, from an editor\n  // state.\n  get(state) { return state.config.pluginsByKey[this.key] }\n\n  // :: (EditorState) \u2192 ?any\n  // Get the plugin's state from an editor state.\n  getState(state) { return state[this.key] }\n}\n", "const result = {}\nexport default result\n\nif (typeof navigator != \"undefined\" && typeof document != \"undefined\") {\n  const ie_edge = /Edge\\/(\\d+)/.exec(navigator.userAgent)\n  const ie_upto10 = /MSIE \\d/.test(navigator.userAgent)\n  const ie_11up = /Trident\\/(?:[7-9]|\\d{2,})\\..*rv:(\\d+)/.exec(navigator.userAgent)\n\n  let ie = result.ie = !!(ie_upto10 || ie_11up || ie_edge)\n  result.ie_version = ie_upto10 ? document.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : null\n  result.gecko = !ie && /gecko\\/(\\d+)/i.test(navigator.userAgent)\n  result.gecko_version = result.gecko && +(/Firefox\\/(\\d+)/.exec(navigator.userAgent) || [0, 0])[1]\n  let chrome = !ie && /Chrome\\/(\\d+)/.exec(navigator.userAgent)\n  result.chrome = !!chrome\n  result.chrome_version = chrome && +chrome[1]\n  // Is true for both iOS and iPadOS for convenience\n  result.safari = !ie && /Apple Computer/.test(navigator.vendor)\n  result.ios = result.safari && (/Mobile\\/\\w+/.test(navigator.userAgent) || navigator.maxTouchPoints > 2)\n  result.mac = result.ios || /Mac/.test(navigator.platform)\n  result.android = /Android \\d/.test(navigator.userAgent)\n  result.webkit = \"webkitFontSmoothing\" in document.documentElement.style\n  result.webkit_version = result.webkit && +(/\\bAppleWebKit\\/(\\d+)/.exec(navigator.userAgent) || [0, 0])[1]\n}\n", "import browser from \"./browser\"\n\nexport const domIndex = function(node) {\n  for (var index = 0;; index++) {\n    node = node.previousSibling\n    if (!node) return index\n  }\n}\n\nexport const parentNode = function(node) {\n  let parent = node.assignedSlot || node.parentNode\n  return parent && parent.nodeType == 11 ? parent.host : parent\n}\n\nlet reusedRange = null\n\n// Note that this will always return the same range, because DOM range\n// objects are every expensive, and keep slowing down subsequent DOM\n// updates, for some reason.\nexport const textRange = function(node, from, to) {\n  let range = reusedRange || (reusedRange = document.createRange())\n  range.setEnd(node, to == null ? node.nodeValue.length : to)\n  range.setStart(node, from || 0)\n  return range\n}\n\n// Scans forward and backward through DOM positions equivalent to the\n// given one to see if the two are in the same place (i.e. after a\n// text node vs at the end of that text node)\nexport const isEquivalentPosition = function(node, off, targetNode, targetOff) {\n  return targetNode && (scanFor(node, off, targetNode, targetOff, -1) ||\n                        scanFor(node, off, targetNode, targetOff, 1))\n}\n\nconst atomElements = /^(img|br|input|textarea|hr)$/i\n\nfunction scanFor(node, off, targetNode, targetOff, dir) {\n  for (;;) {\n    if (node == targetNode && off == targetOff) return true\n    if (off == (dir < 0 ? 0 : nodeSize(node))) {\n      let parent = node.parentNode\n      if (parent.nodeType != 1 || hasBlockDesc(node) || atomElements.test(node.nodeName) || node.contentEditable == \"false\")\n        return false\n      off = domIndex(node) + (dir < 0 ? 0 : 1)\n      node = parent\n    } else if (node.nodeType == 1) {\n      node = node.childNodes[off + (dir < 0 ? -1 : 0)]\n      if (node.contentEditable == \"false\") return false\n      off = dir < 0 ? nodeSize(node) : 0\n    } else {\n      return false\n    }\n  }\n}\n\nexport function nodeSize(node) {\n  return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length\n}\n\nexport function isOnEdge(node, offset, parent) {\n  for (let atStart = offset == 0, atEnd = offset == nodeSize(node); atStart || atEnd;) {\n    if (node == parent) return true\n    let index = domIndex(node)\n    node = node.parentNode\n    if (!node) return false\n    atStart = atStart && index == 0\n    atEnd = atEnd && index == nodeSize(node)\n  }\n}\n\nfunction hasBlockDesc(dom) {\n  let desc\n  for (let cur = dom; cur; cur = cur.parentNode) if (desc = cur.pmViewDesc) break\n  return desc && desc.node && desc.node.isBlock && (desc.dom == dom || desc.contentDOM == dom)\n}\n\n// Work around Chrome issue https://bugs.chromium.org/p/chromium/issues/detail?id=447523\n// (isCollapsed inappropriately returns true in shadow dom)\nexport const selectionCollapsed = function(domSel) {\n  let collapsed = domSel.isCollapsed\n  if (collapsed && browser.chrome && domSel.rangeCount && !domSel.getRangeAt(0).collapsed)\n    collapsed = false\n  return collapsed\n}\n\nexport function keyEvent(keyCode, key) {\n  let event = document.createEvent(\"Event\")\n  event.initEvent(\"keydown\", true, true)\n  event.keyCode = keyCode\n  event.key = event.code = key\n  return event\n}\n", "import {nodeSize, textRange, parentNode} from \"./dom\"\nimport browser from \"./browser\"\n\nfunction windowRect(doc) {\n  return {left: 0, right: doc.documentElement.clientWidth,\n          top: 0, bottom: doc.documentElement.clientHeight}\n}\n\nfunction getSide(value, side) {\n  return typeof value == \"number\" ? value : value[side]\n}\n\nfunction clientRect(node) {\n  let rect = node.getBoundingClientRect()\n  // Adjust for elements with style \"transform: scale()\"\n  let scaleX = (rect.width / node.offsetWidth) || 1\n  let scaleY = (rect.height / node.offsetHeight) || 1\n  // Make sure scrollbar width isn't included in the rectangle\n  return {left: rect.left, right: rect.left + node.clientWidth * scaleX,\n          top: rect.top, bottom: rect.top + node.clientHeight * scaleY}\n}\n\nexport function scrollRectIntoView(view, rect, startDOM) {\n  let scrollThreshold = view.someProp(\"scrollThreshold\") || 0, scrollMargin = view.someProp(\"scrollMargin\") || 5\n  let doc = view.dom.ownerDocument\n  for (let parent = startDOM || view.dom;; parent = parentNode(parent)) {\n    if (!parent) break\n    if (parent.nodeType != 1) continue\n    let atTop = parent == doc.body || parent.nodeType != 1\n    let bounding = atTop ? windowRect(doc) : clientRect(parent)\n    let moveX = 0, moveY = 0\n    if (rect.top < bounding.top + getSide(scrollThreshold, \"top\"))\n      moveY = -(bounding.top - rect.top + getSide(scrollMargin, \"top\"))\n    else if (rect.bottom > bounding.bottom - getSide(scrollThreshold, \"bottom\"))\n      moveY = rect.bottom - bounding.bottom + getSide(scrollMargin, \"bottom\")\n    if (rect.left < bounding.left + getSide(scrollThreshold, \"left\"))\n      moveX = -(bounding.left - rect.left + getSide(scrollMargin, \"left\"))\n    else if (rect.right > bounding.right - getSide(scrollThreshold, \"right\"))\n      moveX = rect.right - bounding.right + getSide(scrollMargin, \"right\")\n    if (moveX || moveY) {\n      if (atTop) {\n        doc.defaultView.scrollBy(moveX, moveY)\n      } else {\n        let startX = parent.scrollLeft, startY = parent.scrollTop\n        if (moveY) parent.scrollTop += moveY\n        if (moveX) parent.scrollLeft += moveX\n        let dX = parent.scrollLeft - startX, dY = parent.scrollTop - startY\n        rect = {left: rect.left - dX, top: rect.top - dY, right: rect.right - dX, bottom: rect.bottom - dY}\n      }\n    }\n    if (atTop) break\n  }\n}\n\n// Store the scroll position of the editor's parent nodes, along with\n// the top position of an element near the top of the editor, which\n// will be used to make sure the visible viewport remains stable even\n// when the size of the content above changes.\nexport function storeScrollPos(view) {\n  let rect = view.dom.getBoundingClientRect(), startY = Math.max(0, rect.top)\n  let refDOM, refTop\n  for (let x = (rect.left + rect.right) / 2, y = startY + 1;\n       y < Math.min(innerHeight, rect.bottom); y += 5) {\n    let dom = view.root.elementFromPoint(x, y)\n    if (dom == view.dom || !view.dom.contains(dom)) continue\n    let localRect = dom.getBoundingClientRect()\n    if (localRect.top >= startY - 20) {\n      refDOM = dom\n      refTop = localRect.top\n      break\n    }\n  }\n  return {refDOM, refTop, stack: scrollStack(view.dom)}\n}\n\nfunction scrollStack(dom) {\n  let stack = [], doc = dom.ownerDocument\n  for (; dom; dom = parentNode(dom)) {\n    stack.push({dom, top: dom.scrollTop, left: dom.scrollLeft})\n    if (dom == doc) break\n  }\n  return stack\n}\n\n// Reset the scroll position of the editor's parent nodes to that what\n// it was before, when storeScrollPos was called.\nexport function resetScrollPos({refDOM, refTop, stack}) {\n  let newRefTop = refDOM ? refDOM.getBoundingClientRect().top : 0\n  restoreScrollStack(stack, newRefTop == 0 ? 0 : newRefTop - refTop)\n}\n\nfunction restoreScrollStack(stack, dTop) {\n  for (let i = 0; i < stack.length; i++) {\n    let {dom, top, left} = stack[i]\n    if (dom.scrollTop != top + dTop) dom.scrollTop = top + dTop\n    if (dom.scrollLeft != left) dom.scrollLeft = left\n  }\n}\n\nlet preventScrollSupported = null\n// Feature-detects support for .focus({preventScroll: true}), and uses\n// a fallback kludge when not supported.\nexport function focusPreventScroll(dom) {\n  if (dom.setActive) return dom.setActive() // in IE\n  if (preventScrollSupported) return dom.focus(preventScrollSupported)\n\n  let stored = scrollStack(dom)\n  dom.focus(preventScrollSupported == null ? {\n    get preventScroll() {\n      preventScrollSupported = {preventScroll: true}\n      return true\n    }\n  } : undefined)\n  if (!preventScrollSupported) {\n    preventScrollSupported = false\n    restoreScrollStack(stored, 0)\n  }\n}\n\nfunction findOffsetInNode(node, coords) {\n  let closest, dxClosest = 2e8, coordsClosest, offset = 0\n  let rowBot = coords.top, rowTop = coords.top\n  for (let child = node.firstChild, childIndex = 0; child; child = child.nextSibling, childIndex++) {\n    let rects\n    if (child.nodeType == 1) rects = child.getClientRects()\n    else if (child.nodeType == 3) rects = textRange(child).getClientRects()\n    else continue\n\n    for (let i = 0; i < rects.length; i++) {\n      let rect = rects[i]\n      if (rect.top <= rowBot && rect.bottom >= rowTop) {\n        rowBot = Math.max(rect.bottom, rowBot)\n        rowTop = Math.min(rect.top, rowTop)\n        let dx = rect.left > coords.left ? rect.left - coords.left\n            : rect.right < coords.left ? coords.left - rect.right : 0\n        if (dx < dxClosest) {\n          closest = child\n          dxClosest = dx\n          coordsClosest = dx && closest.nodeType == 3 ? {left: rect.right < coords.left ? rect.right : rect.left, top: coords.top} : coords\n          if (child.nodeType == 1 && dx)\n            offset = childIndex + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0)\n          continue\n        }\n      }\n      if (!closest && (coords.left >= rect.right && coords.top >= rect.top ||\n                       coords.left >= rect.left && coords.top >= rect.bottom))\n        offset = childIndex + 1\n    }\n  }\n  if (closest && closest.nodeType == 3) return findOffsetInText(closest, coordsClosest)\n  if (!closest || (dxClosest && closest.nodeType == 1)) return {node, offset}\n  return findOffsetInNode(closest, coordsClosest)\n}\n\nfunction findOffsetInText(node, coords) {\n  let len = node.nodeValue.length\n  let range = document.createRange()\n  for (let i = 0; i < len; i++) {\n    range.setEnd(node, i + 1)\n    range.setStart(node, i)\n    let rect = singleRect(range, 1)\n    if (rect.top == rect.bottom) continue\n    if (inRect(coords, rect))\n      return {node, offset: i + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0)}\n  }\n  return {node, offset: 0}\n}\n\nfunction inRect(coords, rect) {\n  return coords.left >= rect.left - 1 && coords.left <= rect.right + 1&&\n    coords.top >= rect.top - 1 && coords.top <= rect.bottom + 1\n}\n\nfunction targetKludge(dom, coords) {\n  let parent = dom.parentNode\n  if (parent && /^li$/i.test(parent.nodeName) && coords.left < dom.getBoundingClientRect().left)\n    return parent\n  return dom\n}\n\nfunction posFromElement(view, elt, coords) {\n  let {node, offset} = findOffsetInNode(elt, coords), bias = -1\n  if (node.nodeType == 1 && !node.firstChild) {\n    let rect = node.getBoundingClientRect()\n    bias = rect.left != rect.right && coords.left > (rect.left + rect.right) / 2 ? 1 : -1\n  }\n  return view.docView.posFromDOM(node, offset, bias)\n}\n\nfunction posFromCaret(view, node, offset, coords) {\n  // Browser (in caretPosition/RangeFromPoint) will agressively\n  // normalize towards nearby inline nodes. Since we are interested in\n  // positions between block nodes too, we first walk up the hierarchy\n  // of nodes to see if there are block nodes that the coordinates\n  // fall outside of. If so, we take the position before/after that\n  // block. If not, we call `posFromDOM` on the raw node/offset.\n  let outside = -1\n  for (let cur = node;;) {\n    if (cur == view.dom) break\n    let desc = view.docView.nearestDesc(cur, true)\n    if (!desc) return null\n    if (desc.node.isBlock && desc.parent) {\n      let rect = desc.dom.getBoundingClientRect()\n      if (rect.left > coords.left || rect.top > coords.top) outside = desc.posBefore\n      else if (rect.right < coords.left || rect.bottom < coords.top) outside = desc.posAfter\n      else break\n    }\n    cur = desc.dom.parentNode\n  }\n  return outside > -1 ? outside : view.docView.posFromDOM(node, offset)\n}\n\nfunction elementFromPoint(element, coords, box) {\n  let len = element.childNodes.length\n  if (len && box.top < box.bottom) {\n    for (let startI = Math.max(0, Math.min(len - 1, Math.floor(len * (coords.top - box.top) / (box.bottom - box.top)) - 2)), i = startI;;) {\n      let child = element.childNodes[i]\n      if (child.nodeType == 1) {\n        let rects = child.getClientRects()\n        for (let j = 0; j < rects.length; j++) {\n          let rect = rects[j]\n          if (inRect(coords, rect)) return elementFromPoint(child, coords, rect)\n        }\n      }\n      if ((i = (i + 1) % len) == startI) break\n    }\n  }\n  return element\n}\n\n// Given an x,y position on the editor, get the position in the document.\nexport function posAtCoords(view, coords) {\n  let doc = view.dom.ownerDocument, node, offset\n  if (doc.caretPositionFromPoint) {\n    try { // Firefox throws for this call in hard-to-predict circumstances (#994)\n      let pos = doc.caretPositionFromPoint(coords.left, coords.top)\n      if (pos) ({offsetNode: node, offset} = pos)\n    } catch (_) {}\n  }\n  if (!node && doc.caretRangeFromPoint) {\n    let range = doc.caretRangeFromPoint(coords.left, coords.top)\n    if (range) ({startContainer: node, startOffset: offset} = range)\n  }\n\n  let elt = (view.root.elementFromPoint ? view.root : doc).elementFromPoint(coords.left, coords.top + 1), pos\n  if (!elt || !view.dom.contains(elt.nodeType != 1 ? elt.parentNode : elt)) {\n    let box = view.dom.getBoundingClientRect()\n    if (!inRect(coords, box)) return null\n    elt = elementFromPoint(view.dom, coords, box)\n    if (!elt) return null\n  }\n  // Safari's caretRangeFromPoint returns nonsense when on a draggable element\n  if (browser.safari) {\n    for (let p = elt; node && p; p = parentNode(p))\n      if (p.draggable) node = offset = null\n  }\n  elt = targetKludge(elt, coords)\n  if (node) {\n    if (browser.gecko && node.nodeType == 1) {\n      // Firefox will sometimes return offsets into <input> nodes, which\n      // have no actual children, from caretPositionFromPoint (#953)\n      offset = Math.min(offset, node.childNodes.length)\n      // It'll also move the returned position before image nodes,\n      // even if those are behind it.\n      if (offset < node.childNodes.length) {\n        let next = node.childNodes[offset], box\n        if (next.nodeName == \"IMG\" && (box = next.getBoundingClientRect()).right <= coords.left &&\n            box.bottom > coords.top)\n          offset++\n      }\n    }\n    // Suspiciously specific kludge to work around caret*FromPoint\n    // never returning a position at the end of the document\n    if (node == view.dom && offset == node.childNodes.length - 1 && node.lastChild.nodeType == 1 &&\n        coords.top > node.lastChild.getBoundingClientRect().bottom)\n      pos = view.state.doc.content.size\n    // Ignore positions directly after a BR, since caret*FromPoint\n    // 'round up' positions that would be more accurately placed\n    // before the BR node.\n    else if (offset == 0 || node.nodeType != 1 || node.childNodes[offset - 1].nodeName != \"BR\")\n      pos = posFromCaret(view, node, offset, coords)\n  }\n  if (pos == null) pos = posFromElement(view, elt, coords)\n\n  let desc = view.docView.nearestDesc(elt, true)\n  return {pos, inside: desc ? desc.posAtStart - desc.border : -1}\n}\n\nfunction singleRect(object, bias) {\n  let rects = object.getClientRects()\n  return !rects.length ? object.getBoundingClientRect() : rects[bias < 0 ? 0 : rects.length - 1]\n}\n\nconst BIDI = /[\\u0590-\\u05f4\\u0600-\\u06ff\\u0700-\\u08ac]/\n\n// : (EditorView, number, number) \u2192 {left: number, top: number, right: number, bottom: number}\n// Given a position in the document model, get a bounding box of the\n// character at that position, relative to the window.\nexport function coordsAtPos(view, pos, side) {\n  let {node, offset} = view.docView.domFromPos(pos, side < 0 ? -1 : 1)\n\n  let supportEmptyRange = browser.webkit || browser.gecko\n  if (node.nodeType == 3) {\n    // These browsers support querying empty text ranges. Prefer that in\n    // bidi context or when at the end of a node.\n    if (supportEmptyRange && (BIDI.test(node.nodeValue) || (side < 0 ? !offset : offset == node.nodeValue.length))) {\n      let rect = singleRect(textRange(node, offset, offset), side)\n      // Firefox returns bad results (the position before the space)\n      // when querying a position directly after line-broken\n      // whitespace. Detect this situation and and kludge around it\n      if (browser.gecko && offset && /\\s/.test(node.nodeValue[offset - 1]) && offset < node.nodeValue.length) {\n        let rectBefore = singleRect(textRange(node, offset - 1, offset - 1), -1)\n        if (rectBefore.top == rect.top) {\n          let rectAfter = singleRect(textRange(node, offset, offset + 1), -1)\n          if (rectAfter.top != rect.top)\n            return flattenV(rectAfter, rectAfter.left < rectBefore.left)\n        }\n      }\n      return rect\n    } else {\n      let from = offset, to = offset, takeSide = side < 0 ? 1 : -1\n      if (side < 0 && !offset) { to++; takeSide = -1 }\n      else if (side >= 0 && offset == node.nodeValue.length) { from--; takeSide = 1 }\n      else if (side < 0) { from-- }\n      else { to ++ }\n      return flattenV(singleRect(textRange(node, from, to), takeSide), takeSide < 0)\n    }\n  }\n\n  // Return a horizontal line in block context\n  if (!view.state.doc.resolve(pos).parent.inlineContent) {\n    if (offset && (side < 0 || offset == nodeSize(node))) {\n      let before = node.childNodes[offset - 1]\n      if (before.nodeType == 1) return flattenH(before.getBoundingClientRect(), false)\n    }\n    if (offset < nodeSize(node)) {\n      let after = node.childNodes[offset]\n      if (after.nodeType == 1) return flattenH(after.getBoundingClientRect(), true)\n    }\n    return flattenH(node.getBoundingClientRect(), side >= 0)\n  }\n\n  // Inline, not in text node (this is not Bidi-safe)\n  if (offset && (side < 0 || offset == nodeSize(node))) {\n    let before = node.childNodes[offset - 1]\n    let target = before.nodeType == 3 ? textRange(before, nodeSize(before) - (supportEmptyRange ? 0 : 1))\n        // BR nodes tend to only return the rectangle before them.\n        // Only use them if they are the last element in their parent\n        : before.nodeType == 1 && (before.nodeName != \"BR\" || !before.nextSibling) ? before : null\n    if (target) return flattenV(singleRect(target, 1), false)\n  }\n  if (offset < nodeSize(node)) {\n    let after = node.childNodes[offset]\n    while (after.pmViewDesc && after.pmViewDesc.ignoreForCoords) after = after.nextSibling\n    let target = !after ? null : after.nodeType == 3 ? textRange(after, 0, (supportEmptyRange ? 0 : 1))\n        : after.nodeType == 1 ? after : null\n    if (target) return flattenV(singleRect(target, -1), true)\n  }\n  // All else failed, just try to get a rectangle for the target node\n  return flattenV(singleRect(node.nodeType == 3 ? textRange(node) : node, -side), side >= 0)\n}\n\nfunction flattenV(rect, left) {\n  if (rect.width == 0) return rect\n  let x = left ? rect.left : rect.right\n  return {top: rect.top, bottom: rect.bottom, left: x, right: x}\n}\n\nfunction flattenH(rect, top) {\n  if (rect.height == 0) return rect\n  let y = top ? rect.top : rect.bottom\n  return {top: y, bottom: y, left: rect.left, right: rect.right}\n}\n\nfunction withFlushedState(view, state, f) {\n  let viewState = view.state, active = view.root.activeElement\n  if (viewState != state) view.updateState(state)\n  if (active != view.dom) view.focus()\n  try {\n    return f()\n  } finally {\n    if (viewState != state) view.updateState(viewState)\n    if (active != view.dom && active) active.focus()\n  }\n}\n\n// : (EditorView, number, number)\n// Whether vertical position motion in a given direction\n// from a position would leave a text block.\nfunction endOfTextblockVertical(view, state, dir) {\n  let sel = state.selection\n  let $pos = dir == \"up\" ? sel.$from : sel.$to\n  return withFlushedState(view, state, () => {\n    let {node: dom} = view.docView.domFromPos($pos.pos, dir == \"up\" ? -1 : 1)\n    for (;;) {\n      let nearest = view.docView.nearestDesc(dom, true)\n      if (!nearest) break\n      if (nearest.node.isBlock) { dom = nearest.dom; break }\n      dom = nearest.dom.parentNode\n    }\n    let coords = coordsAtPos(view, $pos.pos, 1)\n    for (let child = dom.firstChild; child; child = child.nextSibling) {\n      let boxes\n      if (child.nodeType == 1) boxes = child.getClientRects()\n      else if (child.nodeType == 3) boxes = textRange(child, 0, child.nodeValue.length).getClientRects()\n      else continue\n      for (let i = 0; i < boxes.length; i++) {\n        let box = boxes[i]\n        if (box.bottom > box.top + 1 &&\n            (dir == \"up\" ? coords.top - box.top > (box.bottom - coords.top) * 2\n             : box.bottom - coords.bottom > (coords.bottom - box.top) * 2))\n          return false\n      }\n    }\n    return true\n  })\n}\n\nconst maybeRTL = /[\\u0590-\\u08ac]/\n\nfunction endOfTextblockHorizontal(view, state, dir) {\n  let {$head} = state.selection\n  if (!$head.parent.isTextblock) return false\n  let offset = $head.parentOffset, atStart = !offset, atEnd = offset == $head.parent.content.size\n  let sel = view.root.getSelection()\n  // If the textblock is all LTR, or the browser doesn't support\n  // Selection.modify (Edge), fall back to a primitive approach\n  if (!maybeRTL.test($head.parent.textContent) || !sel.modify)\n    return dir == \"left\" || dir == \"backward\" ? atStart : atEnd\n\n  return withFlushedState(view, state, () => {\n    // This is a huge hack, but appears to be the best we can\n    // currently do: use `Selection.modify` to move the selection by\n    // one character, and see if that moves the cursor out of the\n    // textblock (or doesn't move it at all, when at the start/end of\n    // the document).\n    let oldRange = sel.getRangeAt(0), oldNode = sel.focusNode, oldOff = sel.focusOffset\n    let oldBidiLevel = sel.caretBidiLevel // Only for Firefox\n    sel.modify(\"move\", dir, \"character\")\n    let parentDOM = $head.depth ? view.docView.domAfterPos($head.before()) : view.dom\n    let result = !parentDOM.contains(sel.focusNode.nodeType == 1 ? sel.focusNode : sel.focusNode.parentNode) ||\n        (oldNode == sel.focusNode && oldOff == sel.focusOffset)\n    // Restore the previous selection\n    sel.removeAllRanges()\n    sel.addRange(oldRange)\n    if (oldBidiLevel != null) sel.caretBidiLevel = oldBidiLevel\n    return result\n  })\n}\n\nlet cachedState = null, cachedDir = null, cachedResult = false\nexport function endOfTextblock(view, state, dir) {\n  if (cachedState == state && cachedDir == dir) return cachedResult\n  cachedState = state; cachedDir = dir\n  return cachedResult = dir == \"up\" || dir == \"down\"\n    ? endOfTextblockVertical(view, state, dir)\n    : endOfTextblockHorizontal(view, state, dir)\n}\n", "import {DOMSerializer, Fragment, Mark} from \"prosemirror-model\"\nimport {TextSelection} from \"prosemirror-state\"\n\nimport {domIndex, isEquivalentPosition, nodeSize} from \"./dom\"\nimport browser from \"./browser\"\n\n// NodeView:: interface\n//\n// By default, document nodes are rendered using the result of the\n// [`toDOM`](#model.NodeSpec.toDOM) method of their spec, and managed\n// entirely by the editor. For some use cases, such as embedded\n// node-specific editing interfaces, you want more control over\n// the behavior of a node's in-editor representation, and need to\n// [define](#view.EditorProps.nodeViews) a custom node view.\n//\n// Mark views only support `dom` and `contentDOM`, and don't support\n// any of the node view methods.\n//\n// Objects returned as node views must conform to this interface.\n//\n//   dom:: ?dom.Node\n//   The outer DOM node that represents the document node. When not\n//   given, the default strategy is used to create a DOM node.\n//\n//   contentDOM:: ?dom.Node\n//   The DOM node that should hold the node's content. Only meaningful\n//   if the node view also defines a `dom` property and if its node\n//   type is not a leaf node type. When this is present, ProseMirror\n//   will take care of rendering the node's children into it. When it\n//   is not present, the node view itself is responsible for rendering\n//   (or deciding not to render) its child nodes.\n//\n//   update:: ?(node: Node, decorations: [Decoration], innerDecorations: DecorationSource) \u2192 bool\n//   When given, this will be called when the view is updating itself.\n//   It will be given a node (possibly of a different type), an array\n//   of active decorations around the node (which are automatically\n//   drawn, and the node view may ignore if it isn't interested in\n//   them), and a [decoration source](#view.DecorationSource) that\n//   represents any decorations that apply to the content of the node\n//   (which again may be ignored). It should return true if it was\n//   able to update to that node, and false otherwise. If the node\n//   view has a `contentDOM` property (or no `dom` property), updating\n//   its child nodes will be handled by ProseMirror.\n//\n//   selectNode:: ?()\n//   Can be used to override the way the node's selected status (as a\n//   node selection) is displayed.\n//\n//   deselectNode:: ?()\n//   When defining a `selectNode` method, you should also provide a\n//   `deselectNode` method to remove the effect again.\n//\n//   setSelection:: ?(anchor: number, head: number, root: dom.Document)\n//   This will be called to handle setting the selection inside the\n//   node. The `anchor` and `head` positions are relative to the start\n//   of the node. By default, a DOM selection will be created between\n//   the DOM positions corresponding to those positions, but if you\n//   override it you can do something else.\n//\n//   stopEvent:: ?(event: dom.Event) \u2192 bool\n//   Can be used to prevent the editor view from trying to handle some\n//   or all DOM events that bubble up from the node view. Events for\n//   which this returns true are not handled by the editor.\n//\n//   ignoreMutation:: ?(dom.MutationRecord) \u2192 bool\n//   Called when a DOM\n//   [mutation](https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver)\n//   or a selection change happens within the view. When the change is\n//   a selection change, the record will have a `type` property of\n//   `\"selection\"` (which doesn't occur for native mutation records).\n//   Return false if the editor should re-read the selection or\n//   re-parse the range around the mutation, true if it can safely be\n//   ignored.\n//\n//   destroy:: ?()\n//   Called when the node view is removed from the editor or the whole\n//   editor is destroyed. (Not available for marks.)\n\n// View descriptions are data structures that describe the DOM that is\n// used to represent the editor's content. They are used for:\n//\n// - Incremental redrawing when the document changes\n//\n// - Figuring out what part of the document a given DOM position\n//   corresponds to\n//\n// - Wiring in custom implementations of the editing interface for a\n//   given node\n//\n// They form a doubly-linked mutable tree, starting at `view.docView`.\n\nconst NOT_DIRTY = 0, CHILD_DIRTY = 1, CONTENT_DIRTY = 2, NODE_DIRTY = 3\n\n// Superclass for the various kinds of descriptions. Defines their\n// basic structure and shared methods.\nclass ViewDesc {\n  // : (?ViewDesc, [ViewDesc], dom.Node, ?dom.Node)\n  constructor(parent, children, dom, contentDOM) {\n    this.parent = parent\n    this.children = children\n    this.dom = dom\n    // An expando property on the DOM node provides a link back to its\n    // description.\n    dom.pmViewDesc = this\n    // This is the node that holds the child views. It may be null for\n    // descs that don't have children.\n    this.contentDOM = contentDOM\n    this.dirty = NOT_DIRTY\n  }\n\n  // Used to check whether a given description corresponds to a\n  // widget/mark/node.\n  matchesWidget() { return false }\n  matchesMark() { return false }\n  matchesNode() { return false }\n  matchesHack(_nodeName) { return false }\n\n  // : () \u2192 ?ParseRule\n  // When parsing in-editor content (in domchange.js), we allow\n  // descriptions to determine the parse rules that should be used to\n  // parse them.\n  parseRule() { return null }\n\n  // : (dom.Event) \u2192 bool\n  // Used by the editor's event handler to ignore events that come\n  // from certain descs.\n  stopEvent() { return false }\n\n  // The size of the content represented by this desc.\n  get size() {\n    let size = 0\n    for (let i = 0; i < this.children.length; i++) size += this.children[i].size\n    return size\n  }\n\n  // For block nodes, this represents the space taken up by their\n  // start/end tokens.\n  get border() { return 0 }\n\n  destroy() {\n    this.parent = null\n    if (this.dom.pmViewDesc == this) this.dom.pmViewDesc = null\n    for (let i = 0; i < this.children.length; i++)\n      this.children[i].destroy()\n  }\n\n  posBeforeChild(child) {\n    for (let i = 0, pos = this.posAtStart; i < this.children.length; i++) {\n      let cur = this.children[i]\n      if (cur == child) return pos\n      pos += cur.size\n    }\n  }\n\n  get posBefore() {\n    return this.parent.posBeforeChild(this)\n  }\n\n  get posAtStart() {\n    return this.parent ? this.parent.posBeforeChild(this) + this.border : 0\n  }\n\n  get posAfter() {\n    return this.posBefore + this.size\n  }\n\n  get posAtEnd() {\n    return this.posAtStart + this.size - 2 * this.border\n  }\n\n  // : (dom.Node, number, ?number) \u2192 number\n  localPosFromDOM(dom, offset, bias) {\n    // If the DOM position is in the content, use the child desc after\n    // it to figure out a position.\n    if (this.contentDOM && this.contentDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode)) {\n      if (bias < 0) {\n        let domBefore, desc\n        if (dom == this.contentDOM) {\n          domBefore = dom.childNodes[offset - 1]\n        } else {\n          while (dom.parentNode != this.contentDOM) dom = dom.parentNode\n          domBefore = dom.previousSibling\n        }\n        while (domBefore && !((desc = domBefore.pmViewDesc) && desc.parent == this)) domBefore = domBefore.previousSibling\n        return domBefore ? this.posBeforeChild(desc) + desc.size : this.posAtStart\n      } else {\n        let domAfter, desc\n        if (dom == this.contentDOM) {\n          domAfter = dom.childNodes[offset]\n        } else {\n          while (dom.parentNode != this.contentDOM) dom = dom.parentNode\n          domAfter = dom.nextSibling\n        }\n        while (domAfter && !((desc = domAfter.pmViewDesc) && desc.parent == this)) domAfter = domAfter.nextSibling\n        return domAfter ? this.posBeforeChild(desc) : this.posAtEnd\n      }\n    }\n    // Otherwise, use various heuristics, falling back on the bias\n    // parameter, to determine whether to return the position at the\n    // start or at the end of this view desc.\n    let atEnd\n    if (dom == this.dom && this.contentDOM) {\n      atEnd = offset > domIndex(this.contentDOM)\n    } else if (this.contentDOM && this.contentDOM != this.dom && this.dom.contains(this.contentDOM)) {\n      atEnd = dom.compareDocumentPosition(this.contentDOM) & 2\n    } else if (this.dom.firstChild) {\n      if (offset == 0) for (let search = dom;; search = search.parentNode) {\n        if (search == this.dom) { atEnd = false; break }\n        if (search.parentNode.firstChild != search) break\n      }\n      if (atEnd == null && offset == dom.childNodes.length) for (let search = dom;; search = search.parentNode) {\n        if (search == this.dom) { atEnd = true; break }\n        if (search.parentNode.lastChild != search) break\n      }\n    }\n    return (atEnd == null ? bias > 0 : atEnd) ? this.posAtEnd : this.posAtStart\n  }\n\n  // Scan up the dom finding the first desc that is a descendant of\n  // this one.\n  nearestDesc(dom, onlyNodes) {\n    for (let first = true, cur = dom; cur; cur = cur.parentNode) {\n      let desc = this.getDesc(cur)\n      if (desc && (!onlyNodes || desc.node)) {\n        // If dom is outside of this desc's nodeDOM, don't count it.\n        if (first && desc.nodeDOM &&\n            !(desc.nodeDOM.nodeType == 1 ? desc.nodeDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode) : desc.nodeDOM == dom))\n          first = false\n        else\n          return desc\n      }\n    }\n  }\n\n  getDesc(dom) {\n    let desc = dom.pmViewDesc\n    for (let cur = desc; cur; cur = cur.parent) if (cur == this) return desc\n  }\n\n  posFromDOM(dom, offset, bias) {\n    for (let scan = dom; scan; scan = scan.parentNode) {\n      let desc = this.getDesc(scan)\n      if (desc) return desc.localPosFromDOM(dom, offset, bias)\n    }\n    return -1\n  }\n\n  // : (number) \u2192 ?NodeViewDesc\n  // Find the desc for the node after the given pos, if any. (When a\n  // parent node overrode rendering, there might not be one.)\n  descAt(pos) {\n    for (let i = 0, offset = 0; i < this.children.length; i++) {\n      let child = this.children[i], end = offset + child.size\n      if (offset == pos && end != offset) {\n        while (!child.border && child.children.length) child = child.children[0]\n        return child\n      }\n      if (pos < end) return child.descAt(pos - offset - child.border)\n      offset = end\n    }\n  }\n\n  // : (number, number) \u2192 {node: dom.Node, offset: number}\n  domFromPos(pos, side) {\n    if (!this.contentDOM) return {node: this.dom, offset: 0}\n    // First find the position in the child array\n    let i = 0, offset = 0\n    for (let curPos = 0; i < this.children.length; i++) {\n      let child = this.children[i], end = curPos + child.size\n      if (end > pos || child instanceof TrailingHackViewDesc) { offset = pos - curPos; break }\n      curPos = end\n    }\n    // If this points into the middle of a child, call through\n    if (offset) return this.children[i].domFromPos(offset - this.children[i].border, side)\n    // Go back if there were any zero-length widgets with side >= 0 before this point\n    for (let prev; i && !(prev = this.children[i - 1]).size && prev instanceof WidgetViewDesc && prev.widget.type.side >= 0; i--) {}\n    // Scan towards the first useable node\n    if (side <= 0) {\n      let prev, enter = true\n      for (;; i--, enter = false) {\n        prev = i ? this.children[i - 1] : null\n        if (!prev || prev.dom.parentNode == this.contentDOM) break\n      }\n      if (prev && side && enter && !prev.border && !prev.domAtom) return prev.domFromPos(prev.size, side)\n      return {node: this.contentDOM, offset: prev ? domIndex(prev.dom) + 1 : 0}\n    } else {\n      let next, enter = true\n      for (;; i++, enter = false) {\n        next = i < this.children.length ? this.children[i] : null\n        if (!next || next.dom.parentNode == this.contentDOM) break\n      }\n      if (next && enter && !next.border && !next.domAtom) return next.domFromPos(0, side)\n      return {node: this.contentDOM, offset: next ? domIndex(next.dom) : this.contentDOM.childNodes.length}\n    }\n  }\n\n  // Used to find a DOM range in a single parent for a given changed\n  // range.\n  parseRange(from, to, base = 0) {\n    if (this.children.length == 0)\n      return {node: this.contentDOM, from, to, fromOffset: 0, toOffset: this.contentDOM.childNodes.length}\n\n    let fromOffset = -1, toOffset = -1\n    for (let offset = base, i = 0;; i++) {\n      let child = this.children[i], end = offset + child.size\n      if (fromOffset == -1 && from <= end) {\n        let childBase = offset + child.border\n        // FIXME maybe descend mark views to parse a narrower range?\n        if (from >= childBase && to <= end - child.border && child.node &&\n            child.contentDOM && this.contentDOM.contains(child.contentDOM))\n          return child.parseRange(from, to, childBase)\n\n        from = offset\n        for (let j = i; j > 0; j--) {\n          let prev = this.children[j - 1]\n          if (prev.size && prev.dom.parentNode == this.contentDOM && !prev.emptyChildAt(1)) {\n            fromOffset = domIndex(prev.dom) + 1\n            break\n          }\n          from -= prev.size\n        }\n        if (fromOffset == -1) fromOffset = 0\n      }\n      if (fromOffset > -1 && (end > to || i == this.children.length - 1)) {\n        to = end\n        for (let j = i + 1; j < this.children.length; j++) {\n          let next = this.children[j]\n          if (next.size && next.dom.parentNode == this.contentDOM && !next.emptyChildAt(-1)) {\n            toOffset = domIndex(next.dom)\n            break\n          }\n          to += next.size\n        }\n        if (toOffset == -1) toOffset = this.contentDOM.childNodes.length\n        break\n      }\n      offset = end\n    }\n    return {node: this.contentDOM, from, to, fromOffset, toOffset}\n  }\n\n  emptyChildAt(side) {\n    if (this.border || !this.contentDOM || !this.children.length) return false\n    let child = this.children[side < 0 ? 0 : this.children.length - 1]\n    return child.size == 0 || child.emptyChildAt(side)\n  }\n\n  // : (number) \u2192 dom.Node\n  domAfterPos(pos) {\n    let {node, offset} = this.domFromPos(pos, 0)\n    if (node.nodeType != 1 || offset == node.childNodes.length)\n      throw new RangeError(\"No node after pos \" + pos)\n    return node.childNodes[offset]\n  }\n\n  // : (number, number, dom.Document)\n  // View descs are responsible for setting any selection that falls\n  // entirely inside of them, so that custom implementations can do\n  // custom things with the selection. Note that this falls apart when\n  // a selection starts in such a node and ends in another, in which\n  // case we just use whatever domFromPos produces as a best effort.\n  setSelection(anchor, head, root, force) {\n    // If the selection falls entirely in a child, give it to that child\n    let from = Math.min(anchor, head), to = Math.max(anchor, head)\n    for (let i = 0, offset = 0; i < this.children.length; i++) {\n      let child = this.children[i], end = offset + child.size\n      if (from > offset && to < end)\n        return child.setSelection(anchor - offset - child.border, head - offset - child.border, root, force)\n      offset = end\n    }\n\n    let anchorDOM = this.domFromPos(anchor, anchor ? -1 : 1)\n    let headDOM = head == anchor ? anchorDOM : this.domFromPos(head, head ? -1 : 1)\n    let domSel = root.getSelection()\n\n    let brKludge = false\n    // On Firefox, using Selection.collapse to put the cursor after a\n    // BR node for some reason doesn't always work (#1073). On Safari,\n    // the cursor sometimes inexplicable visually lags behind its\n    // reported position in such situations (#1092).\n    if ((browser.gecko || browser.safari) && anchor == head) {\n      let {node, offset} = anchorDOM\n      if (node.nodeType == 3) {\n        brKludge = offset && node.nodeValue[offset - 1] == \"\\n\"\n        // Issue #1128\n        if (brKludge && offset == node.nodeValue.length) {\n          for (let scan = node, after; scan; scan = scan.parentNode) {\n            if (after = scan.nextSibling) {\n              if (after.nodeName == \"BR\")\n                anchorDOM = headDOM = {node: after.parentNode, offset: domIndex(after) + 1}\n              break\n            }\n            let desc = scan.pmViewDesc\n            if (desc && desc.node && desc.node.isBlock) break\n          }\n        }\n      } else {\n        let prev = node.childNodes[offset - 1]\n        brKludge = prev && (prev.nodeName == \"BR\" || prev.contentEditable == \"false\")\n      }\n    }\n    // Firefox can act strangely when the selection is in front of an\n    // uneditable node. See #1163 and https://bugzilla.mozilla.org/show_bug.cgi?id=1709536\n    if (browser.gecko && domSel.focusNode && domSel.focusNode != headDOM.node && domSel.focusNode.nodeType == 1) {\n      let after = domSel.focusNode.childNodes[domSel.focusOffset]\n      if (after && after.contentEditable == \"false\") force = true\n    }\n\n    if (!(force || brKludge && browser.safari) &&\n        isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset) &&\n        isEquivalentPosition(headDOM.node, headDOM.offset, domSel.focusNode, domSel.focusOffset))\n      return\n\n    // Selection.extend can be used to create an 'inverted' selection\n    // (one where the focus is before the anchor), but not all\n    // browsers support it yet.\n    let domSelExtended = false\n    if ((domSel.extend || anchor == head) && !brKludge) {\n      domSel.collapse(anchorDOM.node, anchorDOM.offset)\n      try {\n        if (anchor != head) domSel.extend(headDOM.node, headDOM.offset)\n        domSelExtended = true\n      } catch (err) {\n        // In some cases with Chrome the selection is empty after calling\n        // collapse, even when it should be valid. This appears to be a bug, but\n        // it is difficult to isolate. If this happens fallback to the old path\n        // without using extend.\n        if (!(err instanceof DOMException)) throw err\n        // declare global: DOMException\n      }\n    }\n    if (!domSelExtended) {\n      if (anchor > head) { let tmp = anchorDOM; anchorDOM = headDOM; headDOM = tmp }\n      let range = document.createRange()\n      range.setEnd(headDOM.node, headDOM.offset)\n      range.setStart(anchorDOM.node, anchorDOM.offset)\n      domSel.removeAllRanges()\n      domSel.addRange(range)\n    }\n  }\n\n  // : (dom.MutationRecord) \u2192 bool\n  ignoreMutation(mutation) {\n    return !this.contentDOM && mutation.type != \"selection\"\n  }\n\n  get contentLost() {\n    return this.contentDOM && this.contentDOM != this.dom && !this.dom.contains(this.contentDOM)\n  }\n\n  // Remove a subtree of the element tree that has been touched\n  // by a DOM change, so that the next update will redraw it.\n  markDirty(from, to) {\n    for (let offset = 0, i = 0; i < this.children.length; i++) {\n      let child = this.children[i], end = offset + child.size\n      if (offset == end ? from <= end && to >= offset : from < end && to > offset) {\n        let startInside = offset + child.border, endInside = end - child.border\n        if (from >= startInside && to <= endInside) {\n          this.dirty = from == offset || to == end ? CONTENT_DIRTY : CHILD_DIRTY\n          if (from == startInside && to == endInside &&\n              (child.contentLost || child.dom.parentNode != this.contentDOM)) child.dirty = NODE_DIRTY\n          else child.markDirty(from - startInside, to - startInside)\n          return\n        } else {\n          child.dirty = child.dom == child.contentDOM && child.dom.parentNode == this.contentDOM ? CONTENT_DIRTY : NODE_DIRTY\n        }\n      }\n      offset = end\n    }\n    this.dirty = CONTENT_DIRTY\n  }\n\n  markParentsDirty() {\n    let level = 1\n    for (let node = this.parent; node; node = node.parent, level++) {\n      let dirty = level == 1 ? CONTENT_DIRTY : CHILD_DIRTY\n      if (node.dirty < dirty) node.dirty = dirty\n    }\n  }\n\n  get domAtom() { return false }\n\n  get ignoreForCoords() { return false }\n}\n\n// Reused array to avoid allocating fresh arrays for things that will\n// stay empty anyway.\nconst nothing = []\n\n// A widget desc represents a widget decoration, which is a DOM node\n// drawn between the document nodes.\nclass WidgetViewDesc extends ViewDesc {\n  // : (ViewDesc, Decoration)\n  constructor(parent, widget, view, pos) {\n    let self, dom = widget.type.toDOM\n    if (typeof dom == \"function\") dom = dom(view, () => {\n      if (!self) return pos\n      if (self.parent) return self.parent.posBeforeChild(self)\n    })\n    if (!widget.type.spec.raw) {\n      if (dom.nodeType != 1) {\n        let wrap = document.createElement(\"span\")\n        wrap.appendChild(dom)\n        dom = wrap\n      }\n      dom.contentEditable = false\n      dom.classList.add(\"ProseMirror-widget\")\n    }\n    super(parent, nothing, dom, null)\n    this.widget = widget\n    self = this\n  }\n\n  matchesWidget(widget) {\n    return this.dirty == NOT_DIRTY && widget.type.eq(this.widget.type)\n  }\n\n  parseRule() { return {ignore: true} }\n\n  stopEvent(event) {\n    let stop = this.widget.spec.stopEvent\n    return stop ? stop(event) : false\n  }\n\n  ignoreMutation(mutation) {\n    return mutation.type != \"selection\" || this.widget.spec.ignoreSelection\n  }\n\n  destroy() {\n    this.widget.type.destroy(this.dom)\n    super.destroy()\n  }\n\n  get domAtom() { return true }\n}\n\nclass CompositionViewDesc extends ViewDesc {\n  constructor(parent, dom, textDOM, text) {\n    super(parent, nothing, dom, null)\n    this.textDOM = textDOM\n    this.text = text\n  }\n\n  get size() { return this.text.length }\n\n  localPosFromDOM(dom, offset) {\n    if (dom != this.textDOM) return this.posAtStart + (offset ? this.size : 0)\n    return this.posAtStart + offset\n  }\n\n  domFromPos(pos) {\n    return {node: this.textDOM, offset: pos}\n  }\n\n  ignoreMutation(mut) {\n    return mut.type === 'characterData' && mut.target.nodeValue == mut.oldValue\n   }\n}\n\n// A mark desc represents a mark. May have multiple children,\n// depending on how the mark is split. Note that marks are drawn using\n// a fixed nesting order, for simplicity and predictability, so in\n// some cases they will be split more often than would appear\n// necessary.\nclass MarkViewDesc extends ViewDesc {\n  // : (ViewDesc, Mark, dom.Node)\n  constructor(parent, mark, dom, contentDOM) {\n    super(parent, [], dom, contentDOM)\n    this.mark = mark\n  }\n\n  static create(parent, mark, inline, view) {\n    let custom = view.nodeViews[mark.type.name]\n    let spec = custom && custom(mark, view, inline)\n    if (!spec || !spec.dom)\n      spec = DOMSerializer.renderSpec(document, mark.type.spec.toDOM(mark, inline))\n    return new MarkViewDesc(parent, mark, spec.dom, spec.contentDOM || spec.dom)\n  }\n\n  parseRule() { return {mark: this.mark.type.name, attrs: this.mark.attrs, contentElement: this.contentDOM} }\n\n  matchesMark(mark) { return this.dirty != NODE_DIRTY && this.mark.eq(mark) }\n\n  markDirty(from, to) {\n    super.markDirty(from, to)\n    // Move dirty info to nearest node view\n    if (this.dirty != NOT_DIRTY) {\n      let parent = this.parent\n      while (!parent.node) parent = parent.parent\n      if (parent.dirty < this.dirty) parent.dirty = this.dirty\n      this.dirty = NOT_DIRTY\n    }\n  }\n\n  slice(from, to, view) {\n    let copy = MarkViewDesc.create(this.parent, this.mark, true, view)\n    let nodes = this.children, size = this.size\n    if (to < size) nodes = replaceNodes(nodes, to, size, view)\n    if (from > 0) nodes = replaceNodes(nodes, 0, from, view)\n    for (let i = 0; i < nodes.length; i++) nodes[i].parent = copy\n    copy.children = nodes\n    return copy\n  }\n}\n\n// Node view descs are the main, most common type of view desc, and\n// correspond to an actual node in the document. Unlike mark descs,\n// they populate their child array themselves.\nclass NodeViewDesc extends ViewDesc {\n  // : (?ViewDesc, Node, [Decoration], DecorationSource, dom.Node, ?dom.Node, EditorView)\n  constructor(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos) {\n    super(parent, node.isLeaf ? nothing : [], dom, contentDOM)\n    this.nodeDOM = nodeDOM\n    this.node = node\n    this.outerDeco = outerDeco\n    this.innerDeco = innerDeco\n    if (contentDOM) this.updateChildren(view, pos)\n  }\n\n  // By default, a node is rendered using the `toDOM` method from the\n  // node type spec. But client code can use the `nodeViews` spec to\n  // supply a custom node view, which can influence various aspects of\n  // the way the node works.\n  //\n  // (Using subclassing for this was intentionally decided against,\n  // since it'd require exposing a whole slew of finicky\n  // implementation details to the user code that they probably will\n  // never need.)\n  static create(parent, node, outerDeco, innerDeco, view, pos) {\n    let custom = view.nodeViews[node.type.name], descObj\n    let spec = custom && custom(node, view, () => {\n      // (This is a function that allows the custom view to find its\n      // own position)\n      if (!descObj) return pos\n      if (descObj.parent) return descObj.parent.posBeforeChild(descObj)\n    }, outerDeco, innerDeco)\n\n    let dom = spec && spec.dom, contentDOM = spec && spec.contentDOM\n    if (node.isText) {\n      if (!dom) dom = document.createTextNode(node.text)\n      else if (dom.nodeType != 3) throw new RangeError(\"Text must be rendered as a DOM text node\")\n    } else if (!dom) {\n      ;({dom, contentDOM} = DOMSerializer.renderSpec(document, node.type.spec.toDOM(node)))\n    }\n    if (!contentDOM && !node.isText && dom.nodeName != \"BR\") { // Chrome gets confused by <br contenteditable=false>\n      if (!dom.hasAttribute(\"contenteditable\")) dom.contentEditable = false\n      if (node.type.spec.draggable) dom.draggable = true\n    }\n\n    let nodeDOM = dom\n    dom = applyOuterDeco(dom, outerDeco, node)\n\n    if (spec)\n      return descObj = new CustomNodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM,\n                                              spec, view, pos + 1)\n    else if (node.isText)\n      return new TextViewDesc(parent, node, outerDeco, innerDeco, dom, nodeDOM, view)\n    else\n      return new NodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos + 1)\n  }\n\n  parseRule() {\n    // Experimental kludge to allow opt-in re-parsing of nodes\n    if (this.node.type.spec.reparseInView) return null\n    // FIXME the assumption that this can always return the current\n    // attrs means that if the user somehow manages to change the\n    // attrs in the dom, that won't be picked up. Not entirely sure\n    // whether this is a problem\n    let rule = {node: this.node.type.name, attrs: this.node.attrs}\n    if (this.node.type.spec.code) rule.preserveWhitespace = \"full\"\n    if (this.contentDOM && !this.contentLost) rule.contentElement = this.contentDOM\n    else rule.getContent = () => this.contentDOM ? Fragment.empty : this.node.content\n    return rule\n  }\n\n  matchesNode(node, outerDeco, innerDeco) {\n    return this.dirty == NOT_DIRTY && node.eq(this.node) &&\n      sameOuterDeco(outerDeco, this.outerDeco) && innerDeco.eq(this.innerDeco)\n  }\n\n  get size() { return this.node.nodeSize }\n\n  get border() { return this.node.isLeaf ? 0 : 1 }\n\n  // Syncs `this.children` to match `this.node.content` and the local\n  // decorations, possibly introducing nesting for marks. Then, in a\n  // separate step, syncs the DOM inside `this.contentDOM` to\n  // `this.children`.\n  updateChildren(view, pos) {\n    let inline = this.node.inlineContent, off = pos\n    let composition = view.composing && this.localCompositionInfo(view, pos)\n    let localComposition = composition && composition.pos > -1 ? composition : null\n    let compositionInChild = composition && composition.pos < 0\n    let updater = new ViewTreeUpdater(this, localComposition && localComposition.node)\n    iterDeco(this.node, this.innerDeco, (widget, i, insideNode) => {\n      if (widget.spec.marks)\n        updater.syncToMarks(widget.spec.marks, inline, view)\n      else if (widget.type.side >= 0 && !insideNode)\n        updater.syncToMarks(i == this.node.childCount ? Mark.none : this.node.child(i).marks, inline, view)\n      // If the next node is a desc matching this widget, reuse it,\n      // otherwise insert the widget as a new view desc.\n      updater.placeWidget(widget, view, off)\n    }, (child, outerDeco, innerDeco, i) => {\n      // Make sure the wrapping mark descs match the node's marks.\n      updater.syncToMarks(child.marks, inline, view)\n      // Try several strategies for drawing this node\n      let compIndex\n      if (updater.findNodeMatch(child, outerDeco, innerDeco, i)) {\n        // Found precise match with existing node view\n      } else if (compositionInChild && view.state.selection.from > off &&\n                 view.state.selection.to < off + child.nodeSize &&\n                 (compIndex = updater.findIndexWithChild(composition.node)) > -1 &&\n                 updater.updateNodeAt(child, outerDeco, innerDeco, compIndex, view)) {\n        // Updated the specific node that holds the composition\n      } else if (updater.updateNextNode(child, outerDeco, innerDeco, view, i)) {\n        // Could update an existing node to reflect this node\n      } else {\n        // Add it as a new view\n        updater.addNode(child, outerDeco, innerDeco, view, off)\n      }\n      off += child.nodeSize\n    })\n    // Drop all remaining descs after the current position.\n    updater.syncToMarks(nothing, inline, view)\n    if (this.node.isTextblock) updater.addTextblockHacks()\n    updater.destroyRest()\n\n    // Sync the DOM if anything changed\n    if (updater.changed || this.dirty == CONTENT_DIRTY) {\n      // May have to protect focused DOM from being changed if a composition is active\n      if (localComposition) this.protectLocalComposition(view, localComposition)\n      renderDescs(this.contentDOM, this.children, view)\n      if (browser.ios) iosHacks(this.dom)\n    }\n  }\n\n  localCompositionInfo(view, pos) {\n    // Only do something if both the selection and a focused text node\n    // are inside of this node\n    let {from, to} = view.state.selection\n    if (!(view.state.selection instanceof TextSelection) || from < pos || to > pos + this.node.content.size) return\n    let sel = view.root.getSelection()\n    let textNode = nearbyTextNode(sel.focusNode, sel.focusOffset)\n    if (!textNode || !this.dom.contains(textNode.parentNode)) return\n\n    if (this.node.inlineContent) {\n      // Find the text in the focused node in the node, stop if it's not\n      // there (may have been modified through other means, in which\n      // case it should overwritten)\n      let text = textNode.nodeValue\n      let textPos = findTextInFragment(this.node.content, text, from - pos, to - pos)\n      return textPos < 0 ? null : {node: textNode, pos: textPos, text}\n    } else {\n      return {node: textNode, pos: -1}\n    }\n  }\n\n  protectLocalComposition(view, {node, pos, text}) {\n    // The node is already part of a local view desc, leave it there\n    if (this.getDesc(node)) return\n\n    // Create a composition view for the orphaned nodes\n    let topNode = node\n    for (;; topNode = topNode.parentNode) {\n      if (topNode.parentNode == this.contentDOM) break\n      while (topNode.previousSibling) topNode.parentNode.removeChild(topNode.previousSibling)\n      while (topNode.nextSibling) topNode.parentNode.removeChild(topNode.nextSibling)\n      if (topNode.pmViewDesc) topNode.pmViewDesc = null\n    }\n    let desc = new CompositionViewDesc(this, topNode, node, text)\n    view.compositionNodes.push(desc)\n\n    // Patch up this.children to contain the composition view\n    this.children = replaceNodes(this.children, pos, pos + text.length, view, desc)\n  }\n\n  // : (Node, [Decoration], DecorationSource, EditorView) \u2192 bool\n  // If this desc be updated to match the given node decoration,\n  // do so and return true.\n  update(node, outerDeco, innerDeco, view) {\n    if (this.dirty == NODE_DIRTY ||\n        !node.sameMarkup(this.node)) return false\n    this.updateInner(node, outerDeco, innerDeco, view)\n    return true\n  }\n\n  updateInner(node, outerDeco, innerDeco, view) {\n    this.updateOuterDeco(outerDeco)\n    this.node = node\n    this.innerDeco = innerDeco\n    if (this.contentDOM) this.updateChildren(view, this.posAtStart)\n    this.dirty = NOT_DIRTY\n  }\n\n  updateOuterDeco(outerDeco) {\n    if (sameOuterDeco(outerDeco, this.outerDeco)) return\n    let needsWrap = this.nodeDOM.nodeType != 1\n    let oldDOM = this.dom\n    this.dom = patchOuterDeco(this.dom, this.nodeDOM,\n                              computeOuterDeco(this.outerDeco, this.node, needsWrap),\n                              computeOuterDeco(outerDeco, this.node, needsWrap))\n    if (this.dom != oldDOM) {\n      oldDOM.pmViewDesc = null\n      this.dom.pmViewDesc = this\n    }\n    this.outerDeco = outerDeco\n  }\n\n  // Mark this node as being the selected node.\n  selectNode() {\n    this.nodeDOM.classList.add(\"ProseMirror-selectednode\")\n    if (this.contentDOM || !this.node.type.spec.draggable) this.dom.draggable = true\n  }\n\n  // Remove selected node marking from this node.\n  deselectNode() {\n    this.nodeDOM.classList.remove(\"ProseMirror-selectednode\")\n    if (this.contentDOM || !this.node.type.spec.draggable) this.dom.removeAttribute(\"draggable\")\n  }\n\n  get domAtom() { return this.node.isAtom }\n}\n\n// Create a view desc for the top-level document node, to be exported\n// and used by the view class.\nexport function docViewDesc(doc, outerDeco, innerDeco, dom, view) {\n  applyOuterDeco(dom, outerDeco, doc)\n  return new NodeViewDesc(null, doc, outerDeco, innerDeco, dom, dom, dom, view, 0)\n}\n\nclass TextViewDesc extends NodeViewDesc {\n  constructor(parent, node, outerDeco, innerDeco, dom, nodeDOM, view) {\n    super(parent, node, outerDeco, innerDeco, dom, null, nodeDOM, view)\n  }\n\n  parseRule() {\n    let skip = this.nodeDOM.parentNode\n    while (skip && skip != this.dom && !skip.pmIsDeco) skip = skip.parentNode\n    return {skip: skip || true}\n  }\n\n  update(node, outerDeco, _, view) {\n    if (this.dirty == NODE_DIRTY || (this.dirty != NOT_DIRTY && !this.inParent()) ||\n        !node.sameMarkup(this.node)) return false\n    this.updateOuterDeco(outerDeco)\n    if ((this.dirty != NOT_DIRTY || node.text != this.node.text) && node.text != this.nodeDOM.nodeValue) {\n      this.nodeDOM.nodeValue = node.text\n      if (view.trackWrites == this.nodeDOM) view.trackWrites = null\n    }\n    this.node = node\n    this.dirty = NOT_DIRTY\n    return true\n  }\n\n  inParent() {\n    let parentDOM = this.parent.contentDOM\n    for (let n = this.nodeDOM; n; n = n.parentNode) if (n == parentDOM) return true\n    return false\n  }\n\n  domFromPos(pos) {\n    return {node: this.nodeDOM, offset: pos}\n  }\n\n  localPosFromDOM(dom, offset, bias) {\n    if (dom == this.nodeDOM) return this.posAtStart + Math.min(offset, this.node.text.length)\n    return super.localPosFromDOM(dom, offset, bias)\n  }\n\n  ignoreMutation(mutation) {\n    return mutation.type != \"characterData\" && mutation.type != \"selection\"\n  }\n\n  slice(from, to, view) {\n    let node = this.node.cut(from, to), dom = document.createTextNode(node.text)\n    return new TextViewDesc(this.parent, node, this.outerDeco, this.innerDeco, dom, dom, view)\n  }\n\n  markDirty(from, to) {\n    super.markDirty(from, to)\n    if (this.dom != this.nodeDOM && (from == 0 || to == this.nodeDOM.nodeValue.length))\n      this.dirty = NODE_DIRTY\n  }\n\n  get domAtom() { return false }\n}\n\n// A dummy desc used to tag trailing BR or IMG nodes created to work\n// around contentEditable terribleness.\nclass TrailingHackViewDesc extends ViewDesc {\n  parseRule() { return {ignore: true} }\n  matchesHack(nodeName) { return this.dirty == NOT_DIRTY && this.dom.nodeName == nodeName }\n  get domAtom() { return true }\n  get ignoreForCoords() { return this.dom.nodeName == \"IMG\" }\n}\n\n// A separate subclass is used for customized node views, so that the\n// extra checks only have to be made for nodes that are actually\n// customized.\nclass CustomNodeViewDesc extends NodeViewDesc {\n  // : (?ViewDesc, Node, [Decoration], DecorationSource, dom.Node, ?dom.Node, NodeView, EditorView)\n  constructor(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, spec, view, pos) {\n    super(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos)\n    this.spec = spec\n  }\n\n  // A custom `update` method gets to decide whether the update goes\n  // through. If it does, and there's a `contentDOM` node, our logic\n  // updates the children.\n  update(node, outerDeco, innerDeco, view) {\n    if (this.dirty == NODE_DIRTY) return false\n    if (this.spec.update) {\n      let result = this.spec.update(node, outerDeco, innerDeco)\n      if (result) this.updateInner(node, outerDeco, innerDeco, view)\n      return result\n    } else if (!this.contentDOM && !node.isLeaf) {\n      return false\n    } else {\n      return super.update(node, outerDeco, innerDeco, view)\n    }\n  }\n\n  selectNode() {\n    this.spec.selectNode ? this.spec.selectNode() : super.selectNode()\n  }\n\n  deselectNode() {\n    this.spec.deselectNode ? this.spec.deselectNode() : super.deselectNode()\n  }\n\n  setSelection(anchor, head, root, force) {\n    this.spec.setSelection ? this.spec.setSelection(anchor, head, root)\n      : super.setSelection(anchor, head, root, force)\n  }\n\n  destroy() {\n    if (this.spec.destroy) this.spec.destroy()\n    super.destroy()\n  }\n\n  stopEvent(event) {\n    return this.spec.stopEvent ? this.spec.stopEvent(event) : false\n  }\n\n  ignoreMutation(mutation) {\n    return this.spec.ignoreMutation ? this.spec.ignoreMutation(mutation) : super.ignoreMutation(mutation)\n  }\n}\n\n// : (dom.Node, [ViewDesc])\n// Sync the content of the given DOM node with the nodes associated\n// with the given array of view descs, recursing into mark descs\n// because this should sync the subtree for a whole node at a time.\nfunction renderDescs(parentDOM, descs, view) {\n  let dom = parentDOM.firstChild, written = false\n  for (let i = 0; i < descs.length; i++) {\n    let desc = descs[i], childDOM = desc.dom\n    if (childDOM.parentNode == parentDOM) {\n      while (childDOM != dom) { dom = rm(dom); written = true }\n      dom = dom.nextSibling\n    } else {\n      written = true\n      parentDOM.insertBefore(childDOM, dom)\n    }\n    if (desc instanceof MarkViewDesc) {\n      let pos = dom ? dom.previousSibling : parentDOM.lastChild\n      renderDescs(desc.contentDOM, desc.children, view)\n      dom = pos ? pos.nextSibling : parentDOM.firstChild\n    }\n  }\n  while (dom) { dom = rm(dom); written = true }\n  if (written && view.trackWrites == parentDOM) view.trackWrites = null\n}\n\nfunction OuterDecoLevel(nodeName) {\n  if (nodeName) this.nodeName = nodeName\n}\nOuterDecoLevel.prototype = Object.create(null)\n\nconst noDeco = [new OuterDecoLevel]\n\nfunction computeOuterDeco(outerDeco, node, needsWrap) {\n  if (outerDeco.length == 0) return noDeco\n\n  let top = needsWrap ? noDeco[0] : new OuterDecoLevel, result = [top]\n\n  for (let i = 0; i < outerDeco.length; i++) {\n    let attrs = outerDeco[i].type.attrs\n    if (!attrs) continue\n    if (attrs.nodeName)\n      result.push(top = new OuterDecoLevel(attrs.nodeName))\n\n    for (let name in attrs) {\n      let val = attrs[name]\n      if (val == null) continue\n      if (needsWrap && result.length == 1)\n        result.push(top = new OuterDecoLevel(node.isInline ? \"span\" : \"div\"))\n      if (name == \"class\") top.class = (top.class ? top.class + \" \" : \"\") + val\n      else if (name == \"style\") top.style = (top.style ? top.style + \";\" : \"\") + val\n      else if (name != \"nodeName\") top[name] = val\n    }\n  }\n\n  return result\n}\n\nfunction patchOuterDeco(outerDOM, nodeDOM, prevComputed, curComputed) {\n  // Shortcut for trivial case\n  if (prevComputed == noDeco && curComputed == noDeco) return nodeDOM\n\n  let curDOM = nodeDOM\n  for (let i = 0; i < curComputed.length; i++) {\n    let deco = curComputed[i], prev = prevComputed[i]\n    if (i) {\n      let parent\n      if (prev && prev.nodeName == deco.nodeName && curDOM != outerDOM &&\n          (parent = curDOM.parentNode) && parent.tagName.toLowerCase() == deco.nodeName) {\n        curDOM = parent\n      } else {\n        parent = document.createElement(deco.nodeName)\n        parent.pmIsDeco = true\n        parent.appendChild(curDOM)\n        prev = noDeco[0]\n        curDOM = parent\n      }\n    }\n    patchAttributes(curDOM, prev || noDeco[0], deco)\n  }\n  return curDOM\n}\n\nfunction patchAttributes(dom, prev, cur) {\n  for (let name in prev)\n    if (name != \"class\" && name != \"style\" && name != \"nodeName\" && !(name in cur))\n      dom.removeAttribute(name)\n  for (let name in cur)\n    if (name != \"class\" && name != \"style\" && name != \"nodeName\" && cur[name] != prev[name])\n      dom.setAttribute(name, cur[name])\n  if (prev.class != cur.class) {\n    let prevList = prev.class ? prev.class.split(\" \").filter(Boolean) : nothing\n    let curList = cur.class ? cur.class.split(\" \").filter(Boolean) : nothing\n    for (let i = 0; i < prevList.length; i++) if (curList.indexOf(prevList[i]) == -1)\n      dom.classList.remove(prevList[i])\n    for (let i = 0; i < curList.length; i++) if (prevList.indexOf(curList[i]) == -1)\n      dom.classList.add(curList[i])\n    if (dom.classList.length == 0)\n      dom.removeAttribute(\"class\")\n  }\n  if (prev.style != cur.style) {\n    if (prev.style) {\n      let prop = /\\s*([\\w\\-\\xa1-\\uffff]+)\\s*:(?:\"(?:\\\\.|[^\"])*\"|'(?:\\\\.|[^'])*'|\\(.*?\\)|[^;])*/g, m\n      while (m = prop.exec(prev.style))\n        dom.style.removeProperty(m[1])\n    }\n    if (cur.style)\n      dom.style.cssText += cur.style\n  }\n}\n\nfunction applyOuterDeco(dom, deco, node) {\n  return patchOuterDeco(dom, dom, noDeco, computeOuterDeco(deco, node, dom.nodeType != 1))\n}\n\n// : ([Decoration], [Decoration]) \u2192 bool\nfunction sameOuterDeco(a, b) {\n  if (a.length != b.length) return false\n  for (let i = 0; i < a.length; i++) if (!a[i].type.eq(b[i].type)) return false\n  return true\n}\n\n// Remove a DOM node and return its next sibling.\nfunction rm(dom) {\n  let next = dom.nextSibling\n  dom.parentNode.removeChild(dom)\n  return next\n}\n\n// Helper class for incrementally updating a tree of mark descs and\n// the widget and node descs inside of them.\nclass ViewTreeUpdater {\n  // : (NodeViewDesc)\n  constructor(top, lockedNode) {\n    this.top = top\n    this.lock = lockedNode\n    // Index into `this.top`'s child array, represents the current\n    // update position.\n    this.index = 0\n    // When entering a mark, the current top and index are pushed\n    // onto this.\n    this.stack = []\n    // Tracks whether anything was changed\n    this.changed = false\n\n    this.preMatch = preMatch(top.node.content, top)\n  }\n\n  // Destroy and remove the children between the given indices in\n  // `this.top`.\n  destroyBetween(start, end) {\n    if (start == end) return\n    for (let i = start; i < end; i++) this.top.children[i].destroy()\n    this.top.children.splice(start, end - start)\n    this.changed = true\n  }\n\n  // Destroy all remaining children in `this.top`.\n  destroyRest() {\n    this.destroyBetween(this.index, this.top.children.length)\n  }\n\n  // : ([Mark], EditorView)\n  // Sync the current stack of mark descs with the given array of\n  // marks, reusing existing mark descs when possible.\n  syncToMarks(marks, inline, view) {\n    let keep = 0, depth = this.stack.length >> 1\n    let maxKeep = Math.min(depth, marks.length)\n    while (keep < maxKeep &&\n           (keep == depth - 1 ? this.top : this.stack[(keep + 1) << 1]).matchesMark(marks[keep]) && marks[keep].type.spec.spanning !== false)\n      keep++\n\n    while (keep < depth) {\n      this.destroyRest()\n      this.top.dirty = NOT_DIRTY\n      this.index = this.stack.pop()\n      this.top = this.stack.pop()\n      depth--\n    }\n    while (depth < marks.length) {\n      this.stack.push(this.top, this.index + 1)\n      let found = -1\n      for (let i = this.index; i < Math.min(this.index + 3, this.top.children.length); i++) {\n        if (this.top.children[i].matchesMark(marks[depth])) { found = i; break }\n      }\n      if (found > -1) {\n        if (found > this.index) {\n          this.changed = true\n          this.destroyBetween(this.index, found)\n        }\n        this.top = this.top.children[this.index]\n      } else {\n        let markDesc = MarkViewDesc.create(this.top, marks[depth], inline, view)\n        this.top.children.splice(this.index, 0, markDesc)\n        this.top = markDesc\n        this.changed = true\n      }\n      this.index = 0\n      depth++\n    }\n  }\n\n  // : (Node, [Decoration], DecorationSource) \u2192 bool\n  // Try to find a node desc matching the given data. Skip over it and\n  // return true when successful.\n  findNodeMatch(node, outerDeco, innerDeco, index) {\n    let found = -1, targetDesc\n    if (index >= this.preMatch.index &&\n        (targetDesc = this.preMatch.matches[index - this.preMatch.index]).parent == this.top &&\n        targetDesc.matchesNode(node, outerDeco, innerDeco)) {\n      found = this.top.children.indexOf(targetDesc, this.index)\n    } else {\n      for (let i = this.index, e = Math.min(this.top.children.length, i + 5); i < e; i++) {\n        let child = this.top.children[i]\n        if (child.matchesNode(node, outerDeco, innerDeco) && !this.preMatch.matched.has(child)) {\n          found = i\n          break\n        }\n      }\n    }\n    if (found < 0) return false\n    this.destroyBetween(this.index, found)\n    this.index++\n    return true\n  }\n\n  updateNodeAt(node, outerDeco, innerDeco, index, view) {\n    let child = this.top.children[index]\n    if (!child.update(node, outerDeco, innerDeco, view)) return false\n    this.destroyBetween(this.index, index)\n    this.index = index + 1\n    return true\n  }\n\n  findIndexWithChild(domNode) {\n    for (;;) {\n      let parent = domNode.parentNode\n      if (!parent) return -1\n      if (parent == this.top.contentDOM) {\n        let desc = domNode.pmViewDesc\n        if (desc) for (let i = this.index; i < this.top.children.length; i++) {\n          if (this.top.children[i] == desc) return i\n        }\n        return -1\n      }\n      domNode = parent\n    }\n  }\n\n  // : (Node, [Decoration], DecorationSource, EditorView, Fragment, number) \u2192 bool\n  // Try to update the next node, if any, to the given data. Checks\n  // pre-matches to avoid overwriting nodes that could still be used.\n  updateNextNode(node, outerDeco, innerDeco, view, index) {\n    for (let i = this.index; i < this.top.children.length; i++) {\n      let next = this.top.children[i]\n      if (next instanceof NodeViewDesc) {\n        let preMatch = this.preMatch.matched.get(next)\n        if (preMatch != null && preMatch != index) return false\n        let nextDOM = next.dom\n\n        // Can't update if nextDOM is or contains this.lock, except if\n        // it's a text node whose content already matches the new text\n        // and whose decorations match the new ones.\n        let locked = this.lock && (nextDOM == this.lock || nextDOM.nodeType == 1 && nextDOM.contains(this.lock.parentNode)) &&\n            !(node.isText && next.node && next.node.isText && next.nodeDOM.nodeValue == node.text &&\n              next.dirty != NODE_DIRTY && sameOuterDeco(outerDeco, next.outerDeco))\n        if (!locked && next.update(node, outerDeco, innerDeco, view)) {\n          this.destroyBetween(this.index, i)\n          if (next.dom != nextDOM) this.changed = true\n          this.index++\n          return true\n        }\n        break\n      }\n    }\n    return false\n  }\n\n  // : (Node, [Decoration], DecorationSource, EditorView)\n  // Insert the node as a newly created node desc.\n  addNode(node, outerDeco, innerDeco, view, pos) {\n    this.top.children.splice(this.index++, 0, NodeViewDesc.create(this.top, node, outerDeco, innerDeco, view, pos))\n    this.changed = true\n  }\n\n  placeWidget(widget, view, pos) {\n    let next = this.index < this.top.children.length ? this.top.children[this.index] : null\n    if (next && next.matchesWidget(widget) && (widget == next.widget || !next.widget.type.toDOM.parentNode)) {\n      this.index++\n    } else {\n      let desc = new WidgetViewDesc(this.top, widget, view, pos)\n      this.top.children.splice(this.index++, 0, desc)\n      this.changed = true\n    }\n  }\n\n  // Make sure a textblock looks and behaves correctly in\n  // contentEditable.\n  addTextblockHacks() {\n    let lastChild = this.top.children[this.index - 1]\n    while (lastChild instanceof MarkViewDesc) lastChild = lastChild.children[lastChild.children.length - 1]\n\n    if (!lastChild || // Empty textblock\n        !(lastChild instanceof TextViewDesc) ||\n        /\\n$/.test(lastChild.node.text)) {\n      // Avoid bugs in Safari's cursor drawing (#1165) and Chrome's mouse selection (#1152)\n      if ((browser.safari || browser.chrome) && lastChild && lastChild.dom.contentEditable == \"false\")\n        this.addHackNode(\"IMG\")\n      this.addHackNode(\"BR\")\n    }\n  }\n\n  addHackNode(nodeName) {\n    if (this.index < this.top.children.length && this.top.children[this.index].matchesHack(nodeName)) {\n      this.index++\n    } else {\n      let dom = document.createElement(nodeName)\n      if (nodeName == \"IMG\") dom.className = \"ProseMirror-separator\"\n      if (nodeName == \"BR\") dom.className = \"ProseMirror-trailingBreak\"\n      this.top.children.splice(this.index++, 0, new TrailingHackViewDesc(this.top, nothing, dom, null))\n      this.changed = true\n    }\n  }\n}\n\n// : (Fragment, [ViewDesc]) \u2192 {index: number, matched: Map<ViewDesc, number>, matches: ViewDesc[]}\n// Iterate from the end of the fragment and array of descs to find\n// directly matching ones, in order to avoid overeagerly reusing those\n// for other nodes. Returns the fragment index of the first node that\n// is part of the sequence of matched nodes at the end of the\n// fragment.\nfunction preMatch(frag, parentDesc) {\n  let curDesc = parentDesc, descI = curDesc.children.length\n  let fI = frag.childCount, matched = new Map, matches = []\n  outer: while (fI > 0) {\n    let desc\n    for (;;) {\n      if (descI) {\n        let next = curDesc.children[descI - 1]\n        if (next instanceof MarkViewDesc) {\n          curDesc = next\n          descI = next.children.length\n        } else {\n          desc = next\n          descI--\n          break\n        }\n      } else if (curDesc == parentDesc) {\n        break outer\n      } else {\n        // FIXME\n        descI = curDesc.parent.children.indexOf(curDesc)\n        curDesc = curDesc.parent\n      }\n    }\n    let node = desc.node\n    if (!node) continue\n    if (node != frag.child(fI - 1)) break\n    --fI\n    matched.set(desc, fI)\n    matches.push(desc)\n  }\n  return {index: fI, matched, matches: matches.reverse()}\n}\n\nfunction compareSide(a, b) { return a.type.side - b.type.side }\n\n// : (ViewDesc, DecorationSource, (Decoration, number), (Node, [Decoration], DecorationSource, number))\n// This function abstracts iterating over the nodes and decorations in\n// a fragment. Calls `onNode` for each node, with its local and child\n// decorations. Splits text nodes when there is a decoration starting\n// or ending inside of them. Calls `onWidget` for each widget.\nfunction iterDeco(parent, deco, onWidget, onNode) {\n  let locals = deco.locals(parent), offset = 0\n  // Simple, cheap variant for when there are no local decorations\n  if (locals.length == 0) {\n    for (let i = 0; i < parent.childCount; i++) {\n      let child = parent.child(i)\n      onNode(child, locals, deco.forChild(offset, child), i)\n      offset += child.nodeSize\n    }\n    return\n  }\n\n  let decoIndex = 0, active = [], restNode = null\n  for (let parentIndex = 0;;) {\n    if (decoIndex < locals.length && locals[decoIndex].to == offset) {\n      let widget = locals[decoIndex++], widgets\n      while (decoIndex < locals.length && locals[decoIndex].to == offset)\n        (widgets || (widgets = [widget])).push(locals[decoIndex++])\n      if (widgets) {\n        widgets.sort(compareSide)\n        for (let i = 0; i < widgets.length; i++) onWidget(widgets[i], parentIndex, !!restNode)\n      } else {\n        onWidget(widget, parentIndex, !!restNode)\n      }\n    }\n\n    let child, index\n    if (restNode) {\n      index = -1\n      child = restNode\n      restNode = null\n    } else if (parentIndex < parent.childCount) {\n      index = parentIndex\n      child = parent.child(parentIndex++)\n    } else {\n      break\n    }\n\n    for (let i = 0; i < active.length; i++) if (active[i].to <= offset) active.splice(i--, 1)\n    while (decoIndex < locals.length && locals[decoIndex].from <= offset && locals[decoIndex].to > offset)\n      active.push(locals[decoIndex++])\n\n    let end = offset + child.nodeSize\n    if (child.isText) {\n      let cutAt = end\n      if (decoIndex < locals.length && locals[decoIndex].from < cutAt) cutAt = locals[decoIndex].from\n      for (let i = 0; i < active.length; i++) if (active[i].to < cutAt) cutAt = active[i].to\n      if (cutAt < end) {\n        restNode = child.cut(cutAt - offset)\n        child = child.cut(0, cutAt - offset)\n        end = cutAt\n        index = -1\n      }\n    }\n\n    let outerDeco = !active.length ? nothing\n        : child.isInline && !child.isLeaf ? active.filter(d => !d.inline)\n        : active.slice()\n    onNode(child, outerDeco, deco.forChild(offset, child), index)\n    offset = end\n  }\n}\n\n// List markers in Mobile Safari will mysteriously disappear\n// sometimes. This works around that.\nfunction iosHacks(dom) {\n  if (dom.nodeName == \"UL\" || dom.nodeName == \"OL\") {\n    let oldCSS = dom.style.cssText\n    dom.style.cssText = oldCSS + \"; list-style: square !important\"\n    window.getComputedStyle(dom).listStyle\n    dom.style.cssText = oldCSS\n  }\n}\n\nfunction nearbyTextNode(node, offset) {\n  for (;;) {\n    if (node.nodeType == 3) return node\n    if (node.nodeType == 1 && offset > 0) {\n      if (node.childNodes.length > offset && node.childNodes[offset].nodeType == 3)\n        return node.childNodes[offset]\n      node = node.childNodes[offset - 1]\n      offset = nodeSize(node)\n    } else if (node.nodeType == 1 && offset < node.childNodes.length) {\n      node = node.childNodes[offset]\n      offset = 0\n    } else {\n      return null\n    }\n  }\n}\n\n// Find a piece of text in an inline fragment, overlapping from-to\nfunction findTextInFragment(frag, text, from, to) {\n  for (let i = 0, pos = 0; i < frag.childCount && pos <= to;) {\n    let child = frag.child(i++), childStart = pos\n    pos += child.nodeSize\n    if (!child.isText) continue\n    let str = child.text\n    while (i < frag.childCount) {\n      let next = frag.child(i++)\n      pos += next.nodeSize\n      if (!next.isText) break\n      str += next.text\n    }\n    if (pos >= from) {\n      let found = str.lastIndexOf(text, to - childStart)\n      if (found >= 0 && found + text.length + childStart >= from)\n        return childStart + found\n    }\n  }\n  return -1\n}\n\n// Replace range from-to in an array of view descs with replacement\n// (may be null to just delete). This goes very much against the grain\n// of the rest of this code, which tends to create nodes with the\n// right shape in one go, rather than messing with them after\n// creation, but is necessary in the composition hack.\nfunction replaceNodes(nodes, from, to, view, replacement) {\n  let result = []\n  for (let i = 0, off = 0; i < nodes.length; i++) {\n    let child = nodes[i], start = off, end = off += child.size\n    if (start >= to || end <= from) {\n      result.push(child)\n    } else {\n      if (start < from) result.push(child.slice(0, from - start, view))\n      if (replacement) {\n        result.push(replacement)\n        replacement = null\n      }\n      if (end > to) result.push(child.slice(to - start, child.size, view))\n    }\n  }\n  return result\n}\n", "import {TextSelection, NodeSelection} from \"prosemirror-state\"\n\nimport browser from \"./browser\"\nimport {selectionCollapsed, isEquivalentPosition, domIndex, isOnEdge} from \"./dom\"\n\nexport function selectionFromDOM(view, origin) {\n  let domSel = view.root.getSelection(), doc = view.state.doc\n  if (!domSel.focusNode) return null\n  let nearestDesc = view.docView.nearestDesc(domSel.focusNode), inWidget = nearestDesc && nearestDesc.size == 0\n  let head = view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset)\n  if (head < 0) return null\n  let $head = doc.resolve(head), $anchor, selection\n  if (selectionCollapsed(domSel)) {\n    $anchor = $head\n    while (nearestDesc && !nearestDesc.node) nearestDesc = nearestDesc.parent\n    if (nearestDesc && nearestDesc.node.isAtom && NodeSelection.isSelectable(nearestDesc.node) && nearestDesc.parent\n        && !(nearestDesc.node.isInline && isOnEdge(domSel.focusNode, domSel.focusOffset, nearestDesc.dom))) {\n      let pos = nearestDesc.posBefore\n      selection = new NodeSelection(head == pos ? $head : doc.resolve(pos))\n    }\n  } else {\n    let anchor = view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset)\n    if (anchor < 0) return null\n    $anchor = doc.resolve(anchor)\n  }\n\n  if (!selection) {\n    let bias = origin == \"pointer\" || (view.state.selection.head < $head.pos && !inWidget) ? 1 : -1\n    selection = selectionBetween(view, $anchor, $head, bias)\n  }\n  return selection\n}\n\nfunction editorOwnsSelection(view) {\n  return view.editable ? view.hasFocus() :\n    hasSelection(view) && document.activeElement && document.activeElement.contains(view.dom)\n}\n\nexport function selectionToDOM(view, force) {\n  let sel = view.state.selection\n  syncNodeSelection(view, sel)\n\n  if (!editorOwnsSelection(view)) return\n\n  if (!force && view.mouseDown && view.mouseDown.allowDefault) {\n    view.mouseDown.delayedSelectionSync = true\n    view.domObserver.setCurSelection()\n    return\n  }\n\n  view.domObserver.disconnectSelection()\n\n  if (view.cursorWrapper) {\n    selectCursorWrapper(view)\n  } else {\n    let {anchor, head} = sel, resetEditableFrom, resetEditableTo\n    if (brokenSelectBetweenUneditable && !(sel instanceof TextSelection)) {\n      if (!sel.$from.parent.inlineContent)\n        resetEditableFrom = temporarilyEditableNear(view, sel.from)\n      if (!sel.empty && !sel.$from.parent.inlineContent)\n        resetEditableTo = temporarilyEditableNear(view, sel.to)\n    }\n    view.docView.setSelection(anchor, head, view.root, force)\n    if (brokenSelectBetweenUneditable) {\n      if (resetEditableFrom) resetEditable(resetEditableFrom)\n      if (resetEditableTo) resetEditable(resetEditableTo)\n    }\n    if (sel.visible) {\n      view.dom.classList.remove(\"ProseMirror-hideselection\")\n    } else {\n      view.dom.classList.add(\"ProseMirror-hideselection\")\n      if (\"onselectionchange\" in document) removeClassOnSelectionChange(view)\n    }\n  }\n\n  view.domObserver.setCurSelection()\n  view.domObserver.connectSelection()\n}\n\n// Kludge to work around Webkit not allowing a selection to start/end\n// between non-editable block nodes. We briefly make something\n// editable, set the selection, then set it uneditable again.\n\nconst brokenSelectBetweenUneditable = browser.safari || browser.chrome && browser.chrome_version < 63\n\nfunction temporarilyEditableNear(view, pos) {\n  let {node, offset} = view.docView.domFromPos(pos, 0)\n  let after = offset < node.childNodes.length ? node.childNodes[offset] : null\n  let before = offset ? node.childNodes[offset - 1] : null\n  if (browser.safari && after && after.contentEditable == \"false\") return setEditable(after)\n  if ((!after || after.contentEditable == \"false\") && (!before || before.contentEditable == \"false\")) {\n    if (after) return setEditable(after)\n    else if (before) return setEditable(before)\n  }\n}\n\nfunction setEditable(element) {\n  element.contentEditable = \"true\"\n  if (browser.safari && element.draggable) { element.draggable = false; element.wasDraggable = true }\n  return element\n}\n\nfunction resetEditable(element) {\n  element.contentEditable = \"false\"\n  if (element.wasDraggable) { element.draggable = true; element.wasDraggable = null }\n}\n\nfunction removeClassOnSelectionChange(view) {\n  let doc = view.dom.ownerDocument\n  doc.removeEventListener(\"selectionchange\", view.hideSelectionGuard)\n  let domSel = view.root.getSelection()\n  let node = domSel.anchorNode, offset = domSel.anchorOffset\n  doc.addEventListener(\"selectionchange\", view.hideSelectionGuard = () => {\n    if (domSel.anchorNode != node || domSel.anchorOffset != offset) {\n      doc.removeEventListener(\"selectionchange\", view.hideSelectionGuard)\n      setTimeout(() => {\n        if (!editorOwnsSelection(view) || view.state.selection.visible)\n          view.dom.classList.remove(\"ProseMirror-hideselection\")\n      }, 20)\n    }\n  })\n}\n\nfunction selectCursorWrapper(view) {\n  let domSel = view.root.getSelection(), range = document.createRange()\n  let node = view.cursorWrapper.dom, img = node.nodeName == \"IMG\"\n  if (img) range.setEnd(node.parentNode, domIndex(node) + 1)\n  else range.setEnd(node, 0)\n  range.collapse(false)\n  domSel.removeAllRanges()\n  domSel.addRange(range)\n  // Kludge to kill 'control selection' in IE11 when selecting an\n  // invisible cursor wrapper, since that would result in those weird\n  // resize handles and a selection that considers the absolutely\n  // positioned wrapper, rather than the root editable node, the\n  // focused element.\n  if (!img && !view.state.selection.visible && browser.ie && browser.ie_version <= 11) {\n    node.disabled = true\n    node.disabled = false\n  }\n}\n\nexport function syncNodeSelection(view, sel) {\n  if (sel instanceof NodeSelection) {\n    let desc = view.docView.descAt(sel.from)\n    if (desc != view.lastSelectedViewDesc) {\n      clearNodeSelection(view)\n      if (desc) desc.selectNode()\n      view.lastSelectedViewDesc = desc\n    }\n  } else {\n    clearNodeSelection(view)\n  }\n}\n\n// Clear all DOM statefulness of the last node selection.\nfunction clearNodeSelection(view) {\n  if (view.lastSelectedViewDesc) {\n    if (view.lastSelectedViewDesc.parent)\n      view.lastSelectedViewDesc.deselectNode()\n    view.lastSelectedViewDesc = null\n  }\n}\n\nexport function selectionBetween(view, $anchor, $head, bias) {\n  return view.someProp(\"createSelectionBetween\", f => f(view, $anchor, $head))\n    || TextSelection.between($anchor, $head, bias)\n}\n\nexport function hasFocusAndSelection(view) {\n  if (view.editable && view.root.activeElement != view.dom) return false\n  return hasSelection(view)\n}\n\nexport function hasSelection(view) {\n  let sel = view.root.getSelection()\n  if (!sel.anchorNode) return false\n  try {\n    // Firefox will raise 'permission denied' errors when accessing\n    // properties of `sel.anchorNode` when it's in a generated CSS\n    // element.\n    return view.dom.contains(sel.anchorNode.nodeType == 3 ? sel.anchorNode.parentNode : sel.anchorNode) &&\n      (view.editable || view.dom.contains(sel.focusNode.nodeType == 3 ? sel.focusNode.parentNode : sel.focusNode))\n  } catch(_) {\n    return false\n  }\n}\n\nexport function anchorInRightPlace(view) {\n  let anchorDOM = view.docView.domFromPos(view.state.selection.anchor, 0)\n  let domSel = view.root.getSelection()\n  return isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset)\n}\n", "import {Selection, NodeSelection, TextSelection, AllSelection} from \"prosemirror-state\"\nimport browser from \"./browser\"\nimport {domIndex, selectionCollapsed} from \"./dom\"\nimport {selectionToDOM} from \"./selection\"\n\nfunction moveSelectionBlock(state, dir) {\n  let {$anchor, $head} = state.selection\n  let $side = dir > 0 ? $anchor.max($head) : $anchor.min($head)\n  let $start = !$side.parent.inlineContent ? $side : $side.depth ? state.doc.resolve(dir > 0 ? $side.after() : $side.before()) : null\n  return $start && Selection.findFrom($start, dir)\n}\n\nfunction apply(view, sel) {\n  view.dispatch(view.state.tr.setSelection(sel).scrollIntoView())\n  return true\n}\n\nfunction selectHorizontally(view, dir, mods) {\n  let sel = view.state.selection\n  if (sel instanceof TextSelection) {\n    if (!sel.empty || mods.indexOf(\"s\") > -1) {\n      return false\n    } else if (view.endOfTextblock(dir > 0 ? \"right\" : \"left\")) {\n      let next = moveSelectionBlock(view.state, dir)\n      if (next && (next instanceof NodeSelection)) return apply(view, next)\n      return false\n    } else if (!(browser.mac && mods.indexOf(\"m\") > -1)) {\n      let $head = sel.$head, node = $head.textOffset ? null : dir < 0 ? $head.nodeBefore : $head.nodeAfter, desc\n      if (!node || node.isText) return false\n      let nodePos = dir < 0 ? $head.pos - node.nodeSize : $head.pos\n      if (!(node.isAtom || (desc = view.docView.descAt(nodePos)) && !desc.contentDOM)) return false\n      if (NodeSelection.isSelectable(node)) {\n        return apply(view, new NodeSelection(dir < 0 ? view.state.doc.resolve($head.pos - node.nodeSize) : $head))\n      } else if (browser.webkit) {\n        // Chrome and Safari will introduce extra pointless cursor\n        // positions around inline uneditable nodes, so we have to\n        // take over and move the cursor past them (#937)\n        return apply(view, new TextSelection(view.state.doc.resolve(dir < 0 ? nodePos : nodePos + node.nodeSize)))\n      } else {\n        return false\n      }\n    }\n  } else if (sel instanceof NodeSelection && sel.node.isInline) {\n    return apply(view, new TextSelection(dir > 0 ? sel.$to : sel.$from))\n  } else {\n    let next = moveSelectionBlock(view.state, dir)\n    if (next) return apply(view, next)\n    return false\n  }\n}\n\nfunction nodeLen(node) {\n  return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length\n}\n\nfunction isIgnorable(dom) {\n  let desc = dom.pmViewDesc\n  return desc && desc.size == 0 && (dom.nextSibling || dom.nodeName != \"BR\")\n}\n\n// Make sure the cursor isn't directly after one or more ignored\n// nodes, which will confuse the browser's cursor motion logic.\nfunction skipIgnoredNodesLeft(view) {\n  let sel = view.root.getSelection()\n  let node = sel.focusNode, offset = sel.focusOffset\n  if (!node) return\n  let moveNode, moveOffset, force = false\n  // Gecko will do odd things when the selection is directly in front\n  // of a non-editable node, so in that case, move it into the next\n  // node if possible. Issue prosemirror/prosemirror#832.\n  if (browser.gecko && node.nodeType == 1 && offset < nodeLen(node) && isIgnorable(node.childNodes[offset])) force = true\n  for (;;) {\n    if (offset > 0) {\n      if (node.nodeType != 1) {\n        break\n      } else {\n        let before = node.childNodes[offset - 1]\n        if (isIgnorable(before)) {\n          moveNode = node\n          moveOffset = --offset\n        } else if (before.nodeType == 3) {\n          node = before\n          offset = node.nodeValue.length\n        } else break\n      }\n    } else if (isBlockNode(node)) {\n      break\n    } else {\n      let prev = node.previousSibling\n      while (prev && isIgnorable(prev)) {\n        moveNode = node.parentNode\n        moveOffset = domIndex(prev)\n        prev = prev.previousSibling\n      }\n      if (!prev) {\n        node = node.parentNode\n        if (node == view.dom) break\n        offset = 0\n      } else {\n        node = prev\n        offset = nodeLen(node)\n      }\n    }\n  }\n  if (force) setSelFocus(view, sel, node, offset)\n  else if (moveNode) setSelFocus(view, sel, moveNode, moveOffset)\n}\n\n// Make sure the cursor isn't directly before one or more ignored\n// nodes.\nfunction skipIgnoredNodesRight(view) {\n  let sel = view.root.getSelection()\n  let node = sel.focusNode, offset = sel.focusOffset\n  if (!node) return\n  let len = nodeLen(node)\n  let moveNode, moveOffset\n  for (;;) {\n    if (offset < len) {\n      if (node.nodeType != 1) break\n      let after = node.childNodes[offset]\n      if (isIgnorable(after)) {\n        moveNode = node\n        moveOffset = ++offset\n      }\n      else break\n    } else if (isBlockNode(node)) {\n      break\n    } else {\n      let next = node.nextSibling\n      while (next && isIgnorable(next)) {\n        moveNode = next.parentNode\n        moveOffset = domIndex(next) + 1\n        next = next.nextSibling\n      }\n      if (!next) {\n        node = node.parentNode\n        if (node == view.dom) break\n        offset = len = 0\n      } else {\n        node = next\n        offset = 0\n        len = nodeLen(node)\n      }\n    }\n  }\n  if (moveNode) setSelFocus(view, sel, moveNode, moveOffset)\n}\n\nfunction isBlockNode(dom) {\n  let desc = dom.pmViewDesc\n  return desc && desc.node && desc.node.isBlock\n}\n\nfunction setSelFocus(view, sel, node, offset) {\n  if (selectionCollapsed(sel)) {\n    let range = document.createRange()\n    range.setEnd(node, offset)\n    range.setStart(node, offset)\n    sel.removeAllRanges()\n    sel.addRange(range)\n  } else if (sel.extend) {\n    sel.extend(node, offset)\n  }\n  view.domObserver.setCurSelection()\n  let {state} = view\n  // If no state update ends up happening, reset the selection.\n  setTimeout(() => {\n    if (view.state == state) selectionToDOM(view)\n  }, 50)\n}\n\n// : (EditorState, number)\n// Check whether vertical selection motion would involve node\n// selections. If so, apply it (if not, the result is left to the\n// browser)\nfunction selectVertically(view, dir, mods) {\n  let sel = view.state.selection\n  if (sel instanceof TextSelection && !sel.empty || mods.indexOf(\"s\") > -1) return false\n  if (browser.mac && mods.indexOf(\"m\") > -1) return false\n  let {$from, $to} = sel\n\n  if (!$from.parent.inlineContent || view.endOfTextblock(dir < 0 ? \"up\" : \"down\")) {\n    let next = moveSelectionBlock(view.state, dir)\n    if (next && (next instanceof NodeSelection))\n      return apply(view, next)\n  }\n  if (!$from.parent.inlineContent) {\n    let side = dir < 0 ? $from : $to\n    let beyond = sel instanceof AllSelection ? Selection.near(side, dir) : Selection.findFrom(side, dir)\n    return beyond ? apply(view, beyond) : false\n  }\n  return false\n}\n\nfunction stopNativeHorizontalDelete(view, dir) {\n  if (!(view.state.selection instanceof TextSelection)) return true\n  let {$head, $anchor, empty} = view.state.selection\n  if (!$head.sameParent($anchor)) return true\n  if (!empty) return false\n  if (view.endOfTextblock(dir > 0 ? \"forward\" : \"backward\")) return true\n  let nextNode = !$head.textOffset && (dir < 0 ? $head.nodeBefore : $head.nodeAfter)\n  if (nextNode && !nextNode.isText) {\n    let tr = view.state.tr\n    if (dir < 0) tr.delete($head.pos - nextNode.nodeSize, $head.pos)\n    else tr.delete($head.pos, $head.pos + nextNode.nodeSize)\n    view.dispatch(tr)\n    return true\n  }\n  return false\n}\n\nfunction switchEditable(view, node, state) {\n  view.domObserver.stop()\n  node.contentEditable = state\n  view.domObserver.start()\n}\n\n// Issue #867 / #1090 / https://bugs.chromium.org/p/chromium/issues/detail?id=903821\n// In which Safari (and at some point in the past, Chrome) does really\n// wrong things when the down arrow is pressed when the cursor is\n// directly at the start of a textblock and has an uneditable node\n// after it\nfunction safariDownArrowBug(view) {\n  if (!browser.safari || view.state.selection.$head.parentOffset > 0) return\n  let {focusNode, focusOffset} = view.root.getSelection()\n  if (focusNode && focusNode.nodeType == 1 && focusOffset == 0 &&\n      focusNode.firstChild && focusNode.firstChild.contentEditable == \"false\") {\n    let child = focusNode.firstChild\n    switchEditable(view, child, true)\n    setTimeout(() => switchEditable(view, child, false), 20)\n  }\n}\n\n// A backdrop key mapping used to make sure we always suppress keys\n// that have a dangerous default effect, even if the commands they are\n// bound to return false, and to make sure that cursor-motion keys\n// find a cursor (as opposed to a node selection) when pressed. For\n// cursor-motion keys, the code in the handlers also takes care of\n// block selections.\n\nfunction getMods(event) {\n  let result = \"\"\n  if (event.ctrlKey) result += \"c\"\n  if (event.metaKey) result += \"m\"\n  if (event.altKey) result += \"a\"\n  if (event.shiftKey) result += \"s\"\n  return result\n}\n\nexport function captureKeyDown(view, event) {\n  let code = event.keyCode, mods = getMods(event)\n  if (code == 8 || (browser.mac && code == 72 && mods == \"c\")) { // Backspace, Ctrl-h on Mac\n    return stopNativeHorizontalDelete(view, -1) || skipIgnoredNodesLeft(view)\n  } else if (code == 46 || (browser.mac && code == 68 && mods == \"c\")) { // Delete, Ctrl-d on Mac\n    return stopNativeHorizontalDelete(view, 1) || skipIgnoredNodesRight(view)\n  } else if (code == 13 || code == 27) { // Enter, Esc\n    return true\n  } else if (code == 37) { // Left arrow\n    return selectHorizontally(view, -1, mods) || skipIgnoredNodesLeft(view)\n  } else if (code == 39) { // Right arrow\n    return selectHorizontally(view, 1, mods) || skipIgnoredNodesRight(view)\n  } else if (code == 38) { // Up arrow\n    return selectVertically(view, -1, mods) || skipIgnoredNodesLeft(view)\n  } else if (code == 40) { // Down arrow\n    return safariDownArrowBug(view) || selectVertically(view, 1, mods) || skipIgnoredNodesRight(view)\n  } else if (mods == (browser.mac ? \"m\" : \"c\") &&\n             (code == 66 || code == 73 || code == 89 || code == 90)) { // Mod-[biyz]\n    return true\n  }\n  return false\n}\n", "import {Fragment, DOMParser} from \"prosemirror-model\"\nimport {Selection, TextSelection} from \"prosemirror-state\"\n\nimport {selectionBetween, selectionFromDOM, selectionToDOM} from \"./selection\"\nimport {selectionCollapsed, keyEvent} from \"./dom\"\nimport browser from \"./browser\"\n\n// Note that all referencing and parsing is done with the\n// start-of-operation selection and document, since that's the one\n// that the DOM represents. If any changes came in in the meantime,\n// the modification is mapped over those before it is applied, in\n// readDOMChange.\n\nfunction parseBetween(view, from_, to_) {\n  let {node: parent, fromOffset, toOffset, from, to} = view.docView.parseRange(from_, to_)\n\n  let domSel = view.root.getSelection(), find = null, anchor = domSel.anchorNode\n  if (anchor && view.dom.contains(anchor.nodeType == 1 ? anchor : anchor.parentNode)) {\n    find = [{node: anchor, offset: domSel.anchorOffset}]\n    if (!selectionCollapsed(domSel))\n      find.push({node: domSel.focusNode, offset: domSel.focusOffset})\n  }\n  // Work around issue in Chrome where backspacing sometimes replaces\n  // the deleted content with a random BR node (issues #799, #831)\n  if (browser.chrome && view.lastKeyCode === 8) {\n    for (let off = toOffset; off > fromOffset; off--) {\n      let node = parent.childNodes[off - 1], desc = node.pmViewDesc\n      if (node.nodeName == \"BR\" && !desc) { toOffset = off; break }\n      if (!desc || desc.size) break\n    }\n  }\n  let startDoc = view.state.doc\n  let parser = view.someProp(\"domParser\") || DOMParser.fromSchema(view.state.schema)\n  let $from = startDoc.resolve(from)\n\n  let sel = null, doc = parser.parse(parent, {\n    topNode: $from.parent,\n    topMatch: $from.parent.contentMatchAt($from.index()),\n    topOpen: true,\n    from: fromOffset,\n    to: toOffset,\n    preserveWhitespace: $from.parent.type.spec.code ? \"full\" : true,\n    editableContent: true,\n    findPositions: find,\n    ruleFromNode,\n    context: $from\n  })\n  if (find && find[0].pos != null) {\n    let anchor = find[0].pos, head = find[1] && find[1].pos\n    if (head == null) head = anchor\n    sel = {anchor: anchor + from, head: head + from}\n  }\n  return {doc, sel, from, to}\n}\n\nfunction ruleFromNode(dom) {\n  let desc = dom.pmViewDesc\n  if (desc) {\n    return desc.parseRule()\n  } else if (dom.nodeName == \"BR\" && dom.parentNode) {\n    // Safari replaces the list item or table cell with a BR\n    // directly in the list node (?!) if you delete the last\n    // character in a list item or table cell (#708, #862)\n    if (browser.safari && /^(ul|ol)$/i.test(dom.parentNode.nodeName)) {\n      let skip = document.createElement(\"div\")\n      skip.appendChild(document.createElement(\"li\"))\n      return {skip}\n    } else if (dom.parentNode.lastChild == dom || browser.safari && /^(tr|table)$/i.test(dom.parentNode.nodeName)) {\n      return {ignore: true}\n    }\n  } else if (dom.nodeName == \"IMG\" && dom.getAttribute(\"mark-placeholder\")) {\n    return {ignore: true}\n  }\n}\n\nexport function readDOMChange(view, from, to, typeOver, addedNodes) {\n  if (from < 0) {\n    let origin = view.lastSelectionTime > Date.now() - 50 ? view.lastSelectionOrigin : null\n    let newSel = selectionFromDOM(view, origin)\n    if (newSel && !view.state.selection.eq(newSel)) {\n      let tr = view.state.tr.setSelection(newSel)\n      if (origin == \"pointer\") tr.setMeta(\"pointer\", true)\n      else if (origin == \"key\") tr.scrollIntoView()\n      view.dispatch(tr)\n    }\n    return\n  }\n\n  let $before = view.state.doc.resolve(from)\n  let shared = $before.sharedDepth(to)\n  from = $before.before(shared + 1)\n  to = view.state.doc.resolve(to).after(shared + 1)\n\n  let sel = view.state.selection\n  let parse = parseBetween(view, from, to)\n  // Chrome sometimes leaves the cursor before the inserted text when\n  // composing after a cursor wrapper. This moves it forward.\n  if (browser.chrome && view.cursorWrapper && parse.sel && parse.sel.anchor == view.cursorWrapper.deco.from) {\n    let text = view.cursorWrapper.deco.type.toDOM.nextSibling\n    let size = text && text.nodeValue ? text.nodeValue.length : 1\n    parse.sel = {anchor: parse.sel.anchor + size, head: parse.sel.anchor + size}\n  }\n\n  let doc = view.state.doc, compare = doc.slice(parse.from, parse.to)\n  let preferredPos, preferredSide\n  // Prefer anchoring to end when Backspace is pressed\n  if (view.lastKeyCode === 8 && Date.now() - 100 < view.lastKeyCodeTime) {\n    preferredPos = view.state.selection.to\n    preferredSide = \"end\"\n  } else {\n    preferredPos = view.state.selection.from\n    preferredSide = \"start\"\n  }\n  view.lastKeyCode = null\n\n  let change = findDiff(compare.content, parse.doc.content, parse.from, preferredPos, preferredSide)\n  if (!change) {\n    if (typeOver && sel instanceof TextSelection && !sel.empty && sel.$head.sameParent(sel.$anchor) &&\n        !view.composing && !(parse.sel && parse.sel.anchor != parse.sel.head)) {\n      change = {start: sel.from, endA: sel.to, endB: sel.to}\n    } else if ((browser.ios && view.lastIOSEnter > Date.now() - 225 || browser.android) &&\n               addedNodes.some(n => n.nodeName == \"DIV\" || n.nodeName == \"P\") &&\n               view.someProp(\"handleKeyDown\", f => f(view, keyEvent(13, \"Enter\")))) {\n      view.lastIOSEnter = 0\n      return\n    } else {\n      if (parse.sel) {\n        let sel = resolveSelection(view, view.state.doc, parse.sel)\n        if (sel && !sel.eq(view.state.selection)) view.dispatch(view.state.tr.setSelection(sel))\n      }\n      return\n    }\n  }\n  view.domChangeCount++\n  // Handle the case where overwriting a selection by typing matches\n  // the start or end of the selected content, creating a change\n  // that's smaller than what was actually overwritten.\n  if (view.state.selection.from < view.state.selection.to &&\n      change.start == change.endB &&\n      view.state.selection instanceof TextSelection) {\n    if (change.start > view.state.selection.from && change.start <= view.state.selection.from + 2) {\n      change.start = view.state.selection.from\n    } else if (change.endA < view.state.selection.to && change.endA >= view.state.selection.to - 2) {\n      change.endB += (view.state.selection.to - change.endA)\n      change.endA = view.state.selection.to\n    }\n  }\n\n  // IE11 will insert a non-breaking space _ahead_ of the space after\n  // the cursor space when adding a space before another space. When\n  // that happened, adjust the change to cover the space instead.\n  if (browser.ie && browser.ie_version <= 11 && change.endB == change.start + 1 &&\n      change.endA == change.start && change.start > parse.from &&\n      parse.doc.textBetween(change.start - parse.from - 1, change.start - parse.from + 1) == \" \\u00a0\") {\n    change.start--\n    change.endA--\n    change.endB--\n  }\n\n  let $from = parse.doc.resolveNoCache(change.start - parse.from)\n  let $to = parse.doc.resolveNoCache(change.endB - parse.from)\n  let inlineChange = $from.sameParent($to) && $from.parent.inlineContent\n  let nextSel\n  // If this looks like the effect of pressing Enter (or was recorded\n  // as being an iOS enter press), just dispatch an Enter key instead.\n  if (((browser.ios && view.lastIOSEnter > Date.now() - 225 &&\n        (!inlineChange || addedNodes.some(n => n.nodeName == \"DIV\" || n.nodeName == \"P\"))) ||\n       (!inlineChange && $from.pos < parse.doc.content.size &&\n        (nextSel = Selection.findFrom(parse.doc.resolve($from.pos + 1), 1, true)) &&\n        nextSel.head == $to.pos)) &&\n      view.someProp(\"handleKeyDown\", f => f(view, keyEvent(13, \"Enter\")))) {\n    view.lastIOSEnter = 0\n    return\n  }\n  // Same for backspace\n  if (view.state.selection.anchor > change.start &&\n      looksLikeJoin(doc, change.start, change.endA, $from, $to) &&\n      view.someProp(\"handleKeyDown\", f => f(view, keyEvent(8, \"Backspace\")))) {\n    if (browser.android && browser.chrome) view.domObserver.suppressSelectionUpdates() // #820\n    return\n  }\n\n  // Chrome Android will occasionally, during composition, delete the\n  // entire composition and then immediately insert it again. This is\n  // used to detect that situation.\n  if (browser.chrome && browser.android && change.toB == change.from)\n    view.lastAndroidDelete = Date.now()\n\n  // This tries to detect Android virtual keyboard\n  // enter-and-pick-suggestion action. That sometimes (see issue\n  // #1059) first fires a DOM mutation, before moving the selection to\n  // the newly created block. And then, because ProseMirror cleans up\n  // the DOM selection, it gives up moving the selection entirely,\n  // leaving the cursor in the wrong place. When that happens, we drop\n  // the new paragraph from the initial change, and fire a simulated\n  // enter key afterwards.\n  if (browser.android && !inlineChange && $from.start() != $to.start() && $to.parentOffset == 0 && $from.depth == $to.depth &&\n      parse.sel && parse.sel.anchor == parse.sel.head && parse.sel.head == change.endA) {\n    change.endB -= 2\n    $to = parse.doc.resolveNoCache(change.endB - parse.from)\n    setTimeout(() => {\n      view.someProp(\"handleKeyDown\", function (f) { return f(view, keyEvent(13, \"Enter\")); })\n    }, 20)\n  }\n\n  let chFrom = change.start, chTo = change.endA\n\n  let tr, storedMarks, markChange, $from1\n  if (inlineChange) {\n    if ($from.pos == $to.pos) { // Deletion\n      // IE11 sometimes weirdly moves the DOM selection around after\n      // backspacing out the first element in a textblock\n      if (browser.ie && browser.ie_version <= 11 && $from.parentOffset == 0) {\n        view.domObserver.suppressSelectionUpdates()\n        setTimeout(() => selectionToDOM(view), 20)\n      }\n      tr = view.state.tr.delete(chFrom, chTo)\n      storedMarks = doc.resolve(change.start).marksAcross(doc.resolve(change.endA))\n    } else if ( // Adding or removing a mark\n      change.endA == change.endB && ($from1 = doc.resolve(change.start)) &&\n      (markChange = isMarkChange($from.parent.content.cut($from.parentOffset, $to.parentOffset),\n                                 $from1.parent.content.cut($from1.parentOffset, change.endA - $from1.start())))\n    ) {\n      tr = view.state.tr\n      if (markChange.type == \"add\") tr.addMark(chFrom, chTo, markChange.mark)\n      else tr.removeMark(chFrom, chTo, markChange.mark)\n    } else if ($from.parent.child($from.index()).isText && $from.index() == $to.index() - ($to.textOffset ? 0 : 1)) {\n      // Both positions in the same text node -- simply insert text\n      let text = $from.parent.textBetween($from.parentOffset, $to.parentOffset)\n      if (view.someProp(\"handleTextInput\", f => f(view, chFrom, chTo, text))) return\n      tr = view.state.tr.insertText(text, chFrom, chTo)\n    }\n  }\n\n  if (!tr)\n    tr = view.state.tr.replace(chFrom, chTo, parse.doc.slice(change.start - parse.from, change.endB - parse.from))\n  if (parse.sel) {\n    let sel = resolveSelection(view, tr.doc, parse.sel)\n    // Chrome Android will sometimes, during composition, report the\n    // selection in the wrong place. If it looks like that is\n    // happening, don't update the selection.\n    // Edge just doesn't move the cursor forward when you start typing\n    // in an empty block or between br nodes.\n    if (sel && !(browser.chrome && browser.android && view.composing && sel.empty &&\n                 (change.start != change.endB || view.lastAndroidDelete < Date.now() - 100) &&\n                 (sel.head == chFrom || sel.head == tr.mapping.map(chTo) - 1) ||\n                 browser.ie && sel.empty && sel.head == chFrom))\n      tr.setSelection(sel)\n  }\n  if (storedMarks) tr.ensureMarks(storedMarks)\n  view.dispatch(tr.scrollIntoView())\n}\n\nfunction resolveSelection(view, doc, parsedSel) {\n  if (Math.max(parsedSel.anchor, parsedSel.head) > doc.content.size) return null\n  return selectionBetween(view, doc.resolve(parsedSel.anchor), doc.resolve(parsedSel.head))\n}\n\n// : (Fragment, Fragment) \u2192 ?{mark: Mark, type: string}\n// Given two same-length, non-empty fragments of inline content,\n// determine whether the first could be created from the second by\n// removing or adding a single mark type.\nfunction isMarkChange(cur, prev) {\n  let curMarks = cur.firstChild.marks, prevMarks = prev.firstChild.marks\n  let added = curMarks, removed = prevMarks, type, mark, update\n  for (let i = 0; i < prevMarks.length; i++) added = prevMarks[i].removeFromSet(added)\n  for (let i = 0; i < curMarks.length; i++) removed = curMarks[i].removeFromSet(removed)\n  if (added.length == 1 && removed.length == 0) {\n    mark = added[0]\n    type = \"add\"\n    update = node => node.mark(mark.addToSet(node.marks))\n  } else if (added.length == 0 && removed.length == 1) {\n    mark = removed[0]\n    type = \"remove\"\n    update = node => node.mark(mark.removeFromSet(node.marks))\n  } else {\n    return null\n  }\n  let updated = []\n  for (let i = 0; i < prev.childCount; i++) updated.push(update(prev.child(i)))\n  if (Fragment.from(updated).eq(cur)) return {mark, type}\n}\n\nfunction looksLikeJoin(old, start, end, $newStart, $newEnd) {\n  if (!$newStart.parent.isTextblock ||\n      // The content must have shrunk\n      end - start <= $newEnd.pos - $newStart.pos ||\n      // newEnd must point directly at or after the end of the block that newStart points into\n      skipClosingAndOpening($newStart, true, false) < $newEnd.pos)\n    return false\n\n  let $start = old.resolve(start)\n  // Start must be at the end of a block\n  if ($start.parentOffset < $start.parent.content.size || !$start.parent.isTextblock)\n    return false\n  let $next = old.resolve(skipClosingAndOpening($start, true, true))\n  // The next textblock must start before end and end near it\n  if (!$next.parent.isTextblock || $next.pos > end ||\n      skipClosingAndOpening($next, true, false) < end)\n    return false\n\n  // The fragments after the join point must match\n  return $newStart.parent.content.cut($newStart.parentOffset).eq($next.parent.content)\n}\n\nfunction skipClosingAndOpening($pos, fromEnd, mayOpen) {\n  let depth = $pos.depth, end = fromEnd ? $pos.end() : $pos.pos\n  while (depth > 0 && (fromEnd || $pos.indexAfter(depth) == $pos.node(depth).childCount)) {\n    depth--\n    end++\n    fromEnd = false\n  }\n  if (mayOpen) {\n    let next = $pos.node(depth).maybeChild($pos.indexAfter(depth))\n    while (next && !next.isLeaf) {\n      next = next.firstChild\n      end++\n    }\n  }\n  return end\n}\n\nfunction findDiff(a, b, pos, preferredPos, preferredSide) {\n  let start = a.findDiffStart(b, pos)\n  if (start == null) return null\n  let {a: endA, b: endB} = a.findDiffEnd(b, pos + a.size, pos + b.size)\n  if (preferredSide == \"end\") {\n    let adjust = Math.max(0, start - Math.min(endA, endB))\n    preferredPos -= endA + adjust - start\n  }\n  if (endA < start && a.size < b.size) {\n    let move = preferredPos <= start && preferredPos >= endA ? start - preferredPos : 0\n    start -= move\n    endB = start + (endB - endA)\n    endA = start\n  } else if (endB < start) {\n    let move = preferredPos <= start && preferredPos >= endB ? start - preferredPos : 0\n    start -= move\n    endA = start + (endA - endB)\n    endB = start\n  }\n  return {start, endA, endB}\n}\n", "import {Slice, Fragment, DOMParser, DOMSerializer} from \"prosemirror-model\"\nimport browser from \"./browser\"\n\nexport function serializeForClipboard(view, slice) {\n  let context = [], {content, openStart, openEnd} = slice\n  while (openStart > 1 && openEnd > 1 && content.childCount == 1 && content.firstChild.childCount == 1) {\n    openStart--\n    openEnd--\n    let node = content.firstChild\n    context.push(node.type.name, node.attrs != node.type.defaultAttrs ? node.attrs : null)\n    content = node.content\n  }\n\n  let serializer = view.someProp(\"clipboardSerializer\") || DOMSerializer.fromSchema(view.state.schema)\n  let doc = detachedDoc(), wrap = doc.createElement(\"div\")\n  wrap.appendChild(serializer.serializeFragment(content, {document: doc}))\n\n  let firstChild = wrap.firstChild, needsWrap\n  while (firstChild && firstChild.nodeType == 1 && (needsWrap = wrapMap[firstChild.nodeName.toLowerCase()])) {\n    for (let i = needsWrap.length - 1; i >= 0; i--) {\n      let wrapper = doc.createElement(needsWrap[i])\n      while (wrap.firstChild) wrapper.appendChild(wrap.firstChild)\n      wrap.appendChild(wrapper)\n      if (needsWrap[i] != \"tbody\") {\n        openStart++\n        openEnd++\n      }\n    }\n    firstChild = wrap.firstChild\n  }\n\n  if (firstChild && firstChild.nodeType == 1)\n    firstChild.setAttribute(\"data-pm-slice\", `${openStart} ${openEnd} ${JSON.stringify(context)}`)\n\n  let text = view.someProp(\"clipboardTextSerializer\", f => f(slice)) ||\n      slice.content.textBetween(0, slice.content.size, \"\\n\\n\")\n\n  return {dom: wrap, text}\n}\n\n// : (EditorView, string, string, ?bool, ResolvedPos) \u2192 ?Slice\n// Read a slice of content from the clipboard (or drop data).\nexport function parseFromClipboard(view, text, html, plainText, $context) {\n  let dom, inCode = $context.parent.type.spec.code, slice\n  if (!html && !text) return null\n  let asText = text && (plainText || inCode || !html)\n  if (asText) {\n    view.someProp(\"transformPastedText\", f => { text = f(text, inCode || plainText) })\n    if (inCode) return text ? new Slice(Fragment.from(view.state.schema.text(text.replace(/\\r\\n?/g, \"\\n\"))), 0, 0) : Slice.empty\n    let parsed = view.someProp(\"clipboardTextParser\", f => f(text, $context, plainText))\n    if (parsed) {\n      slice = parsed\n    } else {\n      let marks = $context.marks()\n      let {schema} = view.state, serializer = DOMSerializer.fromSchema(schema)\n      dom = document.createElement(\"div\")\n      text.split(/(?:\\r\\n?|\\n)+/).forEach(block => {\n        let p = dom.appendChild(document.createElement(\"p\"))\n        if (block) p.appendChild(serializer.serializeNode(schema.text(block, marks)))\n      })\n    }\n  } else {\n    view.someProp(\"transformPastedHTML\", f => { html = f(html) })\n    dom = readHTML(html)\n    if (browser.webkit) restoreReplacedSpaces(dom)\n  }\n\n  let contextNode = dom && dom.querySelector(\"[data-pm-slice]\")\n  let sliceData = contextNode && /^(\\d+) (\\d+) (.*)/.exec(contextNode.getAttribute(\"data-pm-slice\"))\n  if (!slice) {\n    let parser = view.someProp(\"clipboardParser\") || view.someProp(\"domParser\") || DOMParser.fromSchema(view.state.schema)\n    slice = parser.parseSlice(dom, {\n      preserveWhitespace: !!(asText || sliceData),\n      context: $context,\n      ruleFromNode(dom) {\n        if (dom.nodeName == \"BR\" && !dom.nextSibling) return {ignore: true}\n      }\n    })\n  }\n  if (sliceData) {\n    slice = addContext(closeSlice(slice, +sliceData[1], +sliceData[2]), sliceData[3])\n  } else { // HTML wasn't created by ProseMirror. Make sure top-level siblings are coherent\n    slice = Slice.maxOpen(normalizeSiblings(slice.content, $context), true)\n    if (slice.openStart || slice.openEnd) {\n      let openStart = 0, openEnd = 0\n      for (let node = slice.content.firstChild; openStart < slice.openStart && !node.type.spec.isolating;\n           openStart++, node = node.firstChild) {}\n      for (let node = slice.content.lastChild; openEnd < slice.openEnd && !node.type.spec.isolating;\n           openEnd++, node = node.lastChild) {}\n      slice = closeSlice(slice, openStart, openEnd)\n    }\n  }\n\n  view.someProp(\"transformPasted\", f => { slice = f(slice) })\n  return slice\n}\n\n// Takes a slice parsed with parseSlice, which means there hasn't been\n// any content-expression checking done on the top nodes, tries to\n// find a parent node in the current context that might fit the nodes,\n// and if successful, rebuilds the slice so that it fits into that parent.\n//\n// This addresses the problem that Transform.replace expects a\n// coherent slice, and will fail to place a set of siblings that don't\n// fit anywhere in the schema.\nfunction normalizeSiblings(fragment, $context) {\n  if (fragment.childCount < 2) return fragment\n  for (let d = $context.depth; d >= 0; d--) {\n    let parent = $context.node(d)\n    let match = parent.contentMatchAt($context.index(d))\n    let lastWrap, result = []\n    fragment.forEach(node => {\n      if (!result) return\n      let wrap = match.findWrapping(node.type), inLast\n      if (!wrap) return result = null\n      if (inLast = result.length && lastWrap.length && addToSibling(wrap, lastWrap, node, result[result.length - 1], 0)) {\n        result[result.length - 1] = inLast\n      } else {\n        if (result.length) result[result.length - 1] = closeRight(result[result.length - 1], lastWrap.length)\n        let wrapped = withWrappers(node, wrap)\n        result.push(wrapped)\n        match = match.matchType(wrapped.type, wrapped.attrs)\n        lastWrap = wrap\n      }\n    })\n    if (result) return Fragment.from(result)\n  }\n  return fragment\n}\n\nfunction withWrappers(node, wrap, from = 0) {\n  for (let i = wrap.length - 1; i >= from; i--)\n    node = wrap[i].create(null, Fragment.from(node))\n  return node\n}\n\n// Used to group adjacent nodes wrapped in similar parents by\n// normalizeSiblings into the same parent node\nfunction addToSibling(wrap, lastWrap, node, sibling, depth) {\n  if (depth < wrap.length && depth < lastWrap.length && wrap[depth] == lastWrap[depth]) {\n    let inner = addToSibling(wrap, lastWrap, node, sibling.lastChild, depth + 1)\n    if (inner) return sibling.copy(sibling.content.replaceChild(sibling.childCount - 1, inner))\n    let match = sibling.contentMatchAt(sibling.childCount)\n    if (match.matchType(depth == wrap.length - 1 ? node.type : wrap[depth + 1]))\n      return sibling.copy(sibling.content.append(Fragment.from(withWrappers(node, wrap, depth + 1))))\n  }\n}\n\nfunction closeRight(node, depth) {\n  if (depth == 0) return node\n  let fragment = node.content.replaceChild(node.childCount - 1, closeRight(node.lastChild, depth - 1))\n  let fill = node.contentMatchAt(node.childCount).fillBefore(Fragment.empty, true)\n  return node.copy(fragment.append(fill))\n}\n\nfunction closeRange(fragment, side, from, to, depth, openEnd) {\n  let node = side < 0 ? fragment.firstChild : fragment.lastChild, inner = node.content\n  if (depth < to - 1) inner = closeRange(inner, side, from, to, depth + 1, openEnd)\n  if (depth >= from)\n    inner = side < 0 ? node.contentMatchAt(0).fillBefore(inner, fragment.childCount > 1 || openEnd <= depth).append(inner)\n      : inner.append(node.contentMatchAt(node.childCount).fillBefore(Fragment.empty, true))\n  return fragment.replaceChild(side < 0 ? 0 : fragment.childCount - 1, node.copy(inner))\n}\n\nfunction closeSlice(slice, openStart, openEnd) {\n  if (openStart < slice.openStart)\n    slice = new Slice(closeRange(slice.content, -1, openStart, slice.openStart, 0, slice.openEnd), openStart, slice.openEnd)\n  if (openEnd < slice.openEnd)\n    slice = new Slice(closeRange(slice.content, 1, openEnd, slice.openEnd, 0, 0), slice.openStart, openEnd)\n  return slice\n}\n\n// Trick from jQuery -- some elements must be wrapped in other\n// elements for innerHTML to work. I.e. if you do `div.innerHTML =\n// \"<td>..</td>\"` the table cells are ignored.\nconst wrapMap = {\n  thead: [\"table\"],\n  tbody: [\"table\"],\n  tfoot: [\"table\"],\n  caption: [\"table\"],\n  colgroup: [\"table\"],\n  col: [\"table\", \"colgroup\"],\n  tr: [\"table\", \"tbody\"],\n  td: [\"table\", \"tbody\", \"tr\"],\n  th: [\"table\", \"tbody\", \"tr\"]\n}\n\nlet _detachedDoc = null\nfunction detachedDoc() {\n  return _detachedDoc || (_detachedDoc = document.implementation.createHTMLDocument(\"title\"))\n}\n\nfunction readHTML(html) {\n  let metas = /^(\\s*<meta [^>]*>)*/.exec(html)\n  if (metas) html = html.slice(metas[0].length)\n  let elt = detachedDoc().createElement(\"div\")\n  let firstTag = /<([a-z][^>\\s]+)/i.exec(html), wrap\n  if (wrap = firstTag && wrapMap[firstTag[1].toLowerCase()])\n    html = wrap.map(n => \"<\" + n + \">\").join(\"\") + html + wrap.map(n => \"</\" + n + \">\").reverse().join(\"\")\n  elt.innerHTML = html\n  if (wrap) for (let i = 0; i < wrap.length; i++) elt = elt.querySelector(wrap[i]) || elt\n  return elt\n}\n\n// Webkit browsers do some hard-to-predict replacement of regular\n// spaces with non-breaking spaces when putting content on the\n// clipboard. This tries to convert such non-breaking spaces (which\n// will be wrapped in a plain span on Chrome, a span with class\n// Apple-converted-space on Safari) back to regular spaces.\nfunction restoreReplacedSpaces(dom) {\n  let nodes = dom.querySelectorAll(browser.chrome ? \"span:not([class]):not([style])\" : \"span.Apple-converted-space\")\n  for (let i = 0; i < nodes.length; i++) {\n    let node = nodes[i]\n    if (node.childNodes.length == 1 && node.textContent == \"\\u00a0\" && node.parentNode)\n      node.parentNode.replaceChild(dom.ownerDocument.createTextNode(\" \"), node)\n  }\n}\n\nfunction addContext(slice, context) {\n  if (!slice.size) return slice\n  let schema = slice.content.firstChild.type.schema, array\n  try { array = JSON.parse(context) }\n  catch(e) { return slice }\n  let {content, openStart, openEnd} = slice\n  for (let i = array.length - 2; i >= 0; i -= 2) {\n    let type = schema.nodes[array[i]]\n    if (!type || type.hasRequiredAttrs()) break\n    content = Fragment.from(type.create(array[i + 1], content))\n    openStart++; openEnd++\n  }\n  return new Slice(content, openStart, openEnd)\n}\n", "import browser from \"./browser\"\nimport {domIndex, isEquivalentPosition} from \"./dom\"\nimport {hasFocusAndSelection, hasSelection, selectionToDOM} from \"./selection\"\n\nconst observeOptions = {\n  childList: true,\n  characterData: true,\n  characterDataOldValue: true,\n  attributes: true,\n  attributeOldValue: true,\n  subtree: true\n}\n// IE11 has very broken mutation observers, so we also listen to DOMCharacterDataModified\nconst useCharData = browser.ie && browser.ie_version <= 11\n\nclass SelectionState {\n  constructor() {\n    this.anchorNode = this.anchorOffset = this.focusNode = this.focusOffset = null\n  }\n\n  set(sel) {\n    this.anchorNode = sel.anchorNode; this.anchorOffset = sel.anchorOffset\n    this.focusNode = sel.focusNode; this.focusOffset = sel.focusOffset\n  }\n\n  eq(sel) {\n    return sel.anchorNode == this.anchorNode && sel.anchorOffset == this.anchorOffset &&\n      sel.focusNode == this.focusNode && sel.focusOffset == this.focusOffset\n  }\n}\n\nexport class DOMObserver {\n  constructor(view, handleDOMChange) {\n    this.view = view\n    this.handleDOMChange = handleDOMChange\n    this.queue = []\n    this.flushingSoon = -1\n    this.observer = window.MutationObserver &&\n      new window.MutationObserver(mutations => {\n        for (let i = 0; i < mutations.length; i++) this.queue.push(mutations[i])\n        // IE11 will sometimes (on backspacing out a single character\n        // text node after a BR node) call the observer callback\n        // before actually updating the DOM, which will cause\n        // ProseMirror to miss the change (see #930)\n        if (browser.ie && browser.ie_version <= 11 && mutations.some(\n          m => m.type == \"childList\" && m.removedNodes.length ||\n               m.type == \"characterData\" && m.oldValue.length > m.target.nodeValue.length))\n          this.flushSoon()\n        else\n          this.flush()\n      })\n    this.currentSelection = new SelectionState\n    if (useCharData) {\n      this.onCharData = e => {\n        this.queue.push({target: e.target, type: \"characterData\", oldValue: e.prevValue})\n        this.flushSoon()\n      }\n    }\n    this.onSelectionChange = this.onSelectionChange.bind(this)\n    this.suppressingSelectionUpdates = false\n  }\n\n  flushSoon() {\n    if (this.flushingSoon < 0)\n      this.flushingSoon = window.setTimeout(() => { this.flushingSoon = -1; this.flush() }, 20)\n  }\n\n  forceFlush() {\n    if (this.flushingSoon > -1) {\n      window.clearTimeout(this.flushingSoon)\n      this.flushingSoon = -1\n      this.flush()\n    }\n  }\n\n  start() {\n    if (this.observer)\n      this.observer.observe(this.view.dom, observeOptions)\n    if (useCharData)\n      this.view.dom.addEventListener(\"DOMCharacterDataModified\", this.onCharData)\n    this.connectSelection()\n  }\n\n  stop() {\n    if (this.observer) {\n      let take = this.observer.takeRecords()\n      if (take.length) {\n        for (let i = 0; i < take.length; i++) this.queue.push(take[i])\n        window.setTimeout(() => this.flush(), 20)\n      }\n      this.observer.disconnect()\n    }\n    if (useCharData) this.view.dom.removeEventListener(\"DOMCharacterDataModified\", this.onCharData)\n    this.disconnectSelection()\n  }\n\n  connectSelection() {\n    this.view.dom.ownerDocument.addEventListener(\"selectionchange\", this.onSelectionChange)\n  }\n\n  disconnectSelection() {\n    this.view.dom.ownerDocument.removeEventListener(\"selectionchange\", this.onSelectionChange)\n  }\n\n  suppressSelectionUpdates() {\n    this.suppressingSelectionUpdates = true\n    setTimeout(() => this.suppressingSelectionUpdates = false, 50)\n  }\n\n  onSelectionChange() {\n    if (!hasFocusAndSelection(this.view)) return\n    if (this.suppressingSelectionUpdates) return selectionToDOM(this.view)\n    // Deletions on IE11 fire their events in the wrong order, giving\n    // us a selection change event before the DOM changes are\n    // reported.\n    if (browser.ie && browser.ie_version <= 11 && !this.view.state.selection.empty) {\n      let sel = this.view.root.getSelection()\n      // Selection.isCollapsed isn't reliable on IE\n      if (sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))\n        return this.flushSoon()\n    }\n    this.flush()\n  }\n\n  setCurSelection() {\n    this.currentSelection.set(this.view.root.getSelection())\n  }\n\n  ignoreSelectionChange(sel) {\n    if (sel.rangeCount == 0) return true\n    let container = sel.getRangeAt(0).commonAncestorContainer\n    let desc = this.view.docView.nearestDesc(container)\n    if (desc && desc.ignoreMutation({type: \"selection\", target: container.nodeType == 3 ? container.parentNode : container})) {\n      this.setCurSelection()\n      return true\n    }\n  }\n\n  flush() {\n    if (!this.view.docView || this.flushingSoon > -1) return\n    let mutations = this.observer ? this.observer.takeRecords() : []\n    if (this.queue.length) {\n      mutations = this.queue.concat(mutations)\n      this.queue.length = 0\n    }\n\n    let sel = this.view.root.getSelection()\n    let newSel = !this.suppressingSelectionUpdates && !this.currentSelection.eq(sel) && hasSelection(this.view) && !this.ignoreSelectionChange(sel)\n\n    let from = -1, to = -1, typeOver = false, added = []\n    if (this.view.editable) {\n      for (let i = 0; i < mutations.length; i++) {\n        let result = this.registerMutation(mutations[i], added)\n        if (result) {\n          from = from < 0 ? result.from : Math.min(result.from, from)\n          to = to < 0 ? result.to : Math.max(result.to, to)\n          if (result.typeOver) typeOver = true\n        }\n      }\n    }\n\n    if (browser.gecko && added.length > 1) {\n      let brs = added.filter(n => n.nodeName == \"BR\")\n      if (brs.length == 2) {\n        let [a, b] = brs\n        if (a.parentNode && a.parentNode.parentNode == b.parentNode) b.remove()\n        else a.remove()\n      }\n    }\n\n    if (from > -1 || newSel) {\n      if (from > -1) {\n        this.view.docView.markDirty(from, to)\n        checkCSS(this.view)\n      }\n      this.handleDOMChange(from, to, typeOver, added)\n      if (this.view.docView.dirty) this.view.updateState(this.view.state)\n      else if (!this.currentSelection.eq(sel)) selectionToDOM(this.view)\n      this.currentSelection.set(sel)\n    }\n  }\n\n  registerMutation(mut, added) {\n    // Ignore mutations inside nodes that were already noted as inserted\n    if (added.indexOf(mut.target) > -1) return null\n    let desc = this.view.docView.nearestDesc(mut.target)\n    if (mut.type == \"attributes\" &&\n        (desc == this.view.docView || mut.attributeName == \"contenteditable\" ||\n         // Firefox sometimes fires spurious events for null/empty styles\n         (mut.attributeName == \"style\" && !mut.oldValue && !mut.target.getAttribute(\"style\"))))\n      return null\n    if (!desc || desc.ignoreMutation(mut)) return null\n\n    if (mut.type == \"childList\") {\n      for (let i = 0; i < mut.addedNodes.length; i++) added.push(mut.addedNodes[i])\n      if (desc.contentDOM && desc.contentDOM != desc.dom && !desc.contentDOM.contains(mut.target))\n        return {from: desc.posBefore, to: desc.posAfter}\n      let prev = mut.previousSibling, next = mut.nextSibling\n      if (browser.ie && browser.ie_version <= 11 && mut.addedNodes.length) {\n        // IE11 gives us incorrect next/prev siblings for some\n        // insertions, so if there are added nodes, recompute those\n        for (let i = 0; i < mut.addedNodes.length; i++) {\n          let {previousSibling, nextSibling} = mut.addedNodes[i]\n          if (!previousSibling || Array.prototype.indexOf.call(mut.addedNodes, previousSibling) < 0) prev = previousSibling\n          if (!nextSibling || Array.prototype.indexOf.call(mut.addedNodes, nextSibling) < 0) next = nextSibling\n        }\n      }\n      let fromOffset = prev && prev.parentNode == mut.target\n          ? domIndex(prev) + 1 : 0\n      let from = desc.localPosFromDOM(mut.target, fromOffset, -1)\n      let toOffset = next && next.parentNode == mut.target\n          ? domIndex(next) : mut.target.childNodes.length\n      let to = desc.localPosFromDOM(mut.target, toOffset, 1)\n      return {from, to}\n    } else if (mut.type == \"attributes\") {\n      return {from: desc.posAtStart - desc.border, to: desc.posAtEnd + desc.border}\n    } else { // \"characterData\"\n      return {\n        from: desc.posAtStart,\n        to: desc.posAtEnd,\n        // An event was generated for a text change that didn't change\n        // any text. Mark the dom change to fall back to assuming the\n        // selection was typed over with an identical value if it can't\n        // find another change.\n        typeOver: mut.target.nodeValue == mut.oldValue\n      }\n    }\n  }\n}\n\nlet cssChecked = false\n\nfunction checkCSS(view) {\n  if (cssChecked) return\n  cssChecked = true\n  if (getComputedStyle(view.dom).whiteSpace == \"normal\")\n    console[\"warn\"](\"ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package.\")\n}\n", "import {Selection, NodeSelection, TextSelection} from \"prosemirror-state\"\nimport {dropPoint} from \"prosemirror-transform\"\nimport {Slice} from \"prosemirror-model\"\n\nimport browser from \"./browser\"\nimport {captureKeyDown} from \"./capturekeys\"\nimport {readDOMChange} from \"./domchange\"\nimport {parseFromClipboard, serializeForClipboard} from \"./clipboard\"\nimport {DOMObserver} from \"./domobserver\"\nimport {selectionBetween, selectionToDOM, selectionFromDOM} from \"./selection\"\nimport {keyEvent} from \"./dom\"\n\n// A collection of DOM events that occur within the editor, and callback functions\n// to invoke when the event fires.\nconst handlers = {}, editHandlers = {}\n\nexport function initInput(view) {\n  view.shiftKey = false\n  view.mouseDown = null\n  view.lastKeyCode = null\n  view.lastKeyCodeTime = 0\n  view.lastClick = {time: 0, x: 0, y: 0, type: \"\"}\n  view.lastSelectionOrigin = null\n  view.lastSelectionTime = 0\n\n  view.lastIOSEnter = 0\n  view.lastIOSEnterFallbackTimeout = null\n  view.lastAndroidDelete = 0\n\n  view.composing = false\n  view.composingTimeout = null\n  view.compositionNodes = []\n  view.compositionEndedAt = -2e8\n\n  view.domObserver = new DOMObserver(view, (from, to, typeOver, added) => readDOMChange(view, from, to, typeOver, added))\n  view.domObserver.start()\n  // Used by hacks like the beforeinput handler to check whether anything happened in the DOM\n  view.domChangeCount = 0\n\n  view.eventHandlers = Object.create(null)\n  for (let event in handlers) {\n    let handler = handlers[event]\n    view.dom.addEventListener(event, view.eventHandlers[event] = event => {\n      if (eventBelongsToView(view, event) && !runCustomHandler(view, event) &&\n          (view.editable || !(event.type in editHandlers)))\n        handler(view, event)\n    })\n  }\n  // On Safari, for reasons beyond my understanding, adding an input\n  // event handler makes an issue where the composition vanishes when\n  // you press enter go away.\n  if (browser.safari) view.dom.addEventListener(\"input\", () => null)\n\n  ensureListeners(view)\n}\n\nfunction setSelectionOrigin(view, origin) {\n  view.lastSelectionOrigin = origin\n  view.lastSelectionTime = Date.now()\n}\n\nexport function destroyInput(view) {\n  view.domObserver.stop()\n  for (let type in view.eventHandlers)\n    view.dom.removeEventListener(type, view.eventHandlers[type])\n  clearTimeout(view.composingTimeout)\n  clearTimeout(view.lastIOSEnterFallbackTimeout)\n}\n\nexport function ensureListeners(view) {\n  view.someProp(\"handleDOMEvents\", currentHandlers => {\n    for (let type in currentHandlers) if (!view.eventHandlers[type])\n      view.dom.addEventListener(type, view.eventHandlers[type] = event => runCustomHandler(view, event))\n  })\n}\n\nfunction runCustomHandler(view, event) {\n  return view.someProp(\"handleDOMEvents\", handlers => {\n    let handler = handlers[event.type]\n    return handler ? handler(view, event) || event.defaultPrevented : false\n  })\n}\n\nfunction eventBelongsToView(view, event) {\n  if (!event.bubbles) return true\n  if (event.defaultPrevented) return false\n  for (let node = event.target; node != view.dom; node = node.parentNode)\n    if (!node || node.nodeType == 11 ||\n        (node.pmViewDesc && node.pmViewDesc.stopEvent(event)))\n      return false\n  return true\n}\n\nexport function dispatchEvent(view, event) {\n  if (!runCustomHandler(view, event) && handlers[event.type] &&\n      (view.editable || !(event.type in editHandlers)))\n    handlers[event.type](view, event)\n}\n\neditHandlers.keydown = (view, event) => {\n  view.shiftKey = event.keyCode == 16 || event.shiftKey\n  if (inOrNearComposition(view, event)) return\n  if (event.keyCode != 229) view.domObserver.forceFlush()\n  view.lastKeyCode = event.keyCode\n  view.lastKeyCodeTime = Date.now()\n  // On iOS, if we preventDefault enter key presses, the virtual\n  // keyboard gets confused. So the hack here is to set a flag that\n  // makes the DOM change code recognize that what just happens should\n  // be replaced by whatever the Enter key handlers do.\n  if (browser.ios && event.keyCode == 13 && !event.ctrlKey && !event.altKey && !event.metaKey) {\n    let now = Date.now()\n    view.lastIOSEnter = now\n    view.lastIOSEnterFallbackTimeout = setTimeout(() => {\n      if (view.lastIOSEnter == now) {\n        view.someProp(\"handleKeyDown\", f => f(view, keyEvent(13, \"Enter\")))\n        view.lastIOSEnter = 0\n      }\n    }, 200)\n  } else if (view.someProp(\"handleKeyDown\", f => f(view, event)) || captureKeyDown(view, event)) {\n    event.preventDefault()\n  } else {\n    setSelectionOrigin(view, \"key\")\n  }\n}\n\neditHandlers.keyup = (view, e) => {\n  if (e.keyCode == 16) view.shiftKey = false\n}\n\neditHandlers.keypress = (view, event) => {\n  if (inOrNearComposition(view, event) || !event.charCode ||\n      event.ctrlKey && !event.altKey || browser.mac && event.metaKey) return\n\n  if (view.someProp(\"handleKeyPress\", f => f(view, event))) {\n    event.preventDefault()\n    return\n  }\n\n  let sel = view.state.selection\n  if (!(sel instanceof TextSelection) || !sel.$from.sameParent(sel.$to)) {\n    let text = String.fromCharCode(event.charCode)\n    if (!view.someProp(\"handleTextInput\", f => f(view, sel.$from.pos, sel.$to.pos, text)))\n      view.dispatch(view.state.tr.insertText(text).scrollIntoView())\n    event.preventDefault()\n  }\n}\n\nfunction eventCoords(event) { return {left: event.clientX, top: event.clientY} }\n\nfunction isNear(event, click) {\n  let dx = click.x - event.clientX, dy = click.y - event.clientY\n  return dx * dx + dy * dy < 100\n}\n\nfunction runHandlerOnContext(view, propName, pos, inside, event) {\n  if (inside == -1) return false\n  let $pos = view.state.doc.resolve(inside)\n  for (let i = $pos.depth + 1; i > 0; i--) {\n    if (view.someProp(propName, f => i > $pos.depth ? f(view, pos, $pos.nodeAfter, $pos.before(i), event, true)\n                                                    : f(view, pos, $pos.node(i), $pos.before(i), event, false)))\n      return true\n  }\n  return false\n}\n\nfunction updateSelection(view, selection, origin) {\n  if (!view.focused) view.focus()\n  let tr = view.state.tr.setSelection(selection)\n  if (origin == \"pointer\") tr.setMeta(\"pointer\", true)\n  view.dispatch(tr)\n}\n\nfunction selectClickedLeaf(view, inside) {\n  if (inside == -1) return false\n  let $pos = view.state.doc.resolve(inside), node = $pos.nodeAfter\n  if (node && node.isAtom && NodeSelection.isSelectable(node)) {\n    updateSelection(view, new NodeSelection($pos), \"pointer\")\n    return true\n  }\n  return false\n}\n\nfunction selectClickedNode(view, inside) {\n  if (inside == -1) return false\n  let sel = view.state.selection, selectedNode, selectAt\n  if (sel instanceof NodeSelection) selectedNode = sel.node\n\n  let $pos = view.state.doc.resolve(inside)\n  for (let i = $pos.depth + 1; i > 0; i--) {\n    let node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i)\n    if (NodeSelection.isSelectable(node)) {\n      if (selectedNode && sel.$from.depth > 0 &&\n          i >= sel.$from.depth && $pos.before(sel.$from.depth + 1) == sel.$from.pos)\n        selectAt = $pos.before(sel.$from.depth)\n      else\n        selectAt = $pos.before(i)\n      break\n    }\n  }\n\n  if (selectAt != null) {\n    updateSelection(view, NodeSelection.create(view.state.doc, selectAt), \"pointer\")\n    return true\n  } else {\n    return false\n  }\n}\n\nfunction handleSingleClick(view, pos, inside, event, selectNode) {\n  return runHandlerOnContext(view, \"handleClickOn\", pos, inside, event) ||\n    view.someProp(\"handleClick\", f => f(view, pos, event)) ||\n    (selectNode ? selectClickedNode(view, inside) : selectClickedLeaf(view, inside))\n}\n\nfunction handleDoubleClick(view, pos, inside, event) {\n  return runHandlerOnContext(view, \"handleDoubleClickOn\", pos, inside, event) ||\n    view.someProp(\"handleDoubleClick\", f => f(view, pos, event))\n}\n\nfunction handleTripleClick(view, pos, inside, event) {\n  return runHandlerOnContext(view, \"handleTripleClickOn\", pos, inside, event) ||\n    view.someProp(\"handleTripleClick\", f => f(view, pos, event)) ||\n    defaultTripleClick(view, inside, event)\n}\n\nfunction defaultTripleClick(view, inside, event) {\n  if (event.button != 0) return false\n  let doc = view.state.doc\n  if (inside == -1) {\n    if (doc.inlineContent) {\n      updateSelection(view, TextSelection.create(doc, 0, doc.content.size), \"pointer\")\n      return true\n    }\n    return false\n  }\n\n  let $pos = doc.resolve(inside)\n  for (let i = $pos.depth + 1; i > 0; i--) {\n    let node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i)\n    let nodePos = $pos.before(i)\n    if (node.inlineContent)\n      updateSelection(view, TextSelection.create(doc, nodePos + 1, nodePos + 1 + node.content.size), \"pointer\")\n    else if (NodeSelection.isSelectable(node))\n      updateSelection(view, NodeSelection.create(doc, nodePos), \"pointer\")\n    else\n      continue\n    return true\n  }\n}\n\nfunction forceDOMFlush(view) {\n  return endComposition(view)\n}\n\nconst selectNodeModifier = browser.mac ? \"metaKey\" : \"ctrlKey\"\n\nhandlers.mousedown = (view, event) => {\n  view.shiftKey = event.shiftKey\n  let flushed = forceDOMFlush(view)\n  let now = Date.now(), type = \"singleClick\"\n  if (now - view.lastClick.time < 500 && isNear(event, view.lastClick) && !event[selectNodeModifier]) {\n    if (view.lastClick.type == \"singleClick\") type = \"doubleClick\"\n    else if (view.lastClick.type == \"doubleClick\") type = \"tripleClick\"\n  }\n  view.lastClick = {time: now, x: event.clientX, y: event.clientY, type}\n\n  let pos = view.posAtCoords(eventCoords(event))\n  if (!pos) return\n\n  if (type == \"singleClick\") {\n    if (view.mouseDown) view.mouseDown.done()\n    view.mouseDown = new MouseDown(view, pos, event, flushed)\n  } else if ((type == \"doubleClick\" ? handleDoubleClick : handleTripleClick)(view, pos.pos, pos.inside, event)) {\n    event.preventDefault()\n  } else {\n    setSelectionOrigin(view, \"pointer\")\n  }\n}\n\nclass MouseDown {\n  constructor(view, pos, event, flushed) {\n    this.view = view\n    this.startDoc = view.state.doc\n    this.pos = pos\n    this.event = event\n    this.flushed = flushed\n    this.selectNode = event[selectNodeModifier]\n    this.allowDefault = event.shiftKey\n    this.delayedSelectionSync = false\n\n    let targetNode, targetPos\n    if (pos.inside > -1) {\n      targetNode = view.state.doc.nodeAt(pos.inside)\n      targetPos = pos.inside\n    } else {\n      let $pos = view.state.doc.resolve(pos.pos)\n      targetNode = $pos.parent\n      targetPos = $pos.depth ? $pos.before() : 0\n    }\n\n    this.mightDrag = null\n\n    const target = flushed ? null : event.target\n    const targetDesc = target ? view.docView.nearestDesc(target, true) : null\n    this.target = targetDesc ? targetDesc.dom : null\n\n    let {selection} = view.state\n    if (event.button == 0 &&\n        targetNode.type.spec.draggable && targetNode.type.spec.selectable !== false ||\n        selection instanceof NodeSelection && selection.from <= targetPos && selection.to > targetPos)\n      this.mightDrag = {node: targetNode,\n                        pos: targetPos,\n                        addAttr: this.target && !this.target.draggable,\n                        setUneditable: this.target && browser.gecko && !this.target.hasAttribute(\"contentEditable\")}\n\n    if (this.target && this.mightDrag && (this.mightDrag.addAttr || this.mightDrag.setUneditable)) {\n      this.view.domObserver.stop()\n      if (this.mightDrag.addAttr) this.target.draggable = true\n      if (this.mightDrag.setUneditable)\n        setTimeout(() => {\n          if (this.view.mouseDown == this) this.target.setAttribute(\"contentEditable\", \"false\")\n        }, 20)\n      this.view.domObserver.start()\n    }\n\n    view.root.addEventListener(\"mouseup\", this.up = this.up.bind(this))\n    view.root.addEventListener(\"mousemove\", this.move = this.move.bind(this))\n    setSelectionOrigin(view, \"pointer\")\n  }\n\n  done() {\n    this.view.root.removeEventListener(\"mouseup\", this.up)\n    this.view.root.removeEventListener(\"mousemove\", this.move)\n    if (this.mightDrag && this.target) {\n      this.view.domObserver.stop()\n      if (this.mightDrag.addAttr) this.target.removeAttribute(\"draggable\")\n      if (this.mightDrag.setUneditable) this.target.removeAttribute(\"contentEditable\")\n      this.view.domObserver.start()\n    }\n    if (this.delayedSelectionSync) setTimeout(() => selectionToDOM(this.view))\n    this.view.mouseDown = null\n  }\n\n  up(event) {\n    this.done()\n\n    if (!this.view.dom.contains(event.target.nodeType == 3 ? event.target.parentNode : event.target))\n      return\n\n    let pos = this.pos\n    if (this.view.state.doc != this.startDoc) pos = this.view.posAtCoords(eventCoords(event))\n\n    if (this.allowDefault || !pos) {\n      setSelectionOrigin(this.view, \"pointer\")\n    } else if (handleSingleClick(this.view, pos.pos, pos.inside, event, this.selectNode)) {\n      event.preventDefault()\n    } else if (event.button == 0 &&\n               (this.flushed ||\n                // Safari ignores clicks on draggable elements\n                (browser.safari && this.mightDrag && !this.mightDrag.node.isAtom) ||\n                // Chrome will sometimes treat a node selection as a\n                // cursor, but still report that the node is selected\n                // when asked through getSelection. You'll then get a\n                // situation where clicking at the point where that\n                // (hidden) cursor is doesn't change the selection, and\n                // thus doesn't get a reaction from ProseMirror. This\n                // works around that.\n                (browser.chrome && !(this.view.state.selection instanceof TextSelection) &&\n                 Math.min(Math.abs(pos.pos - this.view.state.selection.from),\n                          Math.abs(pos.pos - this.view.state.selection.to)) <= 2))) {\n      updateSelection(this.view, Selection.near(this.view.state.doc.resolve(pos.pos)), \"pointer\")\n      event.preventDefault()\n    } else {\n      setSelectionOrigin(this.view, \"pointer\")\n    }\n  }\n\n  move(event) {\n    if (!this.allowDefault && (Math.abs(this.event.x - event.clientX) > 4 ||\n                               Math.abs(this.event.y - event.clientY) > 4))\n      this.allowDefault = true\n    setSelectionOrigin(this.view, \"pointer\")\n    if (event.buttons == 0) this.done()\n  }\n}\n\nhandlers.touchdown = view => {\n  forceDOMFlush(view)\n  setSelectionOrigin(view, \"pointer\")\n}\n\nhandlers.contextmenu = view => forceDOMFlush(view)\n\nfunction inOrNearComposition(view, event) {\n  if (view.composing) return true\n  // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.\n  // On Japanese input method editors (IMEs), the Enter key is used to confirm character\n  // selection. On Safari, when Enter is pressed, compositionend and keydown events are\n  // emitted. The keydown event triggers newline insertion, which we don't want.\n  // This method returns true if the keydown event should be ignored.\n  // We only ignore it once, as pressing Enter a second time *should* insert a newline.\n  // Furthermore, the keydown event timestamp must be close to the compositionEndedAt timestamp.\n  // This guards against the case where compositionend is triggered without the keyboard\n  // (e.g. character confirmation may be done with the mouse), and keydown is triggered\n  // afterwards- we wouldn't want to ignore the keydown event in this case.\n  if (browser.safari && Math.abs(event.timeStamp - view.compositionEndedAt) < 500) {\n    view.compositionEndedAt = -2e8\n    return true\n  }\n  return false\n}\n\n// Drop active composition after 5 seconds of inactivity on Android\nconst timeoutComposition = browser.android ? 5000 : -1\n\neditHandlers.compositionstart = editHandlers.compositionupdate = view => {\n  if (!view.composing) {\n    view.domObserver.flush()\n    let {state} = view, $pos = state.selection.$from\n    if (state.selection.empty &&\n        (state.storedMarks ||\n         (!$pos.textOffset && $pos.parentOffset && $pos.nodeBefore.marks.some(m => m.type.spec.inclusive === false)))) {\n      // Need to wrap the cursor in mark nodes different from the ones in the DOM context\n      view.markCursor = view.state.storedMarks || $pos.marks()\n      endComposition(view, true)\n      view.markCursor = null\n    } else {\n      endComposition(view)\n      // In firefox, if the cursor is after but outside a marked node,\n      // the inserted text won't inherit the marks. So this moves it\n      // inside if necessary.\n      if (browser.gecko && state.selection.empty && $pos.parentOffset && !$pos.textOffset && $pos.nodeBefore.marks.length) {\n        let sel = view.root.getSelection()\n        for (let node = sel.focusNode, offset = sel.focusOffset; node && node.nodeType == 1 && offset != 0;) {\n          let before = offset < 0 ? node.lastChild : node.childNodes[offset - 1]\n          if (!before) break\n          if (before.nodeType == 3) {\n            sel.collapse(before, before.nodeValue.length)\n            break\n          } else {\n            node = before\n            offset = -1\n          }\n        }\n      }\n    }\n    view.composing = true\n  }\n  scheduleComposeEnd(view, timeoutComposition)\n}\n\neditHandlers.compositionend = (view, event) => {\n  if (view.composing) {\n    view.composing = false\n    view.compositionEndedAt = event.timeStamp\n    scheduleComposeEnd(view, 20)\n  }\n}\n\nfunction scheduleComposeEnd(view, delay) {\n  clearTimeout(view.composingTimeout)\n  if (delay > -1) view.composingTimeout = setTimeout(() => endComposition(view), delay)\n}\n\nexport function clearComposition(view) {\n  if (view.composing) {\n    view.composing = false\n    view.compositionEndedAt = timestampFromCustomEvent()\n  }\n  while (view.compositionNodes.length > 0) view.compositionNodes.pop().markParentsDirty()\n}\n\nfunction timestampFromCustomEvent() {\n  let event = document.createEvent(\"Event\")\n  event.initEvent(\"event\", true, true)\n  return event.timeStamp\n}\n\nexport function endComposition(view, forceUpdate) {\n  view.domObserver.forceFlush()\n  clearComposition(view)\n  if (forceUpdate || view.docView.dirty) {\n    let sel = selectionFromDOM(view)\n    if (sel && !sel.eq(view.state.selection)) view.dispatch(view.state.tr.setSelection(sel))\n    else view.updateState(view.state)\n    return true\n  }\n  return false\n}\n\nfunction captureCopy(view, dom) {\n  // The extra wrapper is somehow necessary on IE/Edge to prevent the\n  // content from being mangled when it is put onto the clipboard\n  if (!view.dom.parentNode) return\n  let wrap = view.dom.parentNode.appendChild(document.createElement(\"div\"))\n  wrap.appendChild(dom)\n  wrap.style.cssText = \"position: fixed; left: -10000px; top: 10px\"\n  let sel = getSelection(), range = document.createRange()\n  range.selectNodeContents(dom)\n  // Done because IE will fire a selectionchange moving the selection\n  // to its start when removeAllRanges is called and the editor still\n  // has focus (which will mess up the editor's selection state).\n  view.dom.blur()\n  sel.removeAllRanges()\n  sel.addRange(range)\n  setTimeout(() => {\n    if (wrap.parentNode) wrap.parentNode.removeChild(wrap)\n    view.focus()\n  }, 50)\n}\n\n// This is very crude, but unfortunately both these browsers _pretend_\n// that they have a clipboard API\u2014all the objects and methods are\n// there, they just don't work, and they are hard to test.\nconst brokenClipboardAPI = (browser.ie && browser.ie_version < 15) ||\n      (browser.ios && browser.webkit_version < 604)\n\nhandlers.copy = editHandlers.cut = (view, e) => {\n  let sel = view.state.selection, cut = e.type == \"cut\"\n  if (sel.empty) return\n\n  // IE and Edge's clipboard interface is completely broken\n  let data = brokenClipboardAPI ? null : e.clipboardData\n  let slice = sel.content(), {dom, text} = serializeForClipboard(view, slice)\n  if (data) {\n    e.preventDefault()\n    data.clearData()\n    data.setData(\"text/html\", dom.innerHTML)\n    data.setData(\"text/plain\", text)\n  } else {\n    captureCopy(view, dom)\n  }\n  if (cut) view.dispatch(view.state.tr.deleteSelection().scrollIntoView().setMeta(\"uiEvent\", \"cut\"))\n}\n\nfunction sliceSingleNode(slice) {\n  return slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1 ? slice.content.firstChild : null\n}\n\nfunction capturePaste(view, e) {\n  if (!view.dom.parentNode) return\n  let plainText = view.shiftKey || view.state.selection.$from.parent.type.spec.code\n  let target = view.dom.parentNode.appendChild(document.createElement(plainText ? \"textarea\" : \"div\"))\n  if (!plainText) target.contentEditable = \"true\"\n  target.style.cssText = \"position: fixed; left: -10000px; top: 10px\"\n  target.focus()\n  setTimeout(() => {\n    view.focus()\n    if (target.parentNode) target.parentNode.removeChild(target)\n    if (plainText) doPaste(view, target.value, null, e)\n    else doPaste(view, target.textContent, target.innerHTML, e)\n  }, 50)\n}\n\nfunction doPaste(view, text, html, e) {\n  let slice = parseFromClipboard(view, text, html, view.shiftKey, view.state.selection.$from)\n  if (view.someProp(\"handlePaste\", f => f(view, e, slice || Slice.empty))) return true\n  if (!slice) return false\n\n  let singleNode = sliceSingleNode(slice)\n  let tr = singleNode ? view.state.tr.replaceSelectionWith(singleNode, view.shiftKey) : view.state.tr.replaceSelection(slice)\n  view.dispatch(tr.scrollIntoView().setMeta(\"paste\", true).setMeta(\"uiEvent\", \"paste\"))\n  return true\n}\n\neditHandlers.paste = (view, e) => {\n  let data = brokenClipboardAPI ? null : e.clipboardData\n  if (data && doPaste(view, data.getData(\"text/plain\"), data.getData(\"text/html\"), e)) e.preventDefault()\n  else capturePaste(view, e)\n}\n\nclass Dragging {\n  constructor(slice, move) {\n    this.slice = slice\n    this.move = move\n  }\n}\n\nconst dragCopyModifier = browser.mac ? \"altKey\" : \"ctrlKey\"\n\nhandlers.dragstart = (view, e) => {\n  let mouseDown = view.mouseDown\n  if (mouseDown) mouseDown.done()\n  if (!e.dataTransfer) return\n\n  let sel = view.state.selection\n  let pos = sel.empty ? null : view.posAtCoords(eventCoords(e))\n  if (pos && pos.pos >= sel.from && pos.pos <= (sel instanceof NodeSelection ? sel.to - 1: sel.to)) {\n    // In selection\n  } else if (mouseDown && mouseDown.mightDrag) {\n    view.dispatch(view.state.tr.setSelection(NodeSelection.create(view.state.doc, mouseDown.mightDrag.pos)))\n  } else if (e.target && e.target.nodeType == 1) {\n    let desc = view.docView.nearestDesc(e.target, true)\n    if (desc && desc.node.type.spec.draggable && desc != view.docView)\n      view.dispatch(view.state.tr.setSelection(NodeSelection.create(view.state.doc, desc.posBefore)))\n  }\n  let slice = view.state.selection.content(), {dom, text} = serializeForClipboard(view, slice)\n  e.dataTransfer.clearData()\n  e.dataTransfer.setData(brokenClipboardAPI ? \"Text\" : \"text/html\", dom.innerHTML)\n  // See https://github.com/ProseMirror/prosemirror/issues/1156\n  e.dataTransfer.effectAllowed = \"copyMove\"\n  if (!brokenClipboardAPI) e.dataTransfer.setData(\"text/plain\", text)\n  view.dragging = new Dragging(slice, !e[dragCopyModifier])\n}\n\nhandlers.dragend = view => {\n  let dragging = view.dragging\n  window.setTimeout(() => {\n    if (view.dragging == dragging)  view.dragging = null\n  }, 50)\n}\n\neditHandlers.dragover = editHandlers.dragenter = (_, e) => e.preventDefault()\n\neditHandlers.drop = (view, e) => {\n  let dragging = view.dragging\n  view.dragging = null\n\n  if (!e.dataTransfer) return\n\n  let eventPos = view.posAtCoords(eventCoords(e))\n  if (!eventPos) return\n  let $mouse = view.state.doc.resolve(eventPos.pos)\n  if (!$mouse) return\n  let slice = dragging && dragging.slice\n  if (slice) {\n    view.someProp(\"transformPasted\", f => { slice = f(slice) })\n  } else {\n    slice = parseFromClipboard(view, e.dataTransfer.getData(brokenClipboardAPI ? \"Text\" : \"text/plain\"),\n                               brokenClipboardAPI ? null : e.dataTransfer.getData(\"text/html\"), false, $mouse)\n  }\n  let move = dragging && !e[dragCopyModifier]\n  if (view.someProp(\"handleDrop\", f => f(view, e, slice || Slice.empty, move))) {\n    e.preventDefault()\n    return\n  }\n  if (!slice) return\n\n  e.preventDefault()\n  let insertPos = slice ? dropPoint(view.state.doc, $mouse.pos, slice) : $mouse.pos\n  if (insertPos == null) insertPos = $mouse.pos\n\n  let tr = view.state.tr\n  if (move) tr.deleteSelection()\n\n  let pos = tr.mapping.map(insertPos)\n  let isNode = slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1\n  let beforeInsert = tr.doc\n  if (isNode)\n    tr.replaceRangeWith(pos, pos, slice.content.firstChild)\n  else\n    tr.replaceRange(pos, pos, slice)\n  if (tr.doc.eq(beforeInsert)) return\n\n  let $pos = tr.doc.resolve(pos)\n  if (isNode && NodeSelection.isSelectable(slice.content.firstChild) &&\n      $pos.nodeAfter && $pos.nodeAfter.sameMarkup(slice.content.firstChild)) {\n    tr.setSelection(new NodeSelection($pos))\n  } else {\n    let end = tr.mapping.map(insertPos)\n    tr.mapping.maps[tr.mapping.maps.length - 1].forEach((_from, _to, _newFrom, newTo) => end = newTo)\n    tr.setSelection(selectionBetween(view, $pos, tr.doc.resolve(end)))\n  }\n  view.focus()\n  view.dispatch(tr.setMeta(\"uiEvent\", \"drop\"))\n}\n\nhandlers.focus = view => {\n  if (!view.focused) {\n    view.domObserver.stop()\n    view.dom.classList.add(\"ProseMirror-focused\")\n    view.domObserver.start()\n    view.focused = true\n    setTimeout(() => {\n      if (view.docView && view.hasFocus() && !view.domObserver.currentSelection.eq(view.root.getSelection()))\n        selectionToDOM(view)\n    }, 20)\n  }\n}\n\nhandlers.blur = (view, e) => {\n  if (view.focused) {\n    view.domObserver.stop()\n    view.dom.classList.remove(\"ProseMirror-focused\")\n    view.domObserver.start()\n    if (e.relatedTarget && view.dom.contains(e.relatedTarget))\n      view.domObserver.currentSelection.set({})\n    view.focused = false\n  }\n}\n\nhandlers.beforeinput = (view, event) => {\n  // We should probably do more with beforeinput events, but support\n  // is so spotty that I'm still waiting to see where they are going.\n\n  // Very specific hack to deal with backspace sometimes failing on\n  // Chrome Android when after an uneditable node.\n  if (browser.chrome && browser.android && event.inputType == \"deleteContentBackward\") {\n    let {domChangeCount} = view\n    setTimeout(() => {\n      if (view.domChangeCount != domChangeCount) return // Event already had some effect\n      // This bug tends to close the virtual keyboard, so we refocus\n      view.dom.blur()\n      view.focus()\n      if (view.someProp(\"handleKeyDown\", f => f(view, keyEvent(8, \"Backspace\")))) return\n      let {$cursor} = view.state.selection\n      // Crude approximation of backspace behavior when no command handled it\n      if ($cursor && $cursor.pos > 0) view.dispatch(view.state.tr.delete($cursor.pos - 1, $cursor.pos).scrollIntoView())\n    }, 50)\n  }\n}\n\n// Make sure all handlers get registered\nfor (let prop in editHandlers) handlers[prop] = editHandlers[prop]\n", "function compareObjs(a, b) {\n  if (a == b) return true\n  for (let p in a) if (a[p] !== b[p]) return false\n  for (let p in b) if (!(p in a)) return false\n  return true\n}\n\nclass WidgetType {\n  constructor(toDOM, spec) {\n    this.spec = spec || noSpec\n    this.side = this.spec.side || 0\n    this.toDOM = toDOM\n  }\n\n  map(mapping, span, offset, oldOffset) {\n    let {pos, deleted} = mapping.mapResult(span.from + oldOffset, this.side < 0 ? -1 : 1)\n    return deleted ? null : new Decoration(pos - offset, pos - offset, this)\n  }\n\n  valid() { return true }\n\n  eq(other) {\n    return this == other ||\n      (other instanceof WidgetType &&\n       (this.spec.key && this.spec.key == other.spec.key ||\n        this.toDOM == other.toDOM && compareObjs(this.spec, other.spec)))\n  }\n\n  destroy(node) {\n    if (this.spec.destroy) this.spec.destroy(node)\n  }\n}\n\nclass InlineType {\n  constructor(attrs, spec) {\n    this.spec = spec || noSpec\n    this.attrs = attrs\n  }\n\n  map(mapping, span, offset, oldOffset) {\n    let from = mapping.map(span.from + oldOffset, this.spec.inclusiveStart ? -1 : 1) - offset\n    let to = mapping.map(span.to + oldOffset, this.spec.inclusiveEnd ? 1 : -1) - offset\n    return from >= to ? null : new Decoration(from, to, this)\n  }\n\n  valid(_, span) { return span.from < span.to }\n\n  eq(other) {\n    return this == other ||\n      (other instanceof InlineType && compareObjs(this.attrs, other.attrs) &&\n       compareObjs(this.spec, other.spec))\n  }\n\n  static is(span) { return span.type instanceof InlineType }\n}\n\nclass NodeType {\n  constructor(attrs, spec) {\n    this.spec = spec || noSpec\n    this.attrs = attrs\n  }\n\n  map(mapping, span, offset, oldOffset) {\n    let from = mapping.mapResult(span.from + oldOffset, 1)\n    if (from.deleted) return null\n    let to = mapping.mapResult(span.to + oldOffset, -1)\n    if (to.deleted || to.pos <= from.pos) return null\n    return new Decoration(from.pos - offset, to.pos - offset, this)\n  }\n\n  valid(node, span) {\n    let {index, offset} = node.content.findIndex(span.from), child\n    return offset == span.from && !(child = node.child(index)).isText && offset + child.nodeSize == span.to\n  }\n\n  eq(other) {\n    return this == other ||\n      (other instanceof NodeType && compareObjs(this.attrs, other.attrs) &&\n       compareObjs(this.spec, other.spec))\n  }\n}\n\n// ::- Decoration objects can be provided to the view through the\n// [`decorations` prop](#view.EditorProps.decorations). They come in\n// several variants\u2014see the static members of this class for details.\nexport class Decoration {\n  constructor(from, to, type) {\n    // :: number\n    // The start position of the decoration.\n    this.from = from\n    // :: number\n    // The end position. Will be the same as `from` for [widget\n    // decorations](#view.Decoration^widget).\n    this.to = to\n    this.type = type\n  }\n\n  copy(from, to) {\n    return new Decoration(from, to, this.type)\n  }\n\n  eq(other, offset = 0) {\n    return this.type.eq(other.type) && this.from + offset == other.from && this.to + offset == other.to\n  }\n\n  map(mapping, offset, oldOffset) {\n    return this.type.map(mapping, this, offset, oldOffset)\n  }\n\n  // :: (number, union<(view: EditorView, getPos: () \u2192 number) \u2192 dom.Node, dom.Node>, ?Object) \u2192 Decoration\n  // Creates a widget decoration, which is a DOM node that's shown in\n  // the document at the given position. It is recommended that you\n  // delay rendering the widget by passing a function that will be\n  // called when the widget is actually drawn in a view, but you can\n  // also directly pass a DOM node. `getPos` can be used to find the\n  // widget's current document position.\n  //\n  //   spec::- These options are supported:\n  //\n  //     side:: ?number\n  //     Controls which side of the document position this widget is\n  //     associated with. When negative, it is drawn before a cursor\n  //     at its position, and content inserted at that position ends\n  //     up after the widget. When zero (the default) or positive, the\n  //     widget is drawn after the cursor and content inserted there\n  //     ends up before the widget.\n  //\n  //     When there are multiple widgets at a given position, their\n  //     `side` values determine the order in which they appear. Those\n  //     with lower values appear first. The ordering of widgets with\n  //     the same `side` value is unspecified.\n  //\n  //     When `marks` is null, `side` also determines the marks that\n  //     the widget is wrapped in\u2014those of the node before when\n  //     negative, those of the node after when positive.\n  //\n  //     marks:: ?[Mark]\n  //     The precise set of marks to draw around the widget.\n  //\n  //     stopEvent:: ?(event: dom.Event) \u2192 bool\n  //     Can be used to control which DOM events, when they bubble out\n  //     of this widget, the editor view should ignore.\n  //\n  //     ignoreSelection:: ?bool\n  //     When set (defaults to false), selection changes inside the\n  //     widget are ignored, and don't cause ProseMirror to try and\n  //     re-sync the selection with its selection state.\n  //\n  //     key:: ?string\n  //     When comparing decorations of this type (in order to decide\n  //     whether it needs to be redrawn), ProseMirror will by default\n  //     compare the widget DOM node by identity. If you pass a key,\n  //     that key will be compared instead, which can be useful when\n  //     you generate decorations on the fly and don't want to store\n  //     and reuse DOM nodes. Make sure that any widgets with the same\n  //     key are interchangeable\u2014if widgets differ in, for example,\n  //     the behavior of some event handler, they should get\n  //     different keys.\n  //\n  //     destroy:: ?(node: dom.Node)\n  //     Called when the widget decoration is removed as a result of\n  //     mapping\n  static widget(pos, toDOM, spec) {\n    return new Decoration(pos, pos, new WidgetType(toDOM, spec))\n  }\n\n  // :: (number, number, DecorationAttrs, ?Object) \u2192 Decoration\n  // Creates an inline decoration, which adds the given attributes to\n  // each inline node between `from` and `to`.\n  //\n  //   spec::- These options are recognized:\n  //\n  //     inclusiveStart:: ?bool\n  //     Determines how the left side of the decoration is\n  //     [mapped](#transform.Position_Mapping) when content is\n  //     inserted directly at that position. By default, the decoration\n  //     won't include the new content, but you can set this to `true`\n  //     to make it inclusive.\n  //\n  //     inclusiveEnd:: ?bool\n  //     Determines how the right side of the decoration is mapped.\n  //     See\n  //     [`inclusiveStart`](#view.Decoration^inline^spec.inclusiveStart).\n  static inline(from, to, attrs, spec) {\n    return new Decoration(from, to, new InlineType(attrs, spec))\n  }\n\n  // :: (number, number, DecorationAttrs, ?Object) \u2192 Decoration\n  // Creates a node decoration. `from` and `to` should point precisely\n  // before and after a node in the document. That node, and only that\n  // node, will receive the given attributes.\n  //\n  //   spec::-\n  //\n  //   Optional information to store with the decoration. It\n  //   is also used when comparing decorators for equality.\n  static node(from, to, attrs, spec) {\n    return new Decoration(from, to, new NodeType(attrs, spec))\n  }\n\n  // :: Object\n  // The spec provided when creating this decoration. Can be useful\n  // if you've stored extra information in that object.\n  get spec() { return this.type.spec }\n\n  get inline() { return this.type instanceof InlineType }\n}\n\n// DecorationAttrs:: interface\n// A set of attributes to add to a decorated node. Most properties\n// simply directly correspond to DOM attributes of the same name,\n// which will be set to the property's value. These are exceptions:\n//\n//   class:: ?string\n//   A CSS class name or a space-separated set of class names to be\n//   _added_ to the classes that the node already had.\n//\n//   style:: ?string\n//   A string of CSS to be _added_ to the node's existing `style` property.\n//\n//   nodeName:: ?string\n//   When non-null, the target node is wrapped in a DOM element of\n//   this type (and the other attributes are applied to this element).\n\nconst none = [], noSpec = {}\n\n// :: class extends DecorationSource\n// A collection of [decorations](#view.Decoration), organized in\n// such a way that the drawing algorithm can efficiently use and\n// compare them. This is a persistent data structure\u2014it is not\n// modified, updates create a new value.\nexport class DecorationSet {\n  constructor(local, children) {\n    this.local = local && local.length ? local : none\n    this.children = children && children.length ? children : none\n  }\n\n  // :: (Node, [Decoration]) \u2192 DecorationSet\n  // Create a set of decorations, using the structure of the given\n  // document.\n  static create(doc, decorations) {\n    return decorations.length ? buildTree(decorations, doc, 0, noSpec) : empty\n  }\n\n  // :: (?number, ?number, ?(spec: Object) \u2192 bool) \u2192 [Decoration]\n  // Find all decorations in this set which touch the given range\n  // (including decorations that start or end directly at the\n  // boundaries) and match the given predicate on their spec. When\n  // `start` and `end` are omitted, all decorations in the set are\n  // considered. When `predicate` isn't given, all decorations are\n  // assumed to match.\n  find(start, end, predicate) {\n    let result = []\n    this.findInner(start == null ? 0 : start, end == null ? 1e9 : end, result, 0, predicate)\n    return result\n  }\n\n  findInner(start, end, result, offset, predicate) {\n    for (let i = 0; i < this.local.length; i++) {\n      let span = this.local[i]\n      if (span.from <= end && span.to >= start && (!predicate || predicate(span.spec)))\n        result.push(span.copy(span.from + offset, span.to + offset))\n    }\n    for (let i = 0; i < this.children.length; i += 3) {\n      if (this.children[i] < end && this.children[i + 1] > start) {\n        let childOff = this.children[i] + 1\n        this.children[i + 2].findInner(start - childOff, end - childOff, result, offset + childOff, predicate)\n      }\n    }\n  }\n\n  // :: (Mapping, Node, ?Object) \u2192 DecorationSet\n  // Map the set of decorations in response to a change in the\n  // document.\n  //\n  //   options::- An optional set of options.\n  //\n  //     onRemove:: ?(decorationSpec: Object)\n  //     When given, this function will be called for each decoration\n  //     that gets dropped as a result of the mapping, passing the\n  //     spec of that decoration.\n  map(mapping, doc, options) {\n    if (this == empty || mapping.maps.length == 0) return this\n    return this.mapInner(mapping, doc, 0, 0, options || noSpec)\n  }\n\n  mapInner(mapping, node, offset, oldOffset, options) {\n    let newLocal\n    for (let i = 0; i < this.local.length; i++) {\n      let mapped = this.local[i].map(mapping, offset, oldOffset)\n      if (mapped && mapped.type.valid(node, mapped)) (newLocal || (newLocal = [])).push(mapped)\n      else if (options.onRemove) options.onRemove(this.local[i].spec)\n    }\n\n    if (this.children.length)\n      return mapChildren(this.children, newLocal, mapping, node, offset, oldOffset, options)\n    else\n      return newLocal ? new DecorationSet(newLocal.sort(byPos)) : empty\n  }\n\n  // :: (Node, [Decoration]) \u2192 DecorationSet\n  // Add the given array of decorations to the ones in the set,\n  // producing a new set. Needs access to the current document to\n  // create the appropriate tree structure.\n  add(doc, decorations) {\n    if (!decorations.length) return this\n    if (this == empty) return DecorationSet.create(doc, decorations)\n    return this.addInner(doc, decorations, 0)\n  }\n\n  addInner(doc, decorations, offset) {\n    let children, childIndex = 0\n    doc.forEach((childNode, childOffset) => {\n      let baseOffset = childOffset + offset, found\n      if (!(found = takeSpansForNode(decorations, childNode, baseOffset))) return\n\n      if (!children) children = this.children.slice()\n      while (childIndex < children.length && children[childIndex] < childOffset) childIndex += 3\n      if (children[childIndex] == childOffset)\n        children[childIndex + 2] = children[childIndex + 2].addInner(childNode, found, baseOffset + 1)\n      else\n        children.splice(childIndex, 0, childOffset, childOffset + childNode.nodeSize, buildTree(found, childNode, baseOffset + 1, noSpec))\n      childIndex += 3\n    })\n\n    let local = moveSpans(childIndex ? withoutNulls(decorations) : decorations, -offset)\n    for (let i = 0; i < local.length; i++) if (!local[i].type.valid(doc, local[i])) local.splice(i--, 1)\n\n    return new DecorationSet(local.length ? this.local.concat(local).sort(byPos) : this.local,\n                             children || this.children)\n  }\n\n  // :: ([Decoration]) \u2192 DecorationSet\n  // Create a new set that contains the decorations in this set, minus\n  // the ones in the given array.\n  remove(decorations) {\n    if (decorations.length == 0 || this == empty) return this\n    return this.removeInner(decorations, 0)\n  }\n\n  removeInner(decorations, offset) {\n    let children = this.children, local = this.local\n    for (let i = 0; i < children.length; i += 3) {\n      let found, from = children[i] + offset, to = children[i + 1] + offset\n      for (let j = 0, span; j < decorations.length; j++) if (span = decorations[j]) {\n        if (span.from > from && span.to < to) {\n          decorations[j] = null\n          ;(found || (found = [])).push(span)\n        }\n      }\n      if (!found) continue\n      if (children == this.children) children = this.children.slice()\n      let removed = children[i + 2].removeInner(found, from + 1)\n      if (removed != empty) {\n        children[i + 2] = removed\n      } else {\n        children.splice(i, 3)\n        i -= 3\n      }\n    }\n    if (local.length) for (let i = 0, span; i < decorations.length; i++) if (span = decorations[i]) {\n      for (let j = 0; j < local.length; j++) if (local[j].eq(span, offset)) {\n        if (local == this.local) local = this.local.slice()\n        local.splice(j--, 1)\n      }\n    }\n    if (children == this.children && local == this.local) return this\n    return local.length || children.length ? new DecorationSet(local, children) : empty\n  }\n\n  forChild(offset, node) {\n    if (this == empty) return this\n    if (node.isLeaf) return DecorationSet.empty\n\n    let child, local\n    for (let i = 0; i < this.children.length; i += 3) if (this.children[i] >= offset) {\n      if (this.children[i] == offset) child = this.children[i + 2]\n      break\n    }\n    let start = offset + 1, end = start + node.content.size\n    for (let i = 0; i < this.local.length; i++) {\n      let dec = this.local[i]\n      if (dec.from < end && dec.to > start && (dec.type instanceof InlineType)) {\n        let from = Math.max(start, dec.from) - start, to = Math.min(end, dec.to) - start\n        if (from < to) (local || (local = [])).push(dec.copy(from, to))\n      }\n    }\n    if (local) {\n      let localSet = new DecorationSet(local.sort(byPos))\n      return child ? new DecorationGroup([localSet, child]) : localSet\n    }\n    return child || empty\n  }\n\n  eq(other) {\n    if (this == other) return true\n    if (!(other instanceof DecorationSet) ||\n        this.local.length != other.local.length ||\n        this.children.length != other.children.length) return false\n    for (let i = 0; i < this.local.length; i++)\n      if (!this.local[i].eq(other.local[i])) return false\n    for (let i = 0; i < this.children.length; i += 3)\n      if (this.children[i] != other.children[i] ||\n          this.children[i + 1] != other.children[i + 1] ||\n          !this.children[i + 2].eq(other.children[i + 2])) return false\n    return true\n  }\n\n  locals(node) {\n    return removeOverlap(this.localsInner(node))\n  }\n\n  localsInner(node) {\n    if (this == empty) return none\n    if (node.inlineContent || !this.local.some(InlineType.is)) return this.local\n    let result = []\n    for (let i = 0; i < this.local.length; i++) {\n      if (!(this.local[i].type instanceof InlineType))\n        result.push(this.local[i])\n    }\n    return result\n  }\n}\n\n// DecorationSource:: interface\n// An object that can [provide](#view.EditorProps.decorations)\n// decorations. Implemented by [`DecorationSet`](#view.DecorationSet),\n// and passed to [node views](#view.EditorProps.nodeViews).\n//\n//   map:: (Mapping, Node) \u2192 DecorationSource\n//   Map the set of decorations in response to a change in the\n//   document.\n\nconst empty = new DecorationSet()\n\n// :: DecorationSet\n// The empty set of decorations.\nDecorationSet.empty = empty\n\nDecorationSet.removeOverlap = removeOverlap\n\n// :- An abstraction that allows the code dealing with decorations to\n// treat multiple DecorationSet objects as if it were a single object\n// with (a subset of) the same interface.\nclass DecorationGroup {\n  constructor(members) {\n    this.members = members\n  }\n\n  map(mapping, doc) {\n    const mappedDecos = this.members.map(\n      member => member.map(mapping, doc, noSpec)\n    )\n    return DecorationGroup.from(mappedDecos)\n  }\n\n  forChild(offset, child) {\n    if (child.isLeaf) return DecorationSet.empty\n    let found = []\n    for (let i = 0; i < this.members.length; i++) {\n      let result = this.members[i].forChild(offset, child)\n      if (result == empty) continue\n      if (result instanceof DecorationGroup) found = found.concat(result.members)\n      else found.push(result)\n    }\n    return DecorationGroup.from(found)\n  }\n\n  eq(other) {\n    if (!(other instanceof DecorationGroup) ||\n        other.members.length != this.members.length) return false\n    for (let i = 0; i < this.members.length; i++)\n      if (!this.members[i].eq(other.members[i])) return false\n    return true\n  }\n\n  locals(node) {\n    let result, sorted = true\n    for (let i = 0; i < this.members.length; i++) {\n      let locals = this.members[i].localsInner(node)\n      if (!locals.length) continue\n      if (!result) {\n        result = locals\n      } else {\n        if (sorted) {\n          result = result.slice()\n          sorted = false\n        }\n        for (let j = 0; j < locals.length; j++) result.push(locals[j])\n      }\n    }\n    return result ? removeOverlap(sorted ? result : result.sort(byPos)) : none\n  }\n\n  // : ([DecorationSet]) \u2192 union<DecorationSet, DecorationGroup>\n  // Create a group for the given array of decoration sets, or return\n  // a single set when possible.\n  static from(members) {\n    switch (members.length) {\n      case 0: return empty\n      case 1: return members[0]\n      default: return new DecorationGroup(members)\n    }\n  }\n}\n\nfunction mapChildren(oldChildren, newLocal, mapping, node, offset, oldOffset, options) {\n  let children = oldChildren.slice()\n\n  // Mark the children that are directly touched by changes, and\n  // move those that are after the changes.\n  let shift = (oldStart, oldEnd, newStart, newEnd) => {\n    for (let i = 0; i < children.length; i += 3) {\n      let end = children[i + 1], dSize\n      if (end == -1 || oldStart > end + oldOffset) continue\n      if (oldEnd >= children[i] + oldOffset) {\n        children[i + 1] = -1\n      } else if (newStart >= offset && (dSize = (newEnd - newStart) - (oldEnd - oldStart))) {\n        children[i] += dSize\n        children[i + 1] += dSize\n      }\n    }\n  }\n  for (let i = 0; i < mapping.maps.length; i++) mapping.maps[i].forEach(shift)\n\n  // Find the child nodes that still correspond to a single node,\n  // recursively call mapInner on them and update their positions.\n  let mustRebuild = false\n  for (let i = 0; i < children.length; i += 3) if (children[i + 1] == -1) { // Touched nodes\n    let from = mapping.map(oldChildren[i] + oldOffset), fromLocal = from - offset\n    if (fromLocal < 0 || fromLocal >= node.content.size) {\n      mustRebuild = true\n      continue\n    }\n    // Must read oldChildren because children was tagged with -1\n    let to = mapping.map(oldChildren[i + 1] + oldOffset, -1), toLocal = to - offset\n    let {index, offset: childOffset} = node.content.findIndex(fromLocal)\n    let childNode = node.maybeChild(index)\n    if (childNode && childOffset == fromLocal && childOffset + childNode.nodeSize == toLocal) {\n      let mapped = children[i + 2].mapInner(mapping, childNode, from + 1, oldChildren[i] + oldOffset + 1, options)\n      if (mapped != empty) {\n        children[i] = fromLocal\n        children[i + 1] = toLocal\n        children[i + 2] = mapped\n      } else {\n        children[i + 1] = -2\n        mustRebuild = true\n      }\n    } else {\n      mustRebuild = true\n    }\n  }\n\n  // Remaining children must be collected and rebuilt into the appropriate structure\n  if (mustRebuild) {\n    let decorations = mapAndGatherRemainingDecorations(children, oldChildren, newLocal || [], mapping,\n                                                       offset, oldOffset, options)\n    let built = buildTree(decorations, node, 0, options)\n    newLocal = built.local\n    for (let i = 0; i < children.length; i += 3) if (children[i + 1] < 0) {\n      children.splice(i, 3)\n      i -= 3\n    }\n    for (let i = 0, j = 0; i < built.children.length; i += 3) {\n      let from = built.children[i]\n      while (j < children.length && children[j] < from) j += 3\n      children.splice(j, 0, built.children[i], built.children[i + 1], built.children[i + 2])\n    }\n  }\n\n  return new DecorationSet(newLocal && newLocal.sort(byPos), children)\n}\n\nfunction moveSpans(spans, offset) {\n  if (!offset || !spans.length) return spans\n  let result = []\n  for (let i = 0; i < spans.length; i++) {\n    let span = spans[i]\n    result.push(new Decoration(span.from + offset, span.to + offset, span.type))\n  }\n  return result\n}\n\nfunction mapAndGatherRemainingDecorations(children, oldChildren, decorations, mapping, offset, oldOffset, options) {\n  // Gather all decorations from the remaining marked children\n  function gather(set, oldOffset) {\n    for (let i = 0; i < set.local.length; i++) {\n      let mapped = set.local[i].map(mapping, offset, oldOffset)\n      if (mapped) decorations.push(mapped)\n      else if (options.onRemove) options.onRemove(set.local[i].spec)\n    }\n    for (let i = 0; i < set.children.length; i += 3)\n      gather(set.children[i + 2], set.children[i] + oldOffset + 1)\n  }\n  for (let i = 0; i < children.length; i += 3) if (children[i + 1] == -1)\n    gather(children[i + 2], oldChildren[i] + oldOffset + 1)\n\n  return decorations\n}\n\nfunction takeSpansForNode(spans, node, offset) {\n  if (node.isLeaf) return null\n  let end = offset + node.nodeSize, found = null\n  for (let i = 0, span; i < spans.length; i++) {\n    if ((span = spans[i]) && span.from > offset && span.to < end) {\n      ;(found || (found = [])).push(span)\n      spans[i] = null\n    }\n  }\n  return found\n}\n\nfunction withoutNulls(array) {\n  let result = []\n  for (let i = 0; i < array.length; i++)\n    if (array[i] != null) result.push(array[i])\n  return result\n}\n\n// : ([Decoration], Node, number) \u2192 DecorationSet\n// Build up a tree that corresponds to a set of decorations. `offset`\n// is a base offset that should be subtracted from the `from` and `to`\n// positions in the spans (so that we don't have to allocate new spans\n// for recursive calls).\nfunction buildTree(spans, node, offset, options) {\n  let children = [], hasNulls = false\n  node.forEach((childNode, localStart) => {\n    let found = takeSpansForNode(spans, childNode, localStart + offset)\n    if (found) {\n      hasNulls = true\n      let subtree = buildTree(found, childNode, offset + localStart + 1, options)\n      if (subtree != empty)\n        children.push(localStart, localStart + childNode.nodeSize, subtree)\n    }\n  })\n  let locals = moveSpans(hasNulls ? withoutNulls(spans) : spans, -offset).sort(byPos)\n  for (let i = 0; i < locals.length; i++) if (!locals[i].type.valid(node, locals[i])) {\n    if (options.onRemove) options.onRemove(locals[i].spec)\n    locals.splice(i--, 1)\n  }\n  return locals.length || children.length ? new DecorationSet(locals, children) : empty\n}\n\n// : (Decoration, Decoration) \u2192 number\n// Used to sort decorations so that ones with a low start position\n// come first, and within a set with the same start position, those\n// with an smaller end position come first.\nfunction byPos(a, b) {\n  return a.from - b.from || a.to - b.to\n}\n\n// : ([Decoration]) \u2192 [Decoration]\n// Scan a sorted array of decorations for partially overlapping spans,\n// and split those so that only fully overlapping spans are left (to\n// make subsequent rendering easier). Will return the input array if\n// no partially overlapping spans are found (the common case).\nfunction removeOverlap(spans) {\n  let working = spans\n  for (let i = 0; i < working.length - 1; i++) {\n    let span = working[i]\n    if (span.from != span.to) for (let j = i + 1; j < working.length; j++) {\n      let next = working[j]\n      if (next.from == span.from) {\n        if (next.to != span.to) {\n          if (working == spans) working = spans.slice()\n          // Followed by a partially overlapping larger span. Split that\n          // span.\n          working[j] = next.copy(next.from, span.to)\n          insertAhead(working, j + 1, next.copy(span.to, next.to))\n        }\n        continue\n      } else {\n        if (next.from < span.to) {\n          if (working == spans) working = spans.slice()\n          // The end of this one overlaps with a subsequent span. Split\n          // this one.\n          working[i] = span.copy(span.from, next.from)\n          insertAhead(working, j, span.copy(next.from, span.to))\n        }\n        break\n      }\n    }\n  }\n  return working\n}\n\nfunction insertAhead(array, i, deco) {\n  while (i < array.length && byPos(deco, array[i]) > 0) i++\n  array.splice(i, 0, deco)\n}\n\n// : (EditorView) \u2192 union<DecorationSet, DecorationGroup>\n// Get the decorations associated with the current props of a view.\nexport function viewDecorations(view) {\n  let found = []\n  view.someProp(\"decorations\", f => {\n    let result = f(view.state)\n    if (result && result != empty) found.push(result)\n  })\n  if (view.cursorWrapper)\n    found.push(DecorationSet.create(view.state.doc, [view.cursorWrapper.deco]))\n  return DecorationGroup.from(found)\n}\n", "import {NodeSelection} from \"prosemirror-state\"\n\nimport {scrollRectIntoView, posAtCoords, coordsAtPos, endOfTextblock, storeScrollPos,\n        resetScrollPos, focusPreventScroll} from \"./domcoords\"\nimport {docViewDesc} from \"./viewdesc\"\nimport {initInput, destroyInput, dispatchEvent, ensureListeners, clearComposition} from \"./input\"\nimport {selectionToDOM, anchorInRightPlace, syncNodeSelection} from \"./selection\"\nimport {Decoration, viewDecorations} from \"./decoration\"\nimport browser from \"./browser\"\n\nexport {Decoration, DecorationSet} from \"./decoration\"\n\n// Exported for testing\nexport {serializeForClipboard as __serializeForClipboard, parseFromClipboard as __parseFromClipboard} from \"./clipboard\"\nexport {endComposition as __endComposition} from \"./input\"\n\n// ::- An editor view manages the DOM structure that represents an\n// editable document. Its state and behavior are determined by its\n// [props](#view.DirectEditorProps).\nexport class EditorView {\n  // :: (?union<dom.Node, (dom.Node), {mount: dom.Node}>, DirectEditorProps)\n  // Create a view. `place` may be a DOM node that the editor should\n  // be appended to, a function that will place it into the document,\n  // or an object whose `mount` property holds the node to use as the\n  // document container. If it is `null`, the editor will not be added\n  // to the document.\n  constructor(place, props) {\n    this._props = props\n    // :: EditorState\n    // The view's current [state](#state.EditorState).\n    this.state = props.state\n\n    this.directPlugins = props.plugins || []\n    this.directPlugins.forEach(checkStateComponent)\n\n    this.dispatch = this.dispatch.bind(this)\n\n    this._root = null\n    this.focused = false\n    // Kludge used to work around a Chrome bug\n    this.trackWrites = null\n\n    // :: dom.Element\n    // An editable DOM node containing the document. (You probably\n    // should not directly interfere with its content.)\n    this.dom = (place && place.mount) || document.createElement(\"div\")\n    if (place) {\n      if (place.appendChild) place.appendChild(this.dom)\n      else if (place.apply) place(this.dom)\n      else if (place.mount) this.mounted = true\n    }\n\n    // :: bool\n    // Indicates whether the editor is currently [editable](#view.EditorProps.editable).\n    this.editable = getEditable(this)\n    this.markCursor = null\n    this.cursorWrapper = null\n    updateCursorWrapper(this)\n    this.nodeViews = buildNodeViews(this)\n    this.docView = docViewDesc(this.state.doc, computeDocDeco(this), viewDecorations(this), this.dom, this)\n\n    this.lastSelectedViewDesc = null\n    // :: ?{slice: Slice, move: bool}\n    // When editor content is being dragged, this object contains\n    // information about the dragged slice and whether it is being\n    // copied or moved. At any other time, it is null.\n    this.dragging = null\n\n    initInput(this)\n\n    this.prevDirectPlugins = []\n    this.pluginViews = []\n    this.updatePluginViews()\n  }\n\n  // composing:: boolean\n  // Holds `true` when a\n  // [composition](https://developer.mozilla.org/en-US/docs/Mozilla/IME_handling_guide)\n  // is active.\n\n  // :: DirectEditorProps\n  // The view's current [props](#view.EditorProps).\n  get props() {\n    if (this._props.state != this.state) {\n      let prev = this._props\n      this._props = {}\n      for (let name in prev) this._props[name] = prev[name]\n      this._props.state = this.state\n    }\n    return this._props\n  }\n\n  // :: (DirectEditorProps)\n  // Update the view's props. Will immediately cause an update to\n  // the DOM.\n  update(props) {\n    if (props.handleDOMEvents != this._props.handleDOMEvents) ensureListeners(this)\n    this._props = props\n    if (props.plugins) {\n      props.plugins.forEach(checkStateComponent)\n      this.directPlugins = props.plugins\n    }\n    this.updateStateInner(props.state, true)\n  }\n\n  // :: (DirectEditorProps)\n  // Update the view by updating existing props object with the object\n  // given as argument. Equivalent to `view.update(Object.assign({},\n  // view.props, props))`.\n  setProps(props) {\n    let updated = {}\n    for (let name in this._props) updated[name] = this._props[name]\n    updated.state = this.state\n    for (let name in props) updated[name] = props[name]\n    this.update(updated)\n  }\n\n  // :: (EditorState)\n  // Update the editor's `state` prop, without touching any of the\n  // other props.\n  updateState(state) {\n    this.updateStateInner(state, this.state.plugins != state.plugins)\n  }\n\n  updateStateInner(state, reconfigured) {\n    let prev = this.state, redraw = false, updateSel = false\n    // When stored marks are added, stop composition, so that they can\n    // be displayed.\n    if (state.storedMarks && this.composing) {\n      clearComposition(this)\n      updateSel = true\n    }\n    this.state = state\n    if (reconfigured) {\n      let nodeViews = buildNodeViews(this)\n      if (changedNodeViews(nodeViews, this.nodeViews)) {\n        this.nodeViews = nodeViews\n        redraw = true\n      }\n      ensureListeners(this)\n    }\n\n    this.editable = getEditable(this)\n    updateCursorWrapper(this)\n    let innerDeco = viewDecorations(this), outerDeco = computeDocDeco(this)\n\n    let scroll = reconfigured ? \"reset\"\n        : state.scrollToSelection > prev.scrollToSelection ? \"to selection\" : \"preserve\"\n    let updateDoc = redraw || !this.docView.matchesNode(state.doc, outerDeco, innerDeco)\n    if (updateDoc || !state.selection.eq(prev.selection)) updateSel = true\n    let oldScrollPos = scroll == \"preserve\" && updateSel && this.dom.style.overflowAnchor == null && storeScrollPos(this)\n\n    if (updateSel) {\n      this.domObserver.stop()\n      // Work around an issue in Chrome, IE, and Edge where changing\n      // the DOM around an active selection puts it into a broken\n      // state where the thing the user sees differs from the\n      // selection reported by the Selection object (#710, #973,\n      // #1011, #1013, #1035).\n      let forceSelUpdate = updateDoc && (browser.ie || browser.chrome) && !this.composing &&\n          !prev.selection.empty && !state.selection.empty && selectionContextChanged(prev.selection, state.selection)\n      if (updateDoc) {\n        // If the node that the selection points into is written to,\n        // Chrome sometimes starts misreporting the selection, so this\n        // tracks that and forces a selection reset when our update\n        // did write to the node.\n        let chromeKludge = browser.chrome ? (this.trackWrites = this.root.getSelection().focusNode) : null\n        if (redraw || !this.docView.update(state.doc, outerDeco, innerDeco, this)) {\n          this.docView.updateOuterDeco([])\n          this.docView.destroy()\n          this.docView = docViewDesc(state.doc, outerDeco, innerDeco, this.dom, this)\n        }\n        if (chromeKludge && !this.trackWrites) forceSelUpdate = true\n      }\n      // Work around for an issue where an update arriving right between\n      // a DOM selection change and the \"selectionchange\" event for it\n      // can cause a spurious DOM selection update, disrupting mouse\n      // drag selection.\n      if (forceSelUpdate ||\n          !(this.mouseDown && this.domObserver.currentSelection.eq(this.root.getSelection()) && anchorInRightPlace(this))) {\n        selectionToDOM(this, forceSelUpdate)\n      } else {\n        syncNodeSelection(this, state.selection)\n        this.domObserver.setCurSelection()\n      }\n      this.domObserver.start()\n    }\n\n    this.updatePluginViews(prev)\n\n    if (scroll == \"reset\") {\n      this.dom.scrollTop = 0\n    } else if (scroll == \"to selection\") {\n      let startDOM = this.root.getSelection().focusNode\n      if (this.someProp(\"handleScrollToSelection\", f => f(this)))\n        {} // Handled\n      else if (state.selection instanceof NodeSelection)\n        scrollRectIntoView(this, this.docView.domAfterPos(state.selection.from).getBoundingClientRect(), startDOM)\n      else\n        scrollRectIntoView(this, this.coordsAtPos(state.selection.head, 1), startDOM)\n    } else if (oldScrollPos) {\n      resetScrollPos(oldScrollPos)\n    }\n  }\n\n  destroyPluginViews() {\n    let view\n    while (view = this.pluginViews.pop()) if (view.destroy) view.destroy()\n  }\n\n  updatePluginViews(prevState) {\n    if (!prevState || prevState.plugins != this.state.plugins || this.directPlugins != this.prevDirectPlugins) {\n      this.prevDirectPlugins = this.directPlugins\n      this.destroyPluginViews()\n      for (let i = 0; i < this.directPlugins.length; i++) {\n        let plugin = this.directPlugins[i]\n        if (plugin.spec.view) this.pluginViews.push(plugin.spec.view(this))\n      }\n      for (let i = 0; i < this.state.plugins.length; i++) {\n        let plugin = this.state.plugins[i]\n        if (plugin.spec.view) this.pluginViews.push(plugin.spec.view(this))\n      }\n    } else {\n      for (let i = 0; i < this.pluginViews.length; i++) {\n        let pluginView = this.pluginViews[i]\n        if (pluginView.update) pluginView.update(this, prevState)\n      }\n    }\n  }\n\n  // :: (string, ?(prop: *) \u2192 *) \u2192 *\n  // Goes over the values of a prop, first those provided directly,\n  // then those from plugins given to the view, then from plugins in\n  // the state (in order), and calls `f` every time a non-undefined\n  // value is found. When `f` returns a truthy value, that is\n  // immediately returned. When `f` isn't provided, it is treated as\n  // the identity function (the prop value is returned directly).\n  someProp(propName, f) {\n    let prop = this._props && this._props[propName], value\n    if (prop != null && (value = f ? f(prop) : prop)) return value\n    for (let i = 0; i < this.directPlugins.length; i++) {\n      let prop = this.directPlugins[i].props[propName]\n      if (prop != null && (value = f ? f(prop) : prop)) return value\n    }\n    let plugins = this.state.plugins\n    if (plugins) for (let i = 0; i < plugins.length; i++) {\n      let prop = plugins[i].props[propName]\n      if (prop != null && (value = f ? f(prop) : prop)) return value\n    }\n  }\n\n  // :: () \u2192 bool\n  // Query whether the view has focus.\n  hasFocus() {\n    return this.root.activeElement == this.dom\n  }\n\n  // :: ()\n  // Focus the editor.\n  focus() {\n    this.domObserver.stop()\n    if (this.editable) focusPreventScroll(this.dom)\n    selectionToDOM(this)\n    this.domObserver.start()\n  }\n\n  // :: union<dom.Document, dom.DocumentFragment>\n  // Get the document root in which the editor exists. This will\n  // usually be the top-level `document`, but might be a [shadow\n  // DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)\n  // root if the editor is inside one.\n  get root() {\n    let cached = this._root\n    if (cached == null) for (let search = this.dom.parentNode; search; search = search.parentNode) {\n      if (search.nodeType == 9 || (search.nodeType == 11 && search.host)) {\n        if (!search.getSelection) Object.getPrototypeOf(search).getSelection = () => document.getSelection()\n        return this._root = search\n      }\n    }\n    return cached || document\n  }\n\n  // :: ({left: number, top: number}) \u2192 ?{pos: number, inside: number}\n  // Given a pair of viewport coordinates, return the document\n  // position that corresponds to them. May return null if the given\n  // coordinates aren't inside of the editor. When an object is\n  // returned, its `pos` property is the position nearest to the\n  // coordinates, and its `inside` property holds the position of the\n  // inner node that the position falls inside of, or -1 if it is at\n  // the top level, not in any node.\n  posAtCoords(coords) {\n    return posAtCoords(this, coords)\n  }\n\n  // :: (number, number) \u2192 {left: number, right: number, top: number, bottom: number}\n  // Returns the viewport rectangle at a given document position.\n  // `left` and `right` will be the same number, as this returns a\n  // flat cursor-ish rectangle. If the position is between two things\n  // that aren't directly adjacent, `side` determines which element is\n  // used. When < 0, the element before the position is used,\n  // otherwise the element after.\n  coordsAtPos(pos, side = 1) {\n    return coordsAtPos(this, pos, side)\n  }\n\n  // :: (number, number) \u2192 {node: dom.Node, offset: number}\n  // Find the DOM position that corresponds to the given document\n  // position. When `side` is negative, find the position as close as\n  // possible to the content before the position. When positive,\n  // prefer positions close to the content after the position. When\n  // zero, prefer as shallow a position as possible.\n  //\n  // Note that you should **not** mutate the editor's internal DOM,\n  // only inspect it (and even that is usually not necessary).\n  domAtPos(pos, side = 0) {\n    return this.docView.domFromPos(pos, side)\n  }\n\n  // :: (number) \u2192 ?dom.Node\n  // Find the DOM node that represents the document node after the\n  // given position. May return `null` when the position doesn't point\n  // in front of a node or if the node is inside an opaque node view.\n  //\n  // This is intended to be able to call things like\n  // `getBoundingClientRect` on that DOM node. Do **not** mutate the\n  // editor DOM directly, or add styling this way, since that will be\n  // immediately overriden by the editor as it redraws the node.\n  nodeDOM(pos) {\n    let desc = this.docView.descAt(pos)\n    return desc ? desc.nodeDOM : null\n  }\n\n  // :: (dom.Node, number, ?number) \u2192 number\n  // Find the document position that corresponds to a given DOM\n  // position. (Whenever possible, it is preferable to inspect the\n  // document structure directly, rather than poking around in the\n  // DOM, but sometimes\u2014for example when interpreting an event\n  // target\u2014you don't have a choice.)\n  //\n  // The `bias` parameter can be used to influence which side of a DOM\n  // node to use when the position is inside a leaf node.\n  posAtDOM(node, offset, bias = -1) {\n    let pos = this.docView.posFromDOM(node, offset, bias)\n    if (pos == null) throw new RangeError(\"DOM position not inside the editor\")\n    return pos\n  }\n\n  // :: (union<\"up\", \"down\", \"left\", \"right\", \"forward\", \"backward\">, ?EditorState) \u2192 bool\n  // Find out whether the selection is at the end of a textblock when\n  // moving in a given direction. When, for example, given `\"left\"`,\n  // it will return true if moving left from the current cursor\n  // position would leave that position's parent textblock. Will apply\n  // to the view's current state by default, but it is possible to\n  // pass a different state.\n  endOfTextblock(dir, state) {\n    return endOfTextblock(this, state || this.state, dir)\n  }\n\n  // :: ()\n  // Removes the editor from the DOM and destroys all [node\n  // views](#view.NodeView).\n  destroy() {\n    if (!this.docView) return\n    destroyInput(this)\n    this.destroyPluginViews()\n    if (this.mounted) {\n      this.docView.update(this.state.doc, [], viewDecorations(this), this)\n      this.dom.textContent = \"\"\n    } else if (this.dom.parentNode) {\n      this.dom.parentNode.removeChild(this.dom)\n    }\n    this.docView.destroy()\n    this.docView = null\n  }\n\n  // :: boolean\n  // This is true when the view has been\n  // [destroyed](#view.EditorView.destroy) (and thus should not be\n  // used anymore).\n  get isDestroyed() {\n    return this.docView == null\n  }\n\n  // Used for testing.\n  dispatchEvent(event) {\n    return dispatchEvent(this, event)\n  }\n\n  // :: (Transaction)\n  // Dispatch a transaction. Will call\n  // [`dispatchTransaction`](#view.DirectEditorProps.dispatchTransaction)\n  // when given, and otherwise defaults to applying the transaction to\n  // the current state and calling\n  // [`updateState`](#view.EditorView.updateState) with the result.\n  // This method is bound to the view instance, so that it can be\n  // easily passed around.\n  dispatch(tr) {\n    let dispatchTransaction = this._props.dispatchTransaction\n    if (dispatchTransaction) dispatchTransaction.call(this, tr)\n    else this.updateState(this.state.apply(tr))\n  }\n}\n\nfunction computeDocDeco(view) {\n  let attrs = Object.create(null)\n  attrs.class = \"ProseMirror\"\n  attrs.contenteditable = String(view.editable)\n  attrs.translate = \"no\"\n\n  view.someProp(\"attributes\", value => {\n    if (typeof value == \"function\") value = value(view.state)\n    if (value) for (let attr in value) {\n      if (attr == \"class\")\n        attrs.class += \" \" + value[attr]\n      if (attr == \"style\") {\n        attrs.style = (attrs.style ? attrs.style + \";\" : \"\") + value[attr]\n      }\n      else if (!attrs[attr] && attr != \"contenteditable\" && attr != \"nodeName\")\n        attrs[attr] = String(value[attr])\n    }\n  })\n\n  return [Decoration.node(0, view.state.doc.content.size, attrs)]\n}\n\nfunction updateCursorWrapper(view) {\n  if (view.markCursor) {\n    let dom = document.createElement(\"img\")\n    dom.className = \"ProseMirror-separator\"\n    dom.setAttribute(\"mark-placeholder\", \"true\")\n    view.cursorWrapper = {dom, deco: Decoration.widget(view.state.selection.head, dom, {raw: true, marks: view.markCursor})}\n  } else {\n    view.cursorWrapper = null\n  }\n}\n\nfunction getEditable(view) {\n  return !view.someProp(\"editable\", value => value(view.state) === false)\n}\n\nfunction selectionContextChanged(sel1, sel2) {\n  let depth = Math.min(sel1.$anchor.sharedDepth(sel1.head), sel2.$anchor.sharedDepth(sel2.head))\n  return sel1.$anchor.start(depth) != sel2.$anchor.start(depth)\n}\n\nfunction buildNodeViews(view) {\n  let result = {}\n  view.someProp(\"nodeViews\", obj => {\n    for (let prop in obj) if (!Object.prototype.hasOwnProperty.call(result, prop))\n      result[prop] = obj[prop]\n  })\n  return result\n}\n\nfunction changedNodeViews(a, b) {\n  let nA = 0, nB = 0\n  for (let prop in a) {\n    if (a[prop] != b[prop]) return true\n    nA++\n  }\n  for (let _ in b) nB++\n  return nA != nB\n}\n\nfunction checkStateComponent(plugin) {\n  if (plugin.spec.state || plugin.spec.filterTransaction || plugin.spec.appendTransaction)\n    throw new RangeError(\"Plugins passed directly to the view must not have a state component\")\n}\n\n// EditorProps:: interface\n//\n// Props are configuration values that can be passed to an editor view\n// or included in a plugin. This interface lists the supported props.\n//\n// The various event-handling functions may all return `true` to\n// indicate that they handled the given event. The view will then take\n// care to call `preventDefault` on the event, except with\n// `handleDOMEvents`, where the handler itself is responsible for that.\n//\n// How a prop is resolved depends on the prop. Handler functions are\n// called one at a time, starting with the base props and then\n// searching through the plugins (in order of appearance) until one of\n// them returns true. For some props, the first plugin that yields a\n// value gets precedence.\n//\n//   handleDOMEvents:: ?Object<(view: EditorView, event: dom.Event) \u2192 bool>\n//   Can be an object mapping DOM event type names to functions that\n//   handle them. Such functions will be called before any handling\n//   ProseMirror does of events fired on the editable DOM element.\n//   Contrary to the other event handling props, when returning true\n//   from such a function, you are responsible for calling\n//   `preventDefault` yourself (or not, if you want to allow the\n//   default behavior).\n//\n//   handleKeyDown:: ?(view: EditorView, event: dom.KeyboardEvent) \u2192 bool\n//   Called when the editor receives a `keydown` event.\n//\n//   handleKeyPress:: ?(view: EditorView, event: dom.KeyboardEvent) \u2192 bool\n//   Handler for `keypress` events.\n//\n//   handleTextInput:: ?(view: EditorView, from: number, to: number, text: string) \u2192 bool\n//   Whenever the user directly input text, this handler is called\n//   before the input is applied. If it returns `true`, the default\n//   behavior of actually inserting the text is suppressed.\n//\n//   handleClickOn:: ?(view: EditorView, pos: number, node: Node, nodePos: number, event: dom.MouseEvent, direct: bool) \u2192 bool\n//   Called for each node around a click, from the inside out. The\n//   `direct` flag will be true for the inner node.\n//\n//   handleClick:: ?(view: EditorView, pos: number, event: dom.MouseEvent) \u2192 bool\n//   Called when the editor is clicked, after `handleClickOn` handlers\n//   have been called.\n//\n//   handleDoubleClickOn:: ?(view: EditorView, pos: number, node: Node, nodePos: number, event: dom.MouseEvent, direct: bool) \u2192 bool\n//   Called for each node around a double click.\n//\n//   handleDoubleClick:: ?(view: EditorView, pos: number, event: dom.MouseEvent) \u2192 bool\n//   Called when the editor is double-clicked, after `handleDoubleClickOn`.\n//\n//   handleTripleClickOn:: ?(view: EditorView, pos: number, node: Node, nodePos: number, event: dom.MouseEvent, direct: bool) \u2192 bool\n//   Called for each node around a triple click.\n//\n//   handleTripleClick:: ?(view: EditorView, pos: number, event: dom.MouseEvent) \u2192 bool\n//   Called when the editor is triple-clicked, after `handleTripleClickOn`.\n//\n//   handlePaste:: ?(view: EditorView, event: dom.ClipboardEvent, slice: Slice) \u2192 bool\n//   Can be used to override the behavior of pasting. `slice` is the\n//   pasted content parsed by the editor, but you can directly access\n//   the event to get at the raw content.\n//\n//   handleDrop:: ?(view: EditorView, event: dom.Event, slice: Slice, moved: bool) \u2192 bool\n//   Called when something is dropped on the editor. `moved` will be\n//   true if this drop moves from the current selection (which should\n//   thus be deleted).\n//\n//   handleScrollToSelection:: ?(view: EditorView) \u2192 bool\n//   Called when the view, after updating its state, tries to scroll\n//   the selection into view. A handler function may return false to\n//   indicate that it did not handle the scrolling and further\n//   handlers or the default behavior should be tried.\n//\n//   createSelectionBetween:: ?(view: EditorView, anchor: ResolvedPos, head: ResolvedPos) \u2192 ?Selection\n//   Can be used to override the way a selection is created when\n//   reading a DOM selection between the given anchor and head.\n//\n//   domParser:: ?DOMParser\n//   The [parser](#model.DOMParser) to use when reading editor changes\n//   from the DOM. Defaults to calling\n//   [`DOMParser.fromSchema`](#model.DOMParser^fromSchema) on the\n//   editor's schema.\n//\n//   transformPastedHTML:: ?(html: string) \u2192 string\n//   Can be used to transform pasted HTML text, _before_ it is parsed,\n//   for example to clean it up.\n//\n//   clipboardParser:: ?DOMParser\n//   The [parser](#model.DOMParser) to use when reading content from\n//   the clipboard. When not given, the value of the\n//   [`domParser`](#view.EditorProps.domParser) prop is used.\n//\n//   transformPastedText:: ?(text: string, plain: bool) \u2192 string\n//   Transform pasted plain text. The `plain` flag will be true when\n//   the text is pasted as plain text.\n//\n//   clipboardTextParser:: ?(text: string, $context: ResolvedPos, plain: bool) \u2192 Slice\n//   A function to parse text from the clipboard into a document\n//   slice. Called after\n//   [`transformPastedText`](#view.EditorProps.transformPastedText).\n//   The default behavior is to split the text into lines, wrap them\n//   in `<p>` tags, and call\n//   [`clipboardParser`](#view.EditorProps.clipboardParser) on it.\n//   The `plain` flag will be true when the text is pasted as plain text.\n//\n//   transformPasted:: ?(Slice) \u2192 Slice\n//   Can be used to transform pasted content before it is applied to\n//   the document.\n//\n//   nodeViews:: ?Object<(node: Node, view: EditorView, getPos: () \u2192 number, decorations: [Decoration], innerDecorations: DecorationSource) \u2192 NodeView>\n//   Allows you to pass custom rendering and behavior logic for nodes\n//   and marks. Should map node and mark names to constructor\n//   functions that produce a [`NodeView`](#view.NodeView) object\n//   implementing the node's display behavior. For nodes, the third\n//   argument `getPos` is a function that can be called to get the\n//   node's current position, which can be useful when creating\n//   transactions to update it. For marks, the third argument is a\n//   boolean that indicates whether the mark's content is inline.\n//\n//   `decorations` is an array of node or inline decorations that are\n//   active around the node. They are automatically drawn in the\n//   normal way, and you will usually just want to ignore this, but\n//   they can also be used as a way to provide context information to\n//   the node view without adding it to the document itself.\n//\n//   `innerDecorations` holds the decorations for the node's content.\n//   You can safely ignore this if your view has no content or a\n//   `contentDOM` property, since the editor will draw the decorations\n//   on the content. But if you, for example, want to create a nested\n//   editor with the content, it may make sense to provide it with the\n//   inner decorations.\n//\n//   clipboardSerializer:: ?DOMSerializer\n//   The DOM serializer to use when putting content onto the\n//   clipboard. If not given, the result of\n//   [`DOMSerializer.fromSchema`](#model.DOMSerializer^fromSchema)\n//   will be used.\n//\n//   clipboardTextSerializer:: ?(Slice) \u2192 string\n//   A function that will be called to get the text for the current\n//   selection when copying text to the clipboard. By default, the\n//   editor will use [`textBetween`](#model.Node.textBetween) on the\n//   selected range.\n//\n//   decorations:: ?(state: EditorState) \u2192 ?DecorationSource\n//   A set of [document decorations](#view.Decoration) to show in the\n//   view.\n//\n//   editable:: ?(state: EditorState) \u2192 bool\n//   When this returns false, the content of the view is not directly\n//   editable.\n//\n//   attributes:: ?union<Object<string>, (EditorState) \u2192 ?Object<string>>\n//   Control the DOM attributes of the editable element. May be either\n//   an object or a function going from an editor state to an object.\n//   By default, the element will get a class `\"ProseMirror\"`, and\n//   will have its `contentEditable` attribute determined by the\n//   [`editable` prop](#view.EditorProps.editable). Additional classes\n//   provided here will be added to the class. For other attributes,\n//   the value provided first (as in\n//   [`someProp`](#view.EditorView.someProp)) will be used.\n//\n//   scrollThreshold:: ?union<number, {top: number, right: number, bottom: number, left: number}>\n//   Determines the distance (in pixels) between the cursor and the\n//   end of the visible viewport at which point, when scrolling the\n//   cursor into view, scrolling takes place. Defaults to 0.\n//\n//   scrollMargin:: ?union<number, {top: number, right: number, bottom: number, left: number}>\n//   Determines the extra space (in pixels) that is left above or\n//   below the cursor when it is scrolled into view. Defaults to 5.\n\n// DirectEditorProps:: interface extends EditorProps\n//\n// The props object given directly to the editor view supports two\n// fields that can't be used in plugins:\n//\n//   state:: EditorState\n//   The current state of the editor.\n//\n//   plugins:: [Plugin]\n//   A set of plugins to use in the view, applying their [plugin\n//   view](#state.PluginSpec.view) and\n//   [props](#state.PluginSpec.props). Passing plugins with a state\n//   component (a [state field](#state.PluginSpec.state) field or a\n//   [transaction](#state.PluginSpec.filterTransaction) filter or\n//   appender) will result in an error, since such plugins must be\n//   present in the state to work.\n//\n//   dispatchTransaction:: ?(tr: Transaction)\n//   The callback over which to send transactions (state updates)\n//   produced by the view. If you specify this, you probably want to\n//   make sure this ends up calling the view's\n//   [`updateState`](#view.EditorView.updateState) method with a new\n//   state that has the transaction\n//   [applied](#state.EditorState.apply). The callback will be bound to have\n//   the view instance as its `this` binding.\n", "var GOOD_LEAF_SIZE = 200;\n\n// :: class<T> A rope sequence is a persistent sequence data structure\n// that supports appending, prepending, and slicing without doing a\n// full copy. It is represented as a mostly-balanced tree.\nvar RopeSequence = function RopeSequence () {};\n\nRopeSequence.prototype.append = function append (other) {\n  if (!other.length) { return this }\n  other = RopeSequence.from(other);\n\n  return (!this.length && other) ||\n    (other.length < GOOD_LEAF_SIZE && this.leafAppend(other)) ||\n    (this.length < GOOD_LEAF_SIZE && other.leafPrepend(this)) ||\n    this.appendInner(other)\n};\n\n// :: (union<[T], RopeSequence<T>>) \u2192 RopeSequence<T>\n// Prepend an array or other rope to this one, returning a new rope.\nRopeSequence.prototype.prepend = function prepend (other) {\n  if (!other.length) { return this }\n  return RopeSequence.from(other).append(this)\n};\n\nRopeSequence.prototype.appendInner = function appendInner (other) {\n  return new Append(this, other)\n};\n\n// :: (?number, ?number) \u2192 RopeSequence<T>\n// Create a rope repesenting a sub-sequence of this rope.\nRopeSequence.prototype.slice = function slice (from, to) {\n    if ( from === void 0 ) from = 0;\n    if ( to === void 0 ) to = this.length;\n\n  if (from >= to) { return RopeSequence.empty }\n  return this.sliceInner(Math.max(0, from), Math.min(this.length, to))\n};\n\n// :: (number) \u2192 T\n// Retrieve the element at the given position from this rope.\nRopeSequence.prototype.get = function get (i) {\n  if (i < 0 || i >= this.length) { return undefined }\n  return this.getInner(i)\n};\n\n// :: ((element: T, index: number) \u2192 ?bool, ?number, ?number)\n// Call the given function for each element between the given\n// indices. This tends to be more efficient than looping over the\n// indices and calling `get`, because it doesn't have to descend the\n// tree for every element.\nRopeSequence.prototype.forEach = function forEach (f, from, to) {\n    if ( from === void 0 ) from = 0;\n    if ( to === void 0 ) to = this.length;\n\n  if (from <= to)\n    { this.forEachInner(f, from, to, 0); }\n  else\n    { this.forEachInvertedInner(f, from, to, 0); }\n};\n\n// :: ((element: T, index: number) \u2192 U, ?number, ?number) \u2192 [U]\n// Map the given functions over the elements of the rope, producing\n// a flat array.\nRopeSequence.prototype.map = function map (f, from, to) {\n    if ( from === void 0 ) from = 0;\n    if ( to === void 0 ) to = this.length;\n\n  var result = [];\n  this.forEach(function (elt, i) { return result.push(f(elt, i)); }, from, to);\n  return result\n};\n\n// :: (?union<[T], RopeSequence<T>>) \u2192 RopeSequence<T>\n// Create a rope representing the given array, or return the rope\n// itself if a rope was given.\nRopeSequence.from = function from (values) {\n  if (values instanceof RopeSequence) { return values }\n  return values && values.length ? new Leaf(values) : RopeSequence.empty\n};\n\nvar Leaf = /*@__PURE__*/(function (RopeSequence) {\n  function Leaf(values) {\n    RopeSequence.call(this);\n    this.values = values;\n  }\n\n  if ( RopeSequence ) Leaf.__proto__ = RopeSequence;\n  Leaf.prototype = Object.create( RopeSequence && RopeSequence.prototype );\n  Leaf.prototype.constructor = Leaf;\n\n  var prototypeAccessors = { length: { configurable: true },depth: { configurable: true } };\n\n  Leaf.prototype.flatten = function flatten () {\n    return this.values\n  };\n\n  Leaf.prototype.sliceInner = function sliceInner (from, to) {\n    if (from == 0 && to == this.length) { return this }\n    return new Leaf(this.values.slice(from, to))\n  };\n\n  Leaf.prototype.getInner = function getInner (i) {\n    return this.values[i]\n  };\n\n  Leaf.prototype.forEachInner = function forEachInner (f, from, to, start) {\n    for (var i = from; i < to; i++)\n      { if (f(this.values[i], start + i) === false) { return false } }\n  };\n\n  Leaf.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {\n    for (var i = from - 1; i >= to; i--)\n      { if (f(this.values[i], start + i) === false) { return false } }\n  };\n\n  Leaf.prototype.leafAppend = function leafAppend (other) {\n    if (this.length + other.length <= GOOD_LEAF_SIZE)\n      { return new Leaf(this.values.concat(other.flatten())) }\n  };\n\n  Leaf.prototype.leafPrepend = function leafPrepend (other) {\n    if (this.length + other.length <= GOOD_LEAF_SIZE)\n      { return new Leaf(other.flatten().concat(this.values)) }\n  };\n\n  prototypeAccessors.length.get = function () { return this.values.length };\n\n  prototypeAccessors.depth.get = function () { return 0 };\n\n  Object.defineProperties( Leaf.prototype, prototypeAccessors );\n\n  return Leaf;\n}(RopeSequence));\n\n// :: RopeSequence\n// The empty rope sequence.\nRopeSequence.empty = new Leaf([]);\n\nvar Append = /*@__PURE__*/(function (RopeSequence) {\n  function Append(left, right) {\n    RopeSequence.call(this);\n    this.left = left;\n    this.right = right;\n    this.length = left.length + right.length;\n    this.depth = Math.max(left.depth, right.depth) + 1;\n  }\n\n  if ( RopeSequence ) Append.__proto__ = RopeSequence;\n  Append.prototype = Object.create( RopeSequence && RopeSequence.prototype );\n  Append.prototype.constructor = Append;\n\n  Append.prototype.flatten = function flatten () {\n    return this.left.flatten().concat(this.right.flatten())\n  };\n\n  Append.prototype.getInner = function getInner (i) {\n    return i < this.left.length ? this.left.get(i) : this.right.get(i - this.left.length)\n  };\n\n  Append.prototype.forEachInner = function forEachInner (f, from, to, start) {\n    var leftLen = this.left.length;\n    if (from < leftLen &&\n        this.left.forEachInner(f, from, Math.min(to, leftLen), start) === false)\n      { return false }\n    if (to > leftLen &&\n        this.right.forEachInner(f, Math.max(from - leftLen, 0), Math.min(this.length, to) - leftLen, start + leftLen) === false)\n      { return false }\n  };\n\n  Append.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {\n    var leftLen = this.left.length;\n    if (from > leftLen &&\n        this.right.forEachInvertedInner(f, from - leftLen, Math.max(to, leftLen) - leftLen, start + leftLen) === false)\n      { return false }\n    if (to < leftLen &&\n        this.left.forEachInvertedInner(f, Math.min(from, leftLen), to, start) === false)\n      { return false }\n  };\n\n  Append.prototype.sliceInner = function sliceInner (from, to) {\n    if (from == 0 && to == this.length) { return this }\n    var leftLen = this.left.length;\n    if (to <= leftLen) { return this.left.slice(from, to) }\n    if (from >= leftLen) { return this.right.slice(from - leftLen, to - leftLen) }\n    return this.left.slice(from, leftLen).append(this.right.slice(0, to - leftLen))\n  };\n\n  Append.prototype.leafAppend = function leafAppend (other) {\n    var inner = this.right.leafAppend(other);\n    if (inner) { return new Append(this.left, inner) }\n  };\n\n  Append.prototype.leafPrepend = function leafPrepend (other) {\n    var inner = this.left.leafPrepend(other);\n    if (inner) { return new Append(inner, this.right) }\n  };\n\n  Append.prototype.appendInner = function appendInner (other) {\n    if (this.left.depth >= Math.max(this.right.depth, other.depth) + 1)\n      { return new Append(this.left, new Append(this.right, other)) }\n    return new Append(this, other)\n  };\n\n  return Append;\n}(RopeSequence));\n\nvar ropeSequence = RopeSequence;\n\nexport default ropeSequence;\n", "import RopeSequence from \"rope-sequence\"\nimport {Mapping} from \"prosemirror-transform\"\nimport {Plugin, PluginKey} from \"prosemirror-state\"\n\n// ProseMirror's history isn't simply a way to roll back to a previous\n// state, because ProseMirror supports applying changes without adding\n// them to the history (for example during collaboration).\n//\n// To this end, each 'Branch' (one for the undo history and one for\n// the redo history) keeps an array of 'Items', which can optionally\n// hold a step (an actual undoable change), and always hold a position\n// map (which is needed to move changes below them to apply to the\n// current document).\n//\n// An item that has both a step and a selection bookmark is the start\n// of an 'event' \u2014 a group of changes that will be undone or redone at\n// once. (It stores only the bookmark, since that way we don't have to\n// provide a document until the selection is actually applied, which\n// is useful when compressing.)\n\n// Used to schedule history compression\nconst max_empty_items = 500\n\nclass Branch {\n  constructor(items, eventCount) {\n    this.items = items\n    this.eventCount = eventCount\n  }\n\n  // : (EditorState, bool) \u2192 ?{transform: Transform, selection: ?SelectionBookmark, remaining: Branch}\n  // Pop the latest event off the branch's history and apply it\n  // to a document transform.\n  popEvent(state, preserveItems) {\n    if (this.eventCount == 0) return null\n\n    let end = this.items.length\n    for (;; end--) {\n      let next = this.items.get(end - 1)\n      if (next.selection) { --end; break }\n    }\n\n    let remap, mapFrom\n    if (preserveItems) {\n      remap = this.remapping(end, this.items.length)\n      mapFrom = remap.maps.length\n    }\n    let transform = state.tr\n    let selection, remaining\n    let addAfter = [], addBefore = []\n\n    this.items.forEach((item, i) => {\n      if (!item.step) {\n        if (!remap) {\n          remap = this.remapping(end, i + 1)\n          mapFrom = remap.maps.length\n        }\n        mapFrom--\n        addBefore.push(item)\n        return\n      }\n\n      if (remap) {\n        addBefore.push(new Item(item.map))\n        let step = item.step.map(remap.slice(mapFrom)), map\n\n        if (step && transform.maybeStep(step).doc) {\n          map = transform.mapping.maps[transform.mapping.maps.length - 1]\n          addAfter.push(new Item(map, null, null, addAfter.length + addBefore.length))\n        }\n        mapFrom--\n        if (map) remap.appendMap(map, mapFrom)\n      } else {\n        transform.maybeStep(item.step)\n      }\n\n      if (item.selection) {\n        selection = remap ? item.selection.map(remap.slice(mapFrom)) : item.selection\n        remaining = new Branch(this.items.slice(0, end).append(addBefore.reverse().concat(addAfter)), this.eventCount - 1)\n        return false\n      }\n    }, this.items.length, 0)\n\n    return {remaining, transform, selection}\n  }\n\n  // : (Transform, ?SelectionBookmark, Object) \u2192 Branch\n  // Create a new branch with the given transform added.\n  addTransform(transform, selection, histOptions, preserveItems) {\n    let newItems = [], eventCount = this.eventCount\n    let oldItems = this.items, lastItem = !preserveItems && oldItems.length ? oldItems.get(oldItems.length - 1) : null\n\n    for (let i = 0; i < transform.steps.length; i++) {\n      let step = transform.steps[i].invert(transform.docs[i])\n      let item = new Item(transform.mapping.maps[i], step, selection), merged\n      if (merged = lastItem && lastItem.merge(item)) {\n        item = merged\n        if (i) newItems.pop()\n        else oldItems = oldItems.slice(0, oldItems.length - 1)\n      }\n      newItems.push(item)\n      if (selection) {\n        eventCount++\n        selection = null\n      }\n      if (!preserveItems) lastItem = item\n    }\n    let overflow = eventCount - histOptions.depth\n    if (overflow > DEPTH_OVERFLOW) {\n      oldItems = cutOffEvents(oldItems, overflow)\n      eventCount -= overflow\n    }\n    return new Branch(oldItems.append(newItems), eventCount)\n  }\n\n  remapping(from, to) {\n    let maps = new Mapping\n    this.items.forEach((item, i) => {\n      let mirrorPos = item.mirrorOffset != null && i - item.mirrorOffset >= from\n          ? maps.maps.length - item.mirrorOffset : null\n      maps.appendMap(item.map, mirrorPos)\n    }, from, to)\n    return maps\n  }\n\n  addMaps(array) {\n    if (this.eventCount == 0) return this\n    return new Branch(this.items.append(array.map(map => new Item(map))), this.eventCount)\n  }\n\n  // : (Transform, number)\n  // When the collab module receives remote changes, the history has\n  // to know about those, so that it can adjust the steps that were\n  // rebased on top of the remote changes, and include the position\n  // maps for the remote changes in its array of items.\n  rebased(rebasedTransform, rebasedCount) {\n    if (!this.eventCount) return this\n\n    let rebasedItems = [], start = Math.max(0, this.items.length - rebasedCount)\n\n    let mapping = rebasedTransform.mapping\n    let newUntil = rebasedTransform.steps.length\n    let eventCount = this.eventCount\n    this.items.forEach(item => { if (item.selection) eventCount-- }, start)\n\n    let iRebased = rebasedCount\n    this.items.forEach(item => {\n      let pos = mapping.getMirror(--iRebased)\n      if (pos == null) return\n      newUntil = Math.min(newUntil, pos)\n      let map = mapping.maps[pos]\n      if (item.step) {\n        let step = rebasedTransform.steps[pos].invert(rebasedTransform.docs[pos])\n        let selection = item.selection && item.selection.map(mapping.slice(iRebased + 1, pos))\n        if (selection) eventCount++\n        rebasedItems.push(new Item(map, step, selection))\n      } else {\n        rebasedItems.push(new Item(map))\n      }\n    }, start)\n\n    let newMaps = []\n    for (let i = rebasedCount; i < newUntil; i++)\n      newMaps.push(new Item(mapping.maps[i]))\n    let items = this.items.slice(0, start).append(newMaps).append(rebasedItems)\n    let branch = new Branch(items, eventCount)\n\n    if (branch.emptyItemCount() > max_empty_items)\n      branch = branch.compress(this.items.length - rebasedItems.length)\n    return branch\n  }\n\n  emptyItemCount() {\n    let count = 0\n    this.items.forEach(item => { if (!item.step) count++ })\n    return count\n  }\n\n  // Compressing a branch means rewriting it to push the air (map-only\n  // items) out. During collaboration, these naturally accumulate\n  // because each remote change adds one. The `upto` argument is used\n  // to ensure that only the items below a given level are compressed,\n  // because `rebased` relies on a clean, untouched set of items in\n  // order to associate old items with rebased steps.\n  compress(upto = this.items.length) {\n    let remap = this.remapping(0, upto), mapFrom = remap.maps.length\n    let items = [], events = 0\n    this.items.forEach((item, i) => {\n      if (i >= upto) {\n        items.push(item)\n        if (item.selection) events++\n      } else if (item.step) {\n        let step = item.step.map(remap.slice(mapFrom)), map = step && step.getMap()\n        mapFrom--\n        if (map) remap.appendMap(map, mapFrom)\n        if (step) {\n          let selection = item.selection && item.selection.map(remap.slice(mapFrom))\n          if (selection) events++\n          let newItem = new Item(map.invert(), step, selection), merged, last = items.length - 1\n          if (merged = items.length && items[last].merge(newItem))\n            items[last] = merged\n          else\n            items.push(newItem)\n        }\n      } else if (item.map) {\n        mapFrom--\n      }\n    }, this.items.length, 0)\n    return new Branch(RopeSequence.from(items.reverse()), events)\n  }\n}\n\nBranch.empty = new Branch(RopeSequence.empty, 0)\n\nfunction cutOffEvents(items, n) {\n  let cutPoint\n  items.forEach((item, i) => {\n    if (item.selection && (n-- == 0)) {\n      cutPoint = i\n      return false\n    }\n  })\n  return items.slice(cutPoint)\n}\n\nclass Item {\n  constructor(map, step, selection, mirrorOffset) {\n    // The (forward) step map for this item.\n    this.map = map\n    // The inverted step\n    this.step = step\n    // If this is non-null, this item is the start of a group, and\n    // this selection is the starting selection for the group (the one\n    // that was active before the first step was applied)\n    this.selection = selection\n    // If this item is the inverse of a previous mapping on the stack,\n    // this points at the inverse's offset\n    this.mirrorOffset = mirrorOffset\n  }\n\n  merge(other) {\n    if (this.step && other.step && !other.selection) {\n      let step = other.step.merge(this.step)\n      if (step) return new Item(step.getMap().invert(), step, this.selection)\n    }\n  }\n}\n\n// The value of the state field that tracks undo/redo history for that\n// state. Will be stored in the plugin state when the history plugin\n// is active.\nexport class HistoryState {\n  constructor(done, undone, prevRanges, prevTime) {\n    this.done = done\n    this.undone = undone\n    this.prevRanges = prevRanges\n    this.prevTime = prevTime\n  }\n}\n\nconst DEPTH_OVERFLOW = 20\n\n// : (HistoryState, EditorState, Transaction, Object)\n// Record a transformation in undo history.\nfunction applyTransaction(history, state, tr, options) {\n  let historyTr = tr.getMeta(historyKey), rebased\n  if (historyTr) return historyTr.historyState\n\n  if (tr.getMeta(closeHistoryKey)) history = new HistoryState(history.done, history.undone, null, 0)\n\n  let appended = tr.getMeta(\"appendedTransaction\")\n\n  if (tr.steps.length == 0) {\n    return history\n  } else if (appended && appended.getMeta(historyKey)) {\n    if (appended.getMeta(historyKey).redo)\n      return new HistoryState(history.done.addTransform(tr, null, options, mustPreserveItems(state)),\n                              history.undone, rangesFor(tr.mapping.maps[tr.steps.length - 1]), history.prevTime)\n    else\n      return new HistoryState(history.done, history.undone.addTransform(tr, null, options, mustPreserveItems(state)),\n                              null, history.prevTime)\n  } else if (tr.getMeta(\"addToHistory\") !== false && !(appended && appended.getMeta(\"addToHistory\") === false)) {\n    // Group transforms that occur in quick succession into one event.\n    let newGroup = history.prevTime == 0 || !appended && (history.prevTime < (tr.time || 0) - options.newGroupDelay ||\n                                                          !isAdjacentTo(tr, history.prevRanges))\n    let prevRanges = appended ? mapRanges(history.prevRanges, tr.mapping) : rangesFor(tr.mapping.maps[tr.steps.length - 1])\n    return new HistoryState(history.done.addTransform(tr, newGroup ? state.selection.getBookmark() : null,\n                                                      options, mustPreserveItems(state)),\n                            Branch.empty, prevRanges, tr.time)\n  } else if (rebased = tr.getMeta(\"rebased\")) {\n    // Used by the collab module to tell the history that some of its\n    // content has been rebased.\n    return new HistoryState(history.done.rebased(tr, rebased),\n                            history.undone.rebased(tr, rebased),\n                            mapRanges(history.prevRanges, tr.mapping), history.prevTime)\n  } else {\n    return new HistoryState(history.done.addMaps(tr.mapping.maps),\n                            history.undone.addMaps(tr.mapping.maps),\n                            mapRanges(history.prevRanges, tr.mapping), history.prevTime)\n  }\n}\n\nfunction isAdjacentTo(transform, prevRanges) {\n  if (!prevRanges) return false\n  if (!transform.docChanged) return true\n  let adjacent = false\n  transform.mapping.maps[0].forEach((start, end) => {\n    for (let i = 0; i < prevRanges.length; i += 2)\n      if (start <= prevRanges[i + 1] && end >= prevRanges[i])\n        adjacent = true\n  })\n  return adjacent\n}\n\nfunction rangesFor(map) {\n  let result = []\n  map.forEach((_from, _to, from, to) => result.push(from, to))\n  return result\n}\n\nfunction mapRanges(ranges, mapping) {\n  if (!ranges) return null\n  let result = []\n  for (let i = 0; i < ranges.length; i += 2) {\n    let from = mapping.map(ranges[i], 1), to = mapping.map(ranges[i + 1], -1)\n    if (from <= to) result.push(from, to)\n  }\n  return result\n}\n\n// : (HistoryState, EditorState, (tr: Transaction), bool)\n// Apply the latest event from one branch to the document and shift the event\n// onto the other branch.\nfunction histTransaction(history, state, dispatch, redo) {\n  let preserveItems = mustPreserveItems(state), histOptions = historyKey.get(state).spec.config\n  let pop = (redo ? history.undone : history.done).popEvent(state, preserveItems)\n  if (!pop) return\n\n  let selection = pop.selection.resolve(pop.transform.doc)\n  let added = (redo ? history.done : history.undone).addTransform(pop.transform, state.selection.getBookmark(),\n                                                                  histOptions, preserveItems)\n\n  let newHist = new HistoryState(redo ? added : pop.remaining, redo ? pop.remaining : added, null, 0)\n  dispatch(pop.transform.setSelection(selection).setMeta(historyKey, {redo, historyState: newHist}).scrollIntoView())\n}\n\nlet cachedPreserveItems = false, cachedPreserveItemsPlugins = null\n// Check whether any plugin in the given state has a\n// `historyPreserveItems` property in its spec, in which case we must\n// preserve steps exactly as they came in, so that they can be\n// rebased.\nfunction mustPreserveItems(state) {\n  let plugins = state.plugins\n  if (cachedPreserveItemsPlugins != plugins) {\n    cachedPreserveItems = false\n    cachedPreserveItemsPlugins = plugins\n    for (let i = 0; i < plugins.length; i++) if (plugins[i].spec.historyPreserveItems) {\n      cachedPreserveItems = true\n      break\n    }\n  }\n  return cachedPreserveItems\n}\n\n// :: (Transaction) \u2192 Transaction\n// Set a flag on the given transaction that will prevent further steps\n// from being appended to an existing history event (so that they\n// require a separate undo command to undo).\nexport function closeHistory(tr) {\n  return tr.setMeta(closeHistoryKey, true)\n}\n\nconst historyKey = new PluginKey(\"history\")\nconst closeHistoryKey = new PluginKey(\"closeHistory\")\n\n// :: (?Object) \u2192 Plugin\n// Returns a plugin that enables the undo history for an editor. The\n// plugin will track undo and redo stacks, which can be used with the\n// [`undo`](#history.undo) and [`redo`](#history.redo) commands.\n//\n// You can set an `\"addToHistory\"` [metadata\n// property](#state.Transaction.setMeta) of `false` on a transaction\n// to prevent it from being rolled back by undo.\n//\n//   config::-\n//   Supports the following configuration options:\n//\n//     depth:: ?number\n//     The amount of history events that are collected before the\n//     oldest events are discarded. Defaults to 100.\n//\n//     newGroupDelay:: ?number\n//     The delay between changes after which a new group should be\n//     started. Defaults to 500 (milliseconds). Note that when changes\n//     aren't adjacent, a new group is always started.\nexport function history(config) {\n  config = {depth: config && config.depth || 100,\n            newGroupDelay: config && config.newGroupDelay || 500}\n  return new Plugin({\n    key: historyKey,\n\n    state: {\n      init() {\n        return new HistoryState(Branch.empty, Branch.empty, null, 0)\n      },\n      apply(tr, hist, state) {\n        return applyTransaction(hist, state, tr, config)\n      }\n    },\n\n    config,\n\n    props: {\n      handleDOMEvents: {\n        beforeinput(view, e) {\n          let handled = e.inputType == \"historyUndo\" ? undo(view.state, view.dispatch) :\n              e.inputType == \"historyRedo\" ? redo(view.state, view.dispatch) : false\n          if (handled) e.preventDefault()\n          return handled\n        }\n      }\n    }\n  })\n}\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// A command function that undoes the last change, if any.\nexport function undo(state, dispatch) {\n  let hist = historyKey.getState(state)\n  if (!hist || hist.done.eventCount == 0) return false\n  if (dispatch) histTransaction(hist, state, dispatch, false)\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// A command function that redoes the last undone change, if any.\nexport function redo(state, dispatch) {\n  let hist = historyKey.getState(state)\n  if (!hist || hist.undone.eventCount == 0) return false\n  if (dispatch) histTransaction(hist, state, dispatch, true)\n  return true\n}\n\n// :: (EditorState) \u2192 number\n// The amount of undoable events available in a given state.\nexport function undoDepth(state) {\n  let hist = historyKey.getState(state)\n  return hist ? hist.done.eventCount : 0\n}\n\n// :: (EditorState) \u2192 number\n// The amount of redoable events available in a given editor state.\nexport function redoDepth(state) {\n  let hist = historyKey.getState(state)\n  return hist ? hist.undone.eventCount : 0\n}\n", "export var base = {\n  8: \"Backspace\",\n  9: \"Tab\",\n  10: \"Enter\",\n  12: \"NumLock\",\n  13: \"Enter\",\n  16: \"Shift\",\n  17: \"Control\",\n  18: \"Alt\",\n  20: \"CapsLock\",\n  27: \"Escape\",\n  32: \" \",\n  33: \"PageUp\",\n  34: \"PageDown\",\n  35: \"End\",\n  36: \"Home\",\n  37: \"ArrowLeft\",\n  38: \"ArrowUp\",\n  39: \"ArrowRight\",\n  40: \"ArrowDown\",\n  44: \"PrintScreen\",\n  45: \"Insert\",\n  46: \"Delete\",\n  59: \";\",\n  61: \"=\",\n  91: \"Meta\",\n  92: \"Meta\",\n  106: \"*\",\n  107: \"+\",\n  108: \",\",\n  109: \"-\",\n  110: \".\",\n  111: \"/\",\n  144: \"NumLock\",\n  145: \"ScrollLock\",\n  160: \"Shift\",\n  161: \"Shift\",\n  162: \"Control\",\n  163: \"Control\",\n  164: \"Alt\",\n  165: \"Alt\",\n  173: \"-\",\n  186: \";\",\n  187: \"=\",\n  188: \",\",\n  189: \"-\",\n  190: \".\",\n  191: \"/\",\n  192: \"`\",\n  219: \"[\",\n  220: \"\\\\\",\n  221: \"]\",\n  222: \"'\",\n  229: \"q\"\n}\n\nexport var shift = {\n  48: \")\",\n  49: \"!\",\n  50: \"@\",\n  51: \"#\",\n  52: \"$\",\n  53: \"%\",\n  54: \"^\",\n  55: \"&\",\n  56: \"*\",\n  57: \"(\",\n  59: \":\",\n  61: \"+\",\n  173: \"_\",\n  186: \":\",\n  187: \"+\",\n  188: \"<\",\n  189: \"_\",\n  190: \">\",\n  191: \"?\",\n  192: \"~\",\n  219: \"{\",\n  220: \"|\",\n  221: \"}\",\n  222: \"\\\"\",\n  229: \"Q\"\n}\n\nvar chrome = typeof navigator != \"undefined\" && /Chrome\\/(\\d+)/.exec(navigator.userAgent)\nvar safari = typeof navigator != \"undefined\" && /Apple Computer/.test(navigator.vendor)\nvar gecko = typeof navigator != \"undefined\" && /Gecko\\/\\d+/.test(navigator.userAgent)\nvar mac = typeof navigator != \"undefined\" && /Mac/.test(navigator.platform)\nvar ie = typeof navigator != \"undefined\" && /MSIE \\d|Trident\\/(?:[7-9]|\\d{2,})\\..*rv:(\\d+)/.exec(navigator.userAgent)\nvar brokenModifierNames = chrome && (mac || +chrome[1] < 57) || gecko && mac\n\n// Fill in the digit keys\nfor (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i)\n\n// The function keys\nfor (var i = 1; i <= 24; i++) base[i + 111] = \"F\" + i\n\n// And the alphabetic keys\nfor (var i = 65; i <= 90; i++) {\n  base[i] = String.fromCharCode(i + 32)\n  shift[i] = String.fromCharCode(i)\n}\n\n// For each code that doesn't have a shift-equivalent, copy the base name\nfor (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code]\n\nexport function keyName(event) {\n  // Don't trust event.key in Chrome when there are modifiers until\n  // they fix https://bugs.chromium.org/p/chromium/issues/detail?id=633838\n  var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) ||\n    (safari || ie) && event.shiftKey && event.key && event.key.length == 1\n  var name = (!ignoreKey && event.key) ||\n    (event.shiftKey ? shift : base)[event.keyCode] ||\n    event.key || \"Unidentified\"\n  // Edge sometimes produces wrong names (Issue #3)\n  if (name == \"Esc\") name = \"Escape\"\n  if (name == \"Del\") name = \"Delete\"\n  // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/\n  if (name == \"Left\") name = \"ArrowLeft\"\n  if (name == \"Up\") name = \"ArrowUp\"\n  if (name == \"Right\") name = \"ArrowRight\"\n  if (name == \"Down\") name = \"ArrowDown\"\n  return name\n}\n", "import {base, keyName} from \"w3c-keyname\"\nimport {Plugin} from \"prosemirror-state\"\n\n// declare global: navigator\n\nconst mac = typeof navigator != \"undefined\" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : false\n\nfunction normalizeKeyName(name) {\n  let parts = name.split(/-(?!$)/), result = parts[parts.length - 1]\n  if (result == \"Space\") result = \" \"\n  let alt, ctrl, shift, meta\n  for (let i = 0; i < parts.length - 1; i++) {\n    let mod = parts[i]\n    if (/^(cmd|meta|m)$/i.test(mod)) meta = true\n    else if (/^a(lt)?$/i.test(mod)) alt = true\n    else if (/^(c|ctrl|control)$/i.test(mod)) ctrl = true\n    else if (/^s(hift)?$/i.test(mod)) shift = true\n    else if (/^mod$/i.test(mod)) { if (mac) meta = true; else ctrl = true }\n    else throw new Error(\"Unrecognized modifier name: \" + mod)\n  }\n  if (alt) result = \"Alt-\" + result\n  if (ctrl) result = \"Ctrl-\" + result\n  if (meta) result = \"Meta-\" + result\n  if (shift) result = \"Shift-\" + result\n  return result\n}\n\nfunction normalize(map) {\n  let copy = Object.create(null)\n  for (let prop in map) copy[normalizeKeyName(prop)] = map[prop]\n  return copy\n}\n\nfunction modifiers(name, event, shift) {\n  if (event.altKey) name = \"Alt-\" + name\n  if (event.ctrlKey) name = \"Ctrl-\" + name\n  if (event.metaKey) name = \"Meta-\" + name\n  if (shift !== false && event.shiftKey) name = \"Shift-\" + name\n  return name\n}\n\n// :: (Object) \u2192 Plugin\n// Create a keymap plugin for the given set of bindings.\n//\n// Bindings should map key names to [command](#commands)-style\n// functions, which will be called with `(EditorState, dispatch,\n// EditorView)` arguments, and should return true when they've handled\n// the key. Note that the view argument isn't part of the command\n// protocol, but can be used as an escape hatch if a binding needs to\n// directly interact with the UI.\n//\n// Key names may be strings like `\"Shift-Ctrl-Enter\"`\u2014a key\n// identifier prefixed with zero or more modifiers. Key identifiers\n// are based on the strings that can appear in\n// [`KeyEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key).\n// Use lowercase letters to refer to letter keys (or uppercase letters\n// if you want shift to be held). You may use `\"Space\"` as an alias\n// for the `\" \"` name.\n//\n// Modifiers can be given in any order. `Shift-` (or `s-`), `Alt-` (or\n// `a-`), `Ctrl-` (or `c-` or `Control-`) and `Cmd-` (or `m-` or\n// `Meta-`) are recognized. For characters that are created by holding\n// shift, the `Shift-` prefix is implied, and should not be added\n// explicitly.\n//\n// You can use `Mod-` as a shorthand for `Cmd-` on Mac and `Ctrl-` on\n// other platforms.\n//\n// You can add multiple keymap plugins to an editor. The order in\n// which they appear determines their precedence (the ones early in\n// the array get to dispatch first).\nexport function keymap(bindings) {\n  return new Plugin({props: {handleKeyDown: keydownHandler(bindings)}})\n}\n\n// :: (Object) \u2192 (view: EditorView, event: dom.Event) \u2192 bool\n// Given a set of bindings (using the same format as\n// [`keymap`](#keymap.keymap)), return a [keydown\n// handler](#view.EditorProps.handleKeyDown) that handles them.\nexport function keydownHandler(bindings) {\n  let map = normalize(bindings)\n  return function(view, event) {\n    let name = keyName(event), isChar = name.length == 1 && name != \" \", baseName\n    let direct = map[modifiers(name, event, !isChar)]\n    if (direct && direct(view.state, view.dispatch, view)) return true\n    if (isChar && (event.shiftKey || event.altKey || event.metaKey || name.charCodeAt(0) > 127) &&\n        (baseName = base[event.keyCode]) && baseName != name) {\n      // Try falling back to the keyCode when there's a modifier\n      // active or the character produced isn't ASCII, and our table\n      // produces a different name from the the keyCode. See #668,\n      // #1060\n      let fromCode = map[modifiers(baseName, event, true)]\n      if (fromCode && fromCode(view.state, view.dispatch, view)) return true\n    } else if (isChar && event.shiftKey) {\n      // Otherwise, if shift is active, also try the binding with the\n      // Shift- prefix enabled. See #997\n      let withShift = map[modifiers(name, event, true)]\n      if (withShift && withShift(view.state, view.dispatch, view)) return true\n    }\n    return false\n  }\n}\n", "import {joinPoint, canJoin, findWrapping, liftTarget, canSplit, ReplaceAroundStep} from \"prosemirror-transform\"\nimport {Slice, Fragment} from \"prosemirror-model\"\nimport {Selection, TextSelection, NodeSelection, AllSelection} from \"prosemirror-state\"\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// Delete the selection, if there is one.\nexport function deleteSelection(state, dispatch) {\n  if (state.selection.empty) return false\n  if (dispatch) dispatch(state.tr.deleteSelection().scrollIntoView())\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction), ?EditorView) \u2192 bool\n// If the selection is empty and at the start of a textblock, try to\n// reduce the distance between that block and the one before it\u2014if\n// there's a block directly before it that can be joined, join them.\n// If not, try to move the selected block closer to the next one in\n// the document structure by lifting it out of its parent or moving it\n// into a parent of the previous block. Will use the view for accurate\n// (bidi-aware) start-of-textblock detection if given.\nexport function joinBackward(state, dispatch, view) {\n  let {$cursor} = state.selection\n  if (!$cursor || (view ? !view.endOfTextblock(\"backward\", state)\n                        : $cursor.parentOffset > 0))\n    return false\n\n  let $cut = findCutBefore($cursor)\n\n  // If there is no node before this, try to lift\n  if (!$cut) {\n    let range = $cursor.blockRange(), target = range && liftTarget(range)\n    if (target == null) return false\n    if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView())\n    return true\n  }\n\n  let before = $cut.nodeBefore\n  // Apply the joining algorithm\n  if (!before.type.spec.isolating && deleteBarrier(state, $cut, dispatch))\n    return true\n\n  // If the node below has no content and the node above is\n  // selectable, delete the node below and select the one above.\n  if ($cursor.parent.content.size == 0 &&\n      (textblockAt(before, \"end\") || NodeSelection.isSelectable(before))) {\n    if (dispatch) {\n      let tr = state.tr.deleteRange($cursor.before(), $cursor.after())\n      tr.setSelection(textblockAt(before, \"end\") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos, -1)), -1)\n                      : NodeSelection.create(tr.doc, $cut.pos - before.nodeSize))\n      dispatch(tr.scrollIntoView())\n    }\n    return true\n  }\n\n  // If the node before is an atom, delete it\n  if (before.isAtom && $cut.depth == $cursor.depth - 1) {\n    if (dispatch) dispatch(state.tr.delete($cut.pos - before.nodeSize, $cut.pos).scrollIntoView())\n    return true\n  }\n\n  return false\n}\n\nfunction textblockAt(node, side, only) {\n  for (; node; node = (side == \"start\" ? node.firstChild : node.lastChild)) {\n    if (node.isTextblock) return true\n    if (only && node.childCount != 1) return false\n  }\n  return false\n}\n\n// :: (EditorState, ?(tr: Transaction), ?EditorView) \u2192 bool\n// When the selection is empty and at the start of a textblock, select\n// the node before that textblock, if possible. This is intended to be\n// bound to keys like backspace, after\n// [`joinBackward`](#commands.joinBackward) or other deleting\n// commands, as a fall-back behavior when the schema doesn't allow\n// deletion at the selected point.\nexport function selectNodeBackward(state, dispatch, view) {\n  let {$head, empty} = state.selection, $cut = $head\n  if (!empty) return false\n\n  if ($head.parent.isTextblock) {\n    if (view ? !view.endOfTextblock(\"backward\", state) : $head.parentOffset > 0) return false\n    $cut = findCutBefore($head)\n  }\n  let node = $cut && $cut.nodeBefore\n  if (!node || !NodeSelection.isSelectable(node)) return false\n  if (dispatch)\n    dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos - node.nodeSize)).scrollIntoView())\n  return true\n}\n\nfunction findCutBefore($pos) {\n  if (!$pos.parent.type.spec.isolating) for (let i = $pos.depth - 1; i >= 0; i--) {\n    if ($pos.index(i) > 0) return $pos.doc.resolve($pos.before(i + 1))\n    if ($pos.node(i).type.spec.isolating) break\n  }\n  return null\n}\n\n// :: (EditorState, ?(tr: Transaction), ?EditorView) \u2192 bool\n// If the selection is empty and the cursor is at the end of a\n// textblock, try to reduce or remove the boundary between that block\n// and the one after it, either by joining them or by moving the other\n// block closer to this one in the tree structure. Will use the view\n// for accurate start-of-textblock detection if given.\nexport function joinForward(state, dispatch, view) {\n  let {$cursor} = state.selection\n  if (!$cursor || (view ? !view.endOfTextblock(\"forward\", state)\n                        : $cursor.parentOffset < $cursor.parent.content.size))\n    return false\n\n  let $cut = findCutAfter($cursor)\n\n  // If there is no node after this, there's nothing to do\n  if (!$cut) return false\n\n  let after = $cut.nodeAfter\n  // Try the joining algorithm\n  if (deleteBarrier(state, $cut, dispatch)) return true\n\n  // If the node above has no content and the node below is\n  // selectable, delete the node above and select the one below.\n  if ($cursor.parent.content.size == 0 &&\n      (textblockAt(after, \"start\") || NodeSelection.isSelectable(after))) {\n    if (dispatch) {\n      let tr = state.tr.deleteRange($cursor.before(), $cursor.after())\n      tr.setSelection(textblockAt(after, \"start\") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos)), 1)\n                      : NodeSelection.create(tr.doc, tr.mapping.map($cut.pos)))\n      dispatch(tr.scrollIntoView())\n    }\n    return true\n  }\n\n  // If the next node is an atom, delete it\n  if (after.isAtom && $cut.depth == $cursor.depth - 1) {\n    if (dispatch) dispatch(state.tr.delete($cut.pos, $cut.pos + after.nodeSize).scrollIntoView())\n    return true\n  }\n\n  return false\n}\n\n// :: (EditorState, ?(tr: Transaction), ?EditorView) \u2192 bool\n// When the selection is empty and at the end of a textblock, select\n// the node coming after that textblock, if possible. This is intended\n// to be bound to keys like delete, after\n// [`joinForward`](#commands.joinForward) and similar deleting\n// commands, to provide a fall-back behavior when the schema doesn't\n// allow deletion at the selected point.\nexport function selectNodeForward(state, dispatch, view) {\n  let {$head, empty} = state.selection, $cut = $head\n  if (!empty) return false\n  if ($head.parent.isTextblock) {\n    if (view ? !view.endOfTextblock(\"forward\", state) : $head.parentOffset < $head.parent.content.size)\n      return false\n    $cut = findCutAfter($head)\n  }\n  let node = $cut && $cut.nodeAfter\n  if (!node || !NodeSelection.isSelectable(node)) return false\n  if (dispatch)\n    dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos)).scrollIntoView())\n  return true\n}\n\nfunction findCutAfter($pos) {\n  if (!$pos.parent.type.spec.isolating) for (let i = $pos.depth - 1; i >= 0; i--) {\n    let parent = $pos.node(i)\n    if ($pos.index(i) + 1 < parent.childCount) return $pos.doc.resolve($pos.after(i + 1))\n    if (parent.type.spec.isolating) break\n  }\n  return null\n}\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// Join the selected block or, if there is a text selection, the\n// closest ancestor block of the selection that can be joined, with\n// the sibling above it.\nexport function joinUp(state, dispatch) {\n  let sel = state.selection, nodeSel = sel instanceof NodeSelection, point\n  if (nodeSel) {\n    if (sel.node.isTextblock || !canJoin(state.doc, sel.from)) return false\n    point = sel.from\n  } else {\n    point = joinPoint(state.doc, sel.from, -1)\n    if (point == null) return false\n  }\n  if (dispatch) {\n    let tr = state.tr.join(point)\n    if (nodeSel) tr.setSelection(NodeSelection.create(tr.doc, point - state.doc.resolve(point).nodeBefore.nodeSize))\n    dispatch(tr.scrollIntoView())\n  }\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// Join the selected block, or the closest ancestor of the selection\n// that can be joined, with the sibling after it.\nexport function joinDown(state, dispatch) {\n  let sel = state.selection, point\n  if (sel instanceof NodeSelection) {\n    if (sel.node.isTextblock || !canJoin(state.doc, sel.to)) return false\n    point = sel.to\n  } else {\n    point = joinPoint(state.doc, sel.to, 1)\n    if (point == null) return false\n  }\n  if (dispatch)\n    dispatch(state.tr.join(point).scrollIntoView())\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// Lift the selected block, or the closest ancestor block of the\n// selection that can be lifted, out of its parent node.\nexport function lift(state, dispatch) {\n  let {$from, $to} = state.selection\n  let range = $from.blockRange($to), target = range && liftTarget(range)\n  if (target == null) return false\n  if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView())\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// If the selection is in a node whose type has a truthy\n// [`code`](#model.NodeSpec.code) property in its spec, replace the\n// selection with a newline character.\nexport function newlineInCode(state, dispatch) {\n  let {$head, $anchor} = state.selection\n  if (!$head.parent.type.spec.code || !$head.sameParent($anchor)) return false\n  if (dispatch) dispatch(state.tr.insertText(\"\\n\").scrollIntoView())\n  return true\n}\n\nfunction defaultBlockAt(match) {\n  for (let i = 0; i < match.edgeCount; i++) {\n    let {type} = match.edge(i)\n    if (type.isTextblock && !type.hasRequiredAttrs()) return type\n  }\n  return null\n}\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// When the selection is in a node with a truthy\n// [`code`](#model.NodeSpec.code) property in its spec, create a\n// default block after the code block, and move the cursor there.\nexport function exitCode(state, dispatch) {\n  let {$head, $anchor} = state.selection\n  if (!$head.parent.type.spec.code || !$head.sameParent($anchor)) return false\n  let above = $head.node(-1), after = $head.indexAfter(-1), type = defaultBlockAt(above.contentMatchAt(after))\n  if (!above.canReplaceWith(after, after, type)) return false\n  if (dispatch) {\n    let pos = $head.after(), tr = state.tr.replaceWith(pos, pos, type.createAndFill())\n    tr.setSelection(Selection.near(tr.doc.resolve(pos), 1))\n    dispatch(tr.scrollIntoView())\n  }\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// If a block node is selected, create an empty paragraph before (if\n// it is its parent's first child) or after it.\nexport function createParagraphNear(state, dispatch) {\n  let sel = state.selection, {$from, $to} = sel\n  if (sel instanceof AllSelection || $from.parent.inlineContent || $to.parent.inlineContent) return false\n  let type = defaultBlockAt($to.parent.contentMatchAt($to.indexAfter()))\n  if (!type || !type.isTextblock) return false\n  if (dispatch) {\n    let side = (!$from.parentOffset && $to.index() < $to.parent.childCount ? $from : $to).pos\n    let tr = state.tr.insert(side, type.createAndFill())\n    tr.setSelection(TextSelection.create(tr.doc, side + 1))\n    dispatch(tr.scrollIntoView())\n  }\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// If the cursor is in an empty textblock that can be lifted, lift the\n// block.\nexport function liftEmptyBlock(state, dispatch) {\n  let {$cursor} = state.selection\n  if (!$cursor || $cursor.parent.content.size) return false\n  if ($cursor.depth > 1 && $cursor.after() != $cursor.end(-1)) {\n    let before = $cursor.before()\n    if (canSplit(state.doc, before)) {\n      if (dispatch) dispatch(state.tr.split(before).scrollIntoView())\n      return true\n    }\n  }\n  let range = $cursor.blockRange(), target = range && liftTarget(range)\n  if (target == null) return false\n  if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView())\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// Split the parent block of the selection. If the selection is a text\n// selection, also delete its content.\nexport function splitBlock(state, dispatch) {\n  let {$from, $to} = state.selection\n  if (state.selection instanceof NodeSelection && state.selection.node.isBlock) {\n    if (!$from.parentOffset || !canSplit(state.doc, $from.pos)) return false\n    if (dispatch) dispatch(state.tr.split($from.pos).scrollIntoView())\n    return true\n  }\n\n  if (!$from.parent.isBlock) return false\n\n  if (dispatch) {\n    let atEnd = $to.parentOffset == $to.parent.content.size\n    let tr = state.tr\n    if (state.selection instanceof TextSelection || state.selection instanceof AllSelection) tr.deleteSelection()\n    let deflt = $from.depth == 0 ? null : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)))\n    let types = atEnd && deflt ? [{type: deflt}] : null\n    let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types)\n    if (!types && !can && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt && [{type: deflt}])) {\n      types = [{type: deflt}]\n      can = true\n    }\n    if (can) {\n      tr.split(tr.mapping.map($from.pos), 1, types)\n      if (!atEnd && !$from.parentOffset && $from.parent.type != deflt) {\n        let first = tr.mapping.map($from.before()), $first = tr.doc.resolve(first)\n        if ($from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt))\n          tr.setNodeMarkup(tr.mapping.map($from.before()), deflt)\n      }\n    }\n    dispatch(tr.scrollIntoView())\n  }\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// Acts like [`splitBlock`](#commands.splitBlock), but without\n// resetting the set of active marks at the cursor.\nexport function splitBlockKeepMarks(state, dispatch) {\n  return splitBlock(state, dispatch && (tr => {\n    let marks = state.storedMarks || (state.selection.$to.parentOffset && state.selection.$from.marks())\n    if (marks) tr.ensureMarks(marks)\n    dispatch(tr)\n  }))\n}\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// Move the selection to the node wrapping the current selection, if\n// any. (Will not select the document node.)\nexport function selectParentNode(state, dispatch) {\n  let {$from, to} = state.selection, pos\n  let same = $from.sharedDepth(to)\n  if (same == 0) return false\n  pos = $from.before(same)\n  if (dispatch) dispatch(state.tr.setSelection(NodeSelection.create(state.doc, pos)))\n  return true\n}\n\n// :: (EditorState, ?(tr: Transaction)) \u2192 bool\n// Select the whole document.\nexport function selectAll(state, dispatch) {\n  if (dispatch) dispatch(state.tr.setSelection(new AllSelection(state.doc)))\n  return true\n}\n\nfunction joinMaybeClear(state, $pos, dispatch) {\n  let before = $pos.nodeBefore, after = $pos.nodeAfter, index = $pos.index()\n  if (!before || !after || !before.type.compatibleContent(after.type)) return false\n  if (!before.content.size && $pos.parent.canReplace(index - 1, index)) {\n    if (dispatch) dispatch(state.tr.delete($pos.pos - before.nodeSize, $pos.pos).scrollIntoView())\n    return true\n  }\n  if (!$pos.parent.canReplace(index, index + 1) || !(after.isTextblock || canJoin(state.doc, $pos.pos)))\n    return false\n  if (dispatch)\n    dispatch(state.tr\n             .clearIncompatible($pos.pos, before.type, before.contentMatchAt(before.childCount))\n             .join($pos.pos)\n             .scrollIntoView())\n  return true\n}\n\nfunction deleteBarrier(state, $cut, dispatch) {\n  let before = $cut.nodeBefore, after = $cut.nodeAfter, conn, match\n  if (before.type.spec.isolating || after.type.spec.isolating) return false\n  if (joinMaybeClear(state, $cut, dispatch)) return true\n\n  let canDelAfter = $cut.parent.canReplace($cut.index(), $cut.index() + 1)\n  if (canDelAfter &&\n      (conn = (match = before.contentMatchAt(before.childCount)).findWrapping(after.type)) &&\n      match.matchType(conn[0] || after.type).validEnd) {\n    if (dispatch) {\n      let end = $cut.pos + after.nodeSize, wrap = Fragment.empty\n      for (let i = conn.length - 1; i >= 0; i--)\n        wrap = Fragment.from(conn[i].create(null, wrap))\n      wrap = Fragment.from(before.copy(wrap))\n      let tr = state.tr.step(new ReplaceAroundStep($cut.pos - 1, end, $cut.pos, end, new Slice(wrap, 1, 0), conn.length, true))\n      let joinAt = end + 2 * conn.length\n      if (canJoin(tr.doc, joinAt)) tr.join(joinAt)\n      dispatch(tr.scrollIntoView())\n    }\n    return true\n  }\n\n  let selAfter = Selection.findFrom($cut, 1)\n  let range = selAfter && selAfter.$from.blockRange(selAfter.$to), target = range && liftTarget(range)\n  if (target != null && target >= $cut.depth) {\n    if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView())\n    return true\n  }\n\n  if (canDelAfter && textblockAt(after, \"start\", true) && textblockAt(before, \"end\")) {\n    let at = before, wrap = []\n    for (;;) {\n      wrap.push(at)\n      if (at.isTextblock) break\n      at = at.lastChild\n    }\n    let afterText = after, afterDepth = 1\n    for (; !afterText.isTextblock; afterText = afterText.firstChild) afterDepth++\n    if (at.canReplace(at.childCount, at.childCount, afterText.content)) {\n      if (dispatch) {\n        let end = Fragment.empty\n        for (let i = wrap.length - 1; i >= 0; i--) end = Fragment.from(wrap[i].copy(end))\n        let tr = state.tr.step(new ReplaceAroundStep($cut.pos - wrap.length, $cut.pos + after.nodeSize,\n                                                     $cut.pos + afterDepth, $cut.pos + after.nodeSize - afterDepth,\n                                                     new Slice(end, wrap.length, 0), 0, true))\n        dispatch(tr.scrollIntoView())\n      }\n      return true\n    }\n  }\n\n  return false\n}\n\n// Parameterized commands\n\n// :: (NodeType, ?Object) \u2192 (state: EditorState, dispatch: ?(tr: Transaction)) \u2192 bool\n// Wrap the selection in a node of the given type with the given\n// attributes.\nexport function wrapIn(nodeType, attrs) {\n  return function(state, dispatch) {\n    let {$from, $to} = state.selection\n    let range = $from.blockRange($to), wrapping = range && findWrapping(range, nodeType, attrs)\n    if (!wrapping) return false\n    if (dispatch) dispatch(state.tr.wrap(range, wrapping).scrollIntoView())\n    return true\n  }\n}\n\n// :: (NodeType, ?Object) \u2192 (state: EditorState, dispatch: ?(tr: Transaction)) \u2192 bool\n// Returns a command that tries to set the selected textblocks to the\n// given node type with the given attributes.\nexport function setBlockType(nodeType, attrs) {\n  return function(state, dispatch) {\n    let {from, to} = state.selection\n    let applicable = false\n    state.doc.nodesBetween(from, to, (node, pos) => {\n      if (applicable) return false\n      if (!node.isTextblock || node.hasMarkup(nodeType, attrs)) return\n      if (node.type == nodeType) {\n        applicable = true\n      } else {\n        let $pos = state.doc.resolve(pos), index = $pos.index()\n        applicable = $pos.parent.canReplaceWith(index, index + 1, nodeType)\n      }\n    })\n    if (!applicable) return false\n    if (dispatch) dispatch(state.tr.setBlockType(from, to, nodeType, attrs).scrollIntoView())\n    return true\n  }\n}\n\nfunction markApplies(doc, ranges, type) {\n  for (let i = 0; i < ranges.length; i++) {\n    let {$from, $to} = ranges[i]\n    let can = $from.depth == 0 ? doc.type.allowsMarkType(type) : false\n    doc.nodesBetween($from.pos, $to.pos, node => {\n      if (can) return false\n      can = node.inlineContent && node.type.allowsMarkType(type)\n    })\n    if (can) return true\n  }\n  return false\n}\n\n// :: (MarkType, ?Object) \u2192 (state: EditorState, dispatch: ?(tr: Transaction)) \u2192 bool\n// Create a command function that toggles the given mark with the\n// given attributes. Will return `false` when the current selection\n// doesn't support that mark. This will remove the mark if any marks\n// of that type exist in the selection, or add it otherwise. If the\n// selection is empty, this applies to the [stored\n// marks](#state.EditorState.storedMarks) instead of a range of the\n// document.\nexport function toggleMark(markType, attrs) {\n  return function(state, dispatch) {\n    let {empty, $cursor, ranges} = state.selection\n    if ((empty && !$cursor) || !markApplies(state.doc, ranges, markType)) return false\n    if (dispatch) {\n      if ($cursor) {\n        if (markType.isInSet(state.storedMarks || $cursor.marks()))\n          dispatch(state.tr.removeStoredMark(markType))\n        else\n          dispatch(state.tr.addStoredMark(markType.create(attrs)))\n      } else {\n        let has = false, tr = state.tr\n        for (let i = 0; !has && i < ranges.length; i++) {\n          let {$from, $to} = ranges[i]\n          has = state.doc.rangeHasMark($from.pos, $to.pos, markType)\n        }\n        for (let i = 0; i < ranges.length; i++) {\n          let {$from, $to} = ranges[i]\n          if (has) {\n            tr.removeMark($from.pos, $to.pos, markType)\n          } else {\n            let from = $from.pos, to = $to.pos, start = $from.nodeAfter, end = $to.nodeBefore\n            let spaceStart = start && start.isText ? /^\\s*/.exec(start.text)[0].length : 0\n            let spaceEnd = end && end.isText ? /\\s*$/.exec(end.text)[0].length : 0\n            if (from + spaceStart < to) { from += spaceStart; to -= spaceEnd }\n            tr.addMark(from, to, markType.create(attrs))\n          }\n        }\n        dispatch(tr.scrollIntoView())\n      }\n    }\n    return true\n  }\n}\n\nfunction wrapDispatchForJoin(dispatch, isJoinable) {\n  return tr => {\n    if (!tr.isGeneric) return dispatch(tr)\n\n    let ranges = []\n    for (let i = 0; i < tr.mapping.maps.length; i++) {\n      let map = tr.mapping.maps[i]\n      for (let j = 0; j < ranges.length; j++)\n        ranges[j] = map.map(ranges[j])\n      map.forEach((_s, _e, from, to) => ranges.push(from, to))\n    }\n\n    // Figure out which joinable points exist inside those ranges,\n    // by checking all node boundaries in their parent nodes.\n    let joinable = []\n    for (let i = 0; i < ranges.length; i += 2) {\n      let from = ranges[i], to = ranges[i + 1]\n      let $from = tr.doc.resolve(from), depth = $from.sharedDepth(to), parent = $from.node(depth)\n      for (let index = $from.indexAfter(depth), pos = $from.after(depth + 1); pos <= to; ++index) {\n        let after = parent.maybeChild(index)\n        if (!after) break\n        if (index && joinable.indexOf(pos) == -1) {\n          let before = parent.child(index - 1)\n          if (before.type == after.type && isJoinable(before, after))\n            joinable.push(pos)\n        }\n        pos += after.nodeSize\n      }\n    }\n    // Join the joinable points\n    joinable.sort((a, b) => a - b)\n    for (let i = joinable.length - 1; i >= 0; i--) {\n      if (canJoin(tr.doc, joinable[i])) tr.join(joinable[i])\n    }\n    dispatch(tr)\n  }\n}\n\n// :: ((state: EditorState, ?(tr: Transaction)) \u2192 bool, union<(before: Node, after: Node) \u2192 bool, [string]>) \u2192 (state: EditorState, ?(tr: Transaction)) \u2192 bool\n// Wrap a command so that, when it produces a transform that causes\n// two joinable nodes to end up next to each other, those are joined.\n// Nodes are considered joinable when they are of the same type and\n// when the `isJoinable` predicate returns true for them or, if an\n// array of strings was passed, if their node type name is in that\n// array.\nexport function autoJoin(command, isJoinable) {\n  if (Array.isArray(isJoinable)) {\n    let types = isJoinable\n    isJoinable = node => types.indexOf(node.type.name) > -1\n  }\n  return (state, dispatch, view) => command(state, dispatch && wrapDispatchForJoin(dispatch, isJoinable), view)\n}\n\n// :: (...[(EditorState, ?(tr: Transaction), ?EditorView) \u2192 bool]) \u2192 (EditorState, ?(tr: Transaction), ?EditorView) \u2192 bool\n// Combine a number of command functions into a single function (which\n// calls them one by one until one returns true).\nexport function chainCommands(...commands) {\n  return function(state, dispatch, view) {\n    for (let i = 0; i < commands.length; i++)\n      if (commands[i](state, dispatch, view)) return true\n    return false\n  }\n}\n\nlet backspace = chainCommands(deleteSelection, joinBackward, selectNodeBackward)\nlet del = chainCommands(deleteSelection, joinForward, selectNodeForward)\n\n// :: Object\n// A basic keymap containing bindings not specific to any schema.\n// Binds the following keys (when multiple commands are listed, they\n// are chained with [`chainCommands`](#commands.chainCommands)):\n//\n// * **Enter** to `newlineInCode`, `createParagraphNear`, `liftEmptyBlock`, `splitBlock`\n// * **Mod-Enter** to `exitCode`\n// * **Backspace** and **Mod-Backspace** to `deleteSelection`, `joinBackward`, `selectNodeBackward`\n// * **Delete** and **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`\n// * **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`\n// * **Mod-a** to `selectAll`\nexport let pcBaseKeymap = {\n  \"Enter\": chainCommands(newlineInCode, createParagraphNear, liftEmptyBlock, splitBlock),\n  \"Mod-Enter\": exitCode,\n  \"Backspace\": backspace,\n  \"Mod-Backspace\": backspace,\n  \"Shift-Backspace\": backspace,\n  \"Delete\": del,\n  \"Mod-Delete\": del,\n  \"Mod-a\": selectAll\n}\n\n// :: Object\n// A copy of `pcBaseKeymap` that also binds **Ctrl-h** like Backspace,\n// **Ctrl-d** like Delete, **Alt-Backspace** like Ctrl-Backspace, and\n// **Ctrl-Alt-Backspace**, **Alt-Delete**, and **Alt-d** like\n// Ctrl-Delete.\nexport let macBaseKeymap = {\n  \"Ctrl-h\": pcBaseKeymap[\"Backspace\"],\n  \"Alt-Backspace\": pcBaseKeymap[\"Mod-Backspace\"],\n  \"Ctrl-d\": pcBaseKeymap[\"Delete\"],\n  \"Ctrl-Alt-Backspace\": pcBaseKeymap[\"Mod-Delete\"],\n  \"Alt-Delete\": pcBaseKeymap[\"Mod-Delete\"],\n  \"Alt-d\": pcBaseKeymap[\"Mod-Delete\"]\n}\nfor (let key in pcBaseKeymap) macBaseKeymap[key] = pcBaseKeymap[key]\n\n// declare global: os, navigator\nconst mac = typeof navigator != \"undefined\" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform)\n          : typeof os != \"undefined\" ? os.platform() == \"darwin\" : false\n\n// :: Object\n// Depending on the detected platform, this will hold\n// [`pcBasekeymap`](#commands.pcBaseKeymap) or\n// [`macBaseKeymap`](#commands.macBaseKeymap).\nexport let baseKeymap = mac ? macBaseKeymap : pcBaseKeymap\n", "import { schema } from \"./schema\";\nimport { EditorState } from \"prosemirror-state\";\nimport { EditorView } from \"prosemirror-view\";\nimport { DOMParser, Node } from \"prosemirror-model\";\nimport { undo, redo, history } from \"prosemirror-history\";\nimport { keymap } from \"prosemirror-keymap\";\nimport { baseKeymap } from \"prosemirror-commands\";\n\nconst main = document.body.children[0];\n\nconst state = EditorState.create<typeof schema>({\n  doc: Node.fromJSON(schema, {\n    type: \"doc\",\n    content: [\n      {\n        type: \"paragraph\",\n        content: [{ type: \"text\", text: \"Hey, welcome to Editor.\" }],\n      },\n    ],\n  }),\n  schema,\n  plugins: [\n    history(),\n    keymap({ \"Mod-z\": undo, \"Mod-y\": redo }),\n    keymap(baseKeymap),\n  ],\n});\n\nfunction initCursor(): HTMLDivElement {\n  const cursor = document.createElement(\"div\");\n  cursor.classList.add(\"cursor\");\n  main.appendChild(cursor);\n  return cursor;\n}\n\nconst cursor = initCursor();\n\nconst view = new EditorView<typeof schema>(main, {\n  state,\n  dispatchTransaction(this, transaction) {\n    const newState = this.state.apply(transaction);\n    this.updateState(newState);\n\n    const coords = this.coordsAtPos(newState.selection.anchor);\n    console.log(newState.selection);\n    cursor.style.transform = `translate(${coords.right - 2}px, ${\n      coords.top - 4\n    }px)`;\n  },\n});\n\nconst coords = view.coordsAtPos(0, -1);\nconsole.log(coords);\ncursor.style.transform = `translate(${coords.right - 2}px, ${\n  coords.top - 4\n}px)`;\n"],
  "mappings": ";;AAEA,sBAAoB,UAAS;AAC3B,SAAK,UAAU;AAAA;AAGjB,aAAW,YAAY;AAAA,IACrB,aAAa;AAAA,IAEb,MAAM,SAAS,KAAK;AAClB,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC5C,YAAI,KAAK,QAAQ,OAAO;AAAK,iBAAO;AACtC,aAAO;AAAA;AAAA,IAMT,KAAK,SAAS,KAAK;AACjB,UAAI,SAAQ,KAAK,KAAK;AACtB,aAAO,UAAS,KAAK,SAAY,KAAK,QAAQ,SAAQ;AAAA;AAAA,IAOxD,QAAQ,SAAS,KAAK,OAAO,QAAQ;AACnC,UAAI,OAAO,UAAU,UAAU,MAAM,KAAK,OAAO,UAAU;AAC3D,UAAI,SAAQ,KAAK,KAAK,MAAM,WAAU,KAAK,QAAQ;AACnD,UAAI,UAAS,IAAI;AACf,iBAAQ,KAAK,UAAU,KAAK;AAAA,aACvB;AACL,iBAAQ,SAAQ,KAAK;AACrB,YAAI;AAAQ,mBAAQ,UAAS;AAAA;AAE/B,aAAO,IAAI,WAAW;AAAA;AAAA,IAKxB,QAAQ,SAAS,KAAK;AACpB,UAAI,SAAQ,KAAK,KAAK;AACtB,UAAI,UAAS;AAAI,eAAO;AACxB,UAAI,WAAU,KAAK,QAAQ;AAC3B,eAAQ,OAAO,QAAO;AACtB,aAAO,IAAI,WAAW;AAAA;AAAA,IAKxB,YAAY,SAAS,KAAK,OAAO;AAC/B,aAAO,IAAI,WAAW,CAAC,KAAK,OAAO,OAAO,KAAK,OAAO,KAAK;AAAA;AAAA,IAK7D,UAAU,SAAS,KAAK,OAAO;AAC7B,UAAI,WAAU,KAAK,OAAO,KAAK,QAAQ;AACvC,eAAQ,KAAK,KAAK;AAClB,aAAO,IAAI,WAAW;AAAA;AAAA,IAMxB,WAAW,SAAS,OAAO,KAAK,OAAO;AACrC,UAAI,UAAU,KAAK,OAAO,MAAM,WAAU,QAAQ,QAAQ;AAC1D,UAAI,SAAQ,QAAQ,KAAK;AACzB,eAAQ,OAAO,UAAS,KAAK,SAAQ,SAAS,QAAO,GAAG,KAAK;AAC7D,aAAO,IAAI,WAAW;AAAA;AAAA,IAMxB,SAAS,SAAS,GAAG;AACnB,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC5C,UAAE,KAAK,QAAQ,IAAI,KAAK,QAAQ,IAAI;AAAA;AAAA,IAMxC,SAAS,SAAS,OAAK;AACrB,cAAM,WAAW,KAAK;AACtB,UAAI,CAAC,MAAI;AAAM,eAAO;AACtB,aAAO,IAAI,WAAW,MAAI,QAAQ,OAAO,KAAK,SAAS,OAAK;AAAA;AAAA,IAM9D,QAAQ,SAAS,OAAK;AACpB,cAAM,WAAW,KAAK;AACtB,UAAI,CAAC,MAAI;AAAM,eAAO;AACtB,aAAO,IAAI,WAAW,KAAK,SAAS,OAAK,QAAQ,OAAO,MAAI;AAAA;AAAA,IAM9D,UAAU,SAAS,OAAK;AACtB,UAAI,UAAS;AACb,cAAM,WAAW,KAAK;AACtB,eAAS,IAAI,GAAG,IAAI,MAAI,QAAQ,QAAQ,KAAK;AAC3C,kBAAS,QAAO,OAAO,MAAI,QAAQ;AACrC,aAAO;AAAA;AAAA,QAKL,OAAO;AACT,aAAO,KAAK,QAAQ,UAAU;AAAA;AAAA;AAQlC,aAAW,OAAO,SAAS,OAAO;AAChC,QAAI,iBAAiB;AAAY,aAAO;AACxC,QAAI,WAAU;AACd,QAAI;AAAO,eAAS,QAAQ;AAAO,iBAAQ,KAAK,MAAM,MAAM;AAC5D,WAAO,IAAI,WAAW;AAAA;AAGxB,MAAI,aAAa;AAEjB,MAAO,mBAAQ;;;AClIR,yBAAuB,GAAG,GAAG,KAAK;AACvC,aAAS,IAAI,KAAI,KAAK;AACpB,UAAI,KAAK,EAAE,cAAc,KAAK,EAAE,YACpC;AAAM,eAAO,EAAE,cAAc,EAAE,aAAa,OAAO;;AAE/C,UAAI,SAAS,EAAE,MAAM,IAAI,SAAS,EAAE,MAAM;AAC1C,UAAI,UAAU,QAAQ;AAAE,eAAO,OAAO;AAAU;;AAEhD,UAAI,CAAC,OAAO,WAAW,SAAO;AAAE,eAAO;;AAEvC,UAAI,OAAO,UAAU,OAAO,QAAQ,OAAO,MAAM;AAC/C,iBAAS,IAAI,GAAG,OAAO,KAAK,MAAM,OAAO,KAAK,IAAI,KACxD;AAAQ;;AACF,eAAO;;AAET,UAAI,OAAO,QAAQ,QAAQ,OAAO,QAAQ,MAAM;AAC9C,YAAI,QAAQ,cAAc,OAAO,SAAS,OAAO,SAAS,MAAM;AAChE,YAAI,SAAS,MAAI;AAAE,iBAAO;;;AAE5B,aAAO,OAAO;;;AAIX,uBAAqB,GAAG,GAAG,MAAM,MAAM;AAC5C,aAAS,KAAK,EAAE,YAAY,KAAK,EAAE,gBAAc;AAC/C,UAAI,MAAM,KAAK,MAAM,GACzB;AAAM,eAAO,MAAM,KAAK,OAAO,EAAC,GAAG,MAAM,GAAG;;AAExC,UAAI,SAAS,EAAE,MAAM,EAAE,KAAK,SAAS,EAAE,MAAM,EAAE,KAAK,OAAO,OAAO;AAClE,UAAI,UAAU,QAAQ;AACpB,gBAAQ;AAAM,gBAAQ;AACtB;;AAGF,UAAI,CAAC,OAAO,WAAW,SAAO;AAAE,eAAO,EAAC,GAAG,MAAM,GAAG;;AAEpD,UAAI,OAAO,UAAU,OAAO,QAAQ,OAAO,MAAM;AAC/C,YAAI,OAAO,GAAG,UAAU,KAAK,IAAI,OAAO,KAAK,QAAQ,OAAO,KAAK;AACjE,eAAO,OAAO,WAAW,OAAO,KAAK,OAAO,KAAK,SAAS,OAAO,MAAM,OAAO,KAAK,OAAO,KAAK,SAAS,OAAO,IAAI;AACjH;AAAQ;AAAQ;;AAElB,eAAO,EAAC,GAAG,MAAM,GAAG;;AAEtB,UAAI,OAAO,QAAQ,QAAQ,OAAO,QAAQ,MAAM;AAC9C,YAAI,QAAQ,YAAY,OAAO,SAAS,OAAO,SAAS,OAAO,GAAG,OAAO;AACzE,YAAI,OAAK;AAAE,iBAAO;;;AAEpB,cAAQ;AAAM,cAAQ;;;MCxCb,WACX,mBAAY,UAAS,MAAM;AACzB,SAAK,UAAU;AAIf,SAAK,OAAO,QAAQ;AACpB,QAAI,QAAQ,MAAI;AAAE,eAAS,IAAI,GAAG,IAAI,SAAQ,QAAQ,KAC1D;AAAM,aAAK,QAAQ,SAAQ,GAAG;;;;;qBAO5B,eAAA,sBAAa,OAAM,IAAI,GAAG,WAAe,QAAQ;;kBAAX;AACpC,aAAS,IAAI,GAAG,MAAM,GAAG,MAAM,IAAI,KAAK;AACtC,UAAI,SAAQ,KAAK,QAAQ,IAAI,OAAM,MAAM,OAAM;AAC/C,UAAI,OAAM,SAAQ,EAAE,QAAO,YAAY,KAAK,QAAQ,OAAO,SAAS,OAAM,QAAQ,MAAM;AACtF,YAAI,SAAQ,MAAM;AAClB,eAAM,aAAa,KAAK,IAAI,GAAG,QAAO,SACnB,KAAK,IAAI,OAAM,QAAQ,MAAM,KAAK,SAClC,GAAG,YAAY;;AAEpC,YAAM;;;qBAOV,cAAA,qBAAY,GAAG;AACb,SAAK,aAAa,GAAG,KAAK,MAAM;;qBAMlC,cAAA,qBAAY,OAAM,IAAI,gBAAgB,UAAU;AAC9C,QAAI,QAAO,IAAI,YAAY;AAC3B,SAAK,aAAa,OAAM,IAAE,SAAG,OAAM,KAAQ;AACzC,UAAI,MAAK,QAAQ;AACf,iBAAQ,MAAK,KAAK,MAAM,KAAK,IAAI,OAAM,OAAO,KAAK,KAAK;AACxD,oBAAY,CAAC;iBACJ,MAAK,UAAU,UAAU;AAClC,iBAAQ,OAAO,aAAa,aAAa,SAAS,SAAO;AACzD,oBAAY,CAAC;iBACJ,CAAC,aAAa,MAAK,SAAS;AACrC,iBAAQ;AACR,oBAAY;;OAEb;AACH,WAAO;;qBAMT,SAAA,gBAAO,OAAO;AACZ,QAAI,CAAC,MAAM,MAAI;AAAE,aAAO;;AACxB,QAAI,CAAC,KAAK,MAAI;AAAE,aAAO;;AACvB,QAAI,OAAO,KAAK,WAAW,QAAQ,MAAM,YAAY,WAAU,KAAK,QAAQ,SAAS,IAAI;AACzF,QAAI,KAAK,UAAU,KAAK,WAAW,QAAQ;AACzC,eAAQ,SAAQ,SAAS,KAAK,KAAK,SAAS,KAAK,OAAO,MAAM;AAC9D,UAAI;;AAEN,WAAO,IAAI,MAAM,QAAQ,QAAQ,KAAG;AAAE,eAAQ,KAAK,MAAM,QAAQ;;AACjE,WAAO,IAAI,SAAS,UAAS,KAAK,OAAO,MAAM;;qBAKjD,MAAA,aAAI,OAAM,IAAI;AACZ,QAAI,MAAM,MAAI;AAAE,WAAK,KAAK;;AAC1B,QAAI,SAAQ,KAAK,MAAM,KAAK,MAAI;AAAE,aAAO;;AACzC,QAAI,UAAS,IAAI,OAAO;AACxB,QAAI,KAAK,OAAI;AAAE,eAAS,IAAI,GAAG,MAAM,GAAG,MAAM,IAAI,KAAK;AACrD,YAAI,SAAQ,KAAK,QAAQ,IAAI,OAAM,MAAM,OAAM;AAC/C,YAAI,OAAM,OAAM;AACd,cAAI,MAAM,SAAQ,OAAM,IAAI;AAC1B,gBAAI,OAAM,QACpB;AAAY,uBAAQ,OAAM,IAAI,KAAK,IAAI,GAAG,QAAO,MAAM,KAAK,IAAI,OAAM,KAAK,QAAQ,KAAK;mBAExF;AAAY,uBAAQ,OAAM,IAAI,KAAK,IAAI,GAAG,QAAO,MAAM,IAAI,KAAK,IAAI,OAAM,QAAQ,MAAM,KAAK,MAAM;;;AAE3F,kBAAO,KAAK;AACZ,kBAAQ,OAAM;;AAEhB,cAAM;;;AAER,WAAO,IAAI,SAAS,SAAQ;;qBAG9B,aAAA,oBAAW,OAAM,IAAI;AACnB,QAAI,SAAQ,IAAE;AAAE,aAAO,SAAS;;AAChC,QAAI,SAAQ,KAAK,MAAM,KAAK,QAAQ,QAAM;AAAE,aAAO;;AACnD,WAAO,IAAI,SAAS,KAAK,QAAQ,MAAM,OAAM;;qBAM/C,eAAA,sBAAa,QAAO,OAAM;AACxB,QAAI,UAAU,KAAK,QAAQ;AAC3B,QAAI,WAAW,OAAI;AAAE,aAAO;;AAC5B,QAAI,QAAO,KAAK,QAAQ;AACxB,QAAI,OAAO,KAAK,OAAO,MAAK,WAAW,QAAQ;AAC/C,UAAK,UAAS;AACd,WAAO,IAAI,SAAS,OAAM;;qBAM5B,aAAA,oBAAW,OAAM;AACf,WAAO,IAAI,SAAS,CAAC,OAAM,OAAO,KAAK,UAAU,KAAK,OAAO,MAAK;;qBAMpE,WAAA,kBAAS,OAAM;AACb,WAAO,IAAI,SAAS,KAAK,QAAQ,OAAO,QAAO,KAAK,OAAO,MAAK;;qBAKlE,KAAA,YAAG,OAAO;AACR,QAAI,KAAK,QAAQ,UAAU,MAAM,QAAQ,QAAM;AAAE,aAAO;;AACxD,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAC7C;AAAM,UAAI,CAAC,KAAK,QAAQ,GAAG,GAAG,MAAM,QAAQ,KAAG;AAAE,eAAO;;;AACpD,WAAO;;AAKT,qBAAI,WAAA,MAAA,WAAa;AAAE,WAAO,KAAK,QAAQ,SAAS,KAAK,QAAQ,KAAK;;AAIlE,qBAAI,UAAA,MAAA,WAAY;AAAE,WAAO,KAAK,QAAQ,SAAS,KAAK,QAAQ,KAAK,QAAQ,SAAS,KAAK;;AAIvF,qBAAI,WAAA,MAAA,WAAa;AAAE,WAAO,KAAK,QAAQ;;qBAKvC,QAAA,eAAM,QAAO;AACX,QAAI,SAAQ,KAAK,QAAQ;AACzB,QAAI,CAAC,QAAK;AAAE,YAAM,IAAI,WAAW,WAAW,SAAQ,uBAAuB;;AAC3E,WAAO;;qBAKT,aAAA,oBAAW,QAAO;AAChB,WAAO,KAAK,QAAQ;;qBAMtB,UAAA,iBAAQ,GAAG;AACT,aAAS,IAAI,GAAG,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AACnD,UAAI,SAAQ,KAAK,QAAQ;AACzB,QAAE,QAAO,GAAG;AACZ,WAAK,OAAM;;;qBAOf,gBAAA,yBAAc,OAAO,KAAS;;YAAH;AACzB,WAAO,cAAc,MAAM,OAAO;;qBAQpC,cAAA,uBAAY,OAAO,KAAiB,UAAuB;;YAAlC,KAAK;;iBAAiB,MAAM;AACnD,WAAO,YAAY,MAAM,OAAO,KAAK;;qBAOvC,YAAA,mBAAU,KAAK,OAAY;;cAAJ;AACrB,QAAI,OAAO,GAAC;AAAE,aAAO,SAAS,GAAG;;AACjC,QAAI,OAAO,KAAK,MAAI;AAAE,aAAO,SAAS,KAAK,QAAQ,QAAQ;;AAC3D,QAAI,MAAM,KAAK,QAAQ,MAAM,GAAC;AAAE,YAAM,IAAI,WAAU,cAAa,MAAG,2BAAyB,OAAI;;AACjG,aAAS,IAAI,GAAG,SAAS,KAAI,KAAK;AAChC,UAAI,MAAM,KAAK,MAAM,IAAI,OAAM,SAAS,IAAI;AAC5C,UAAI,QAAO,KAAK;AACd,YAAI,QAAO,OAAO,QAAQ,GAAC;AAAE,iBAAO,SAAS,IAAI,GAAG;;AACpD,eAAO,SAAS,GAAG;;AAErB,eAAS;;;qBAMb,WAAA,oBAAW;AAAE,WAAO,MAAM,KAAK,kBAAkB;;qBAEjD,gBAAA,yBAAgB;AAAE,WAAO,KAAK,QAAQ,KAAK;;qBAI3C,SAAA,kBAAS;AACP,WAAO,KAAK,QAAQ,SAAS,KAAK,QAAQ,IAAG,SAAC,GAAA;AAAA,aAAK,EAAE;SAAY;;AAKnE,WAAO,WAAA,kBAAS,SAAQ,OAAO;AAC7B,QAAI,CAAC,OAAK;AAAE,aAAO,SAAS;;AAC5B,QAAI,CAAC,MAAM,QAAQ,QAAM;AAAE,YAAM,IAAI,WAAW;;AAChD,WAAO,IAAI,SAAS,MAAM,IAAI,QAAO;;AAMvC,WAAO,YAAA,mBAAU,OAAO;AACtB,QAAI,CAAC,MAAM,QAAM;AAAE,aAAO,SAAS;;AACnC,QAAI,QAAQ,OAAO;AACnB,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,UAAI,QAAO,MAAM;AACjB,cAAQ,MAAK;AACb,UAAI,KAAK,MAAK,UAAU,MAAM,IAAI,GAAG,WAAW,QAAO;AACrD,YAAI,CAAC,QAAM;AAAE,mBAAS,MAAM,MAAM,GAAG;;AACrC,eAAO,OAAO,SAAS,KAAK,MAAK,SAAS,OAAO,OAAO,SAAS,GAAG,OAAO,MAAK;iBACvE,QAAQ;AACjB,eAAO,KAAK;;;AAGhB,WAAO,IAAI,SAAS,UAAU,OAAO;;AAQvC,WAAO,OAAA,cAAK,QAAO;AACjB,QAAI,CAAC,QAAK;AAAE,aAAO,SAAS;;AAC5B,QAAI,kBAAiB,UAAQ;AAAE,aAAO;;AACtC,QAAI,MAAM,QAAQ,SAAM;AAAE,aAAO,KAAK,UAAU;;AAChD,QAAI,OAAM,OAAK;AAAE,aAAO,IAAI,SAAS,CAAC,SAAQ,OAAM;;AACpD,UAAM,IAAI,WAAW,qBAAqB,SAAQ,mBAC5B,QAAM,eAAe,qEAAqE;;;AAIpH,MAAM,QAAQ,EAAC,OAAO,GAAG,QAAQ;AACjC,oBAAkB,QAAO,SAAQ;AAC/B,UAAM,QAAQ;AACd,UAAM,SAAS;AACf,WAAO;;AAOT,WAAS,QAAQ,IAAI,SAAS,IAAI;ACtR3B,uBAAqB,GAAG,GAAG;AAChC,QAAI,MAAM,GAAC;AAAE,aAAO;;AACpB,QAAI,CAAE,MAAK,OAAO,KAAK,aACnB,CAAE,MAAK,OAAO,KAAK,WAAS;AAAE,aAAO;;AACzC,QAAI,QAAQ,MAAM,QAAQ;AAC1B,QAAI,MAAM,QAAQ,MAAM,OAAK;AAAE,aAAO;;AACtC,QAAI,OAAO;AACT,UAAI,EAAE,UAAU,EAAE,QAAM;AAAE,eAAO;;AACjC,eAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAG;AAAE,YAAI,CAAC,YAAY,EAAE,IAAI,EAAE,KAAG;AAAE,iBAAO;;;WACnE;AACL,eAAS,KAAK,GAAC;AAAE,YAAI,CAAE,MAAK,MAAM,CAAC,YAAY,EAAE,IAAI,EAAE,KAAG;AAAE,iBAAO;;;AACnE,eAAS,OAAK,GAAC;AAAE,YAAI,CAAE,QAAK,IAAE;AAAE,iBAAO;;;;AAEzC,WAAO;;MCLI,OACX,eAAY,MAAM,OAAO;AAGvB,SAAK,OAAO;AAGZ,SAAK,QAAQ;;iBASf,WAAA,kBAAS,MAAK;AACZ,QAAI,OAAM,SAAS;AACnB,aAAS,IAAI,GAAG,IAAI,KAAI,QAAQ,KAAK;AACnC,UAAI,QAAQ,KAAI;AAChB,UAAI,KAAK,GAAG,QAAM;AAAE,eAAO;;AAC3B,UAAI,KAAK,KAAK,SAAS,MAAM,OAAO;AAClC,YAAI,CAAC,OAAI;AAAE,kBAAO,KAAI,MAAM,GAAG;;iBACtB,MAAM,KAAK,SAAS,KAAK,OAAO;AACzC,eAAO;aACF;AACL,YAAI,CAAC,UAAU,MAAM,KAAK,OAAO,KAAK,KAAK,MAAM;AAC/C,cAAI,CAAC,OAAI;AAAE,oBAAO,KAAI,MAAM,GAAG;;AAC/B,gBAAK,KAAK;AACV,mBAAS;;AAEX,YAAI,OAAI;AAAE,gBAAK,KAAK;;;;AAGxB,QAAI,CAAC,OAAI;AAAE,cAAO,KAAI;;AACtB,QAAI,CAAC,QAAM;AAAE,YAAK,KAAK;;AACvB,WAAO;;iBAMT,gBAAA,uBAAc,MAAK;AACjB,aAAS,IAAI,GAAG,IAAI,KAAI,QAAQ,KACpC;AAAM,UAAI,KAAK,GAAG,KAAI,KACtB;AAAQ,eAAO,KAAI,MAAM,GAAG,GAAG,OAAO,KAAI,MAAM,IAAI;;;AAChD,WAAO;;iBAKT,UAAA,iBAAQ,MAAK;AACX,aAAS,IAAI,GAAG,IAAI,KAAI,QAAQ,KACpC;AAAM,UAAI,KAAK,GAAG,KAAI,KAAG;AAAE,eAAO;;;AAC9B,WAAO;;iBAMT,KAAA,aAAG,OAAO;AACR,WAAO,QAAQ,SACZ,KAAK,QAAQ,MAAM,QAAQ,YAAY,KAAK,OAAO,MAAM;;iBAK9D,SAAA,mBAAS;AACP,QAAI,MAAM,EAAC,MAAM,KAAK,KAAK;AAC3B,aAAS,KAAK,KAAK,OAAO;AACxB,UAAI,QAAQ,KAAK;AACjB;;AAEF,WAAO;;AAIT,OAAO,WAAA,mBAAS,SAAQ,MAAM;AAC5B,QAAI,CAAC,MAAI;AAAE,YAAM,IAAI,WAAW;;AAChC,QAAI,OAAO,QAAO,MAAM,KAAK;AAC7B,QAAI,CAAC,MAAI;AAAE,YAAM,IAAI,WAAU,2BAA0B,KAAK,OAAI;;AAClE,WAAO,KAAK,OAAO,KAAK;;AAK1B,OAAO,UAAA,iBAAQ,GAAG,GAAG;AACnB,QAAI,KAAK,GAAC;AAAE,aAAO;;AACnB,QAAI,EAAE,UAAU,EAAE,QAAM;AAAE,aAAO;;AACjC,aAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAClC;AAAM,UAAI,CAAC,EAAE,GAAG,GAAG,EAAE,KAAG;AAAE,eAAO;;;AAC7B,WAAO;;AAMT,OAAO,UAAA,iBAAQ,QAAO;AACpB,QAAI,CAAC,UAAS,OAAM,UAAU,GAAC;AAAE,aAAO,KAAK;;AAC7C,QAAI,kBAAiB,MAAI;AAAE,aAAO,CAAC;;AACnC,QAAI,QAAO,OAAM;AACjB,UAAK,KAAI,SAAE,GAAG,GAAC;AAAA,aAAK,EAAE,KAAK,OAAO,EAAE,KAAK;;AACzC,WAAO;;AAKX,OAAK,OAAO;AC7GL,wBAAsB,SAAS;AACpC,QAAI,OAAM,MAAM,KAAK,MAAM;AAC3B,SAAI,YAAY,aAAa;AAC7B,WAAO;;AAGT,eAAa,YAAY,OAAO,OAAO,MAAM;AAC7C,eAAa,UAAU,cAAc;AACrC,eAAa,UAAU,OAAO;MAKjB,QAWX,gBAAY,UAAS,WAAW,SAAS;AAEvC,SAAK,UAAU;AAEf,SAAK,YAAY;AAEjB,SAAK,UAAU;;;AAKjB,uBAAI,KAAA,MAAA,WAAO;AACT,WAAO,KAAK,QAAQ,OAAO,KAAK,YAAY,KAAK;;kBAGnD,WAAA,kBAAS,KAAK,UAAU;AACtB,QAAI,WAAU,WAAW,KAAK,SAAS,MAAM,KAAK,WAAW,UAAU;AACvE,WAAO,YAAW,IAAI,MAAM,UAAS,KAAK,WAAW,KAAK;;kBAG5D,gBAAA,uBAAc,OAAM,IAAI;AACtB,WAAO,IAAI,MAAM,YAAY,KAAK,SAAS,QAAO,KAAK,WAAW,KAAK,KAAK,YAAY,KAAK,WAAW,KAAK;;kBAK/G,KAAA,aAAG,OAAO;AACR,WAAO,KAAK,QAAQ,GAAG,MAAM,YAAY,KAAK,aAAa,MAAM,aAAa,KAAK,WAAW,MAAM;;kBAGtG,WAAA,qBAAW;AACT,WAAO,KAAK,UAAU,MAAM,KAAK,YAAY,MAAM,KAAK,UAAU;;kBAKpE,SAAA,mBAAS;AACP,QAAI,CAAC,KAAK,QAAQ,MAAI;AAAE,aAAO;;AAC/B,QAAI,OAAO,EAAC,SAAS,KAAK,QAAQ;AAClC,QAAI,KAAK,YAAY,GAAC;AAAE,WAAK,YAAY,KAAK;;AAC9C,QAAI,KAAK,UAAU,GAAC;AAAE,WAAK,UAAU,KAAK;;AAC1C,WAAO;;AAKT,QAAO,WAAA,mBAAS,SAAQ,MAAM;AAC5B,QAAI,CAAC,MAAI;AAAE,aAAO,MAAM;;AACxB,QAAI,YAAY,KAAK,aAAa,GAAG,UAAU,KAAK,WAAW;AAC/D,QAAI,OAAO,aAAa,YAAY,OAAO,WAAW,UAC1D;AAAM,YAAM,IAAI,WAAW;;AACvB,WAAO,IAAI,MAAM,SAAS,SAAS,SAAQ,KAAK,UAAU,WAAW;;AAMvE,QAAO,UAAA,iBAAQ,UAAU,eAAoB;;sBAAN;AACrC,QAAI,YAAY,GAAG,UAAU;AAC7B,aAAS,IAAI,SAAS,YAAY,KAAK,CAAC,EAAE,UAAW,kBAAiB,CAAC,EAAE,KAAK,KAAK,YAAY,IAAI,EAAE,YAAU;AAAE;;AACjH,aAAS,MAAI,SAAS,WAAW,OAAK,CAAC,IAAE,UAAW,kBAAiB,CAAC,IAAE,KAAK,KAAK,YAAY,MAAI,IAAE,WAAS;AAAE;;AAC/G,WAAO,IAAI,MAAM,UAAU,WAAW;;;AAI1C,uBAAqB,UAAS,OAAM,IAAI;AACxC,QAAA,MAAwB,SAAQ,UAAU;AAAnC,QAAA,SAAA,IAAA;AAAO,QAAA,UAAA,IAAA;AAAiC,QAAE,SAAQ,SAAQ,WAAW;AAC5E,QAAA,QAA2C,SAAQ,UAAU;AAA/C,QAAA,UAAA,MAAA;AAAiB,QAAA,WAAA,MAAA;AAC7B,QAAI,WAAU,SAAQ,OAAM,QAAQ;AAClC,UAAI,YAAY,MAAM,CAAC,SAAQ,MAAM,SAAS,QAAM;AAAE,cAAM,IAAI,WAAW;;AAC3E,aAAO,SAAQ,IAAI,GAAG,OAAM,OAAO,SAAQ,IAAI;;AAEjD,QAAI,UAAS,SAAO;AAAE,YAAM,IAAI,WAAW;;AAC3C,WAAO,SAAQ,aAAa,QAAO,OAAM,KAAK,YAAY,OAAM,SAAS,QAAO,UAAS,GAAG,KAAK,UAAS;;AAG5G,sBAAoB,UAAS,MAAM,QAAQ,QAAQ;AACnD,QAAA,MAAwB,SAAQ,UAAU;AAAnC,QAAA,SAAA,IAAA;AAAO,QAAA,UAAA,IAAA;AAAiC,QAAE,SAAQ,SAAQ,WAAW;AAC1E,QAAI,WAAU,QAAQ,OAAM,QAAQ;AAClC,UAAI,UAAU,CAAC,OAAO,WAAW,QAAO,QAAO,SAAO;AAAE,eAAO;;AAC/D,aAAO,SAAQ,IAAI,GAAG,MAAM,OAAO,QAAQ,OAAO,SAAQ,IAAI;;AAEhE,QAAI,QAAQ,WAAW,OAAM,SAAS,OAAO,UAAS,GAAG;AACzD,WAAO,SAAS,SAAQ,aAAa,QAAO,OAAM,KAAK;;AAKzD,QAAM,QAAQ,IAAI,MAAM,SAAS,OAAO,GAAG;AAEpC,mBAAiB,OAAO,KAAK,QAAO;AACzC,QAAI,OAAM,YAAY,MAAM,OAC9B;AAAI,YAAM,IAAI,aAAa;;AACzB,QAAI,MAAM,QAAQ,OAAM,aAAa,IAAI,QAAQ,OAAM,SACzD;AAAI,YAAM,IAAI,aAAa;;AACzB,WAAO,aAAa,OAAO,KAAK,QAAO;;AAGzC,wBAAsB,OAAO,KAAK,QAAO,OAAO;AAC9C,QAAI,SAAQ,MAAM,MAAM,QAAQ,QAAO,MAAM,KAAK;AAClD,QAAI,UAAS,IAAI,MAAM,UAAU,QAAQ,MAAM,QAAQ,OAAM,WAAW;AACtE,UAAI,QAAQ,aAAa,OAAO,KAAK,QAAO,QAAQ;AACpD,aAAO,MAAK,KAAK,MAAK,QAAQ,aAAa,QAAO;eACzC,CAAC,OAAM,QAAQ,MAAM;AAC9B,aAAO,MAAM,OAAM,cAAc,OAAO,KAAK;eACpC,CAAC,OAAM,aAAa,CAAC,OAAM,WAAW,MAAM,SAAS,SAAS,IAAI,SAAS,OAAO;AAC3F,UAAI,SAAS,MAAM,QAAQ,WAAU,OAAO;AAC5C,aAAO,MAAM,QAAQ,SAAQ,IAAI,GAAG,MAAM,cAAc,OAAO,OAAM,SAAS,OAAO,SAAQ,IAAI,IAAI;WAChG;AACT,UAAA,MAAuB,uBAAuB,QAAO;AAA5C,UAAA,SAAA,IAAA;AAAO,UAAA,OAAA,IAAA;AACZ,aAAO,MAAM,OAAM,gBAAgB,OAAO,QAAO,MAAK,KAAK;;;AAI/D,qBAAmB,OAAM,KAAK;AAC5B,QAAI,CAAC,IAAI,KAAK,kBAAkB,MAAK,OACvC;AAAI,YAAM,IAAI,aAAa,iBAAiB,IAAI,KAAK,OAAO,WAAW,MAAK,KAAK;;;AAGjF,oBAAkB,SAAS,QAAQ,OAAO;AACxC,QAAI,QAAO,QAAQ,KAAK;AACxB,cAAU,OAAM,OAAO,KAAK;AAC5B,WAAO;;AAGT,mBAAiB,QAAO,QAAQ;AAC9B,QAAI,OAAO,OAAO,SAAS;AAC3B,QAAI,QAAQ,KAAK,OAAM,UAAU,OAAM,WAAW,OAAO,QAC3D;AAAI,aAAO,QAAQ,OAAM,SAAS,OAAO,MAAM,OAAO,OAAM;WAE5D;AAAI,aAAO,KAAK;;;AAGhB,oBAAkB,QAAQ,MAAM,OAAO,QAAQ;AAC7C,QAAI,QAAQ,SAAQ,QAAQ,KAAK;AACjC,QAAI,aAAa,GAAG,WAAW,OAAO,KAAK,MAAM,SAAS,MAAK;AAC/D,QAAI,QAAQ;AACV,mBAAa,OAAO,MAAM;AAC1B,UAAI,OAAO,QAAQ,OAAO;AACxB;iBACS,OAAO,YAAY;AAC5B,gBAAQ,OAAO,WAAW;AAC1B;;;AAGJ,aAAS,IAAI,YAAY,IAAI,UAAU,KAAG;AAAE,cAAQ,MAAK,MAAM,IAAI;;AACnE,QAAI,QAAQ,KAAK,SAAS,SAAS,KAAK,YAC1C;AAAI,cAAQ,KAAK,YAAY;;;AAG7B,iBAAe,OAAM,UAAS;AAC5B,QAAI,CAAC,MAAK,KAAK,aAAa,WAC9B;AAAI,YAAM,IAAI,aAAa,8BAA8B,MAAK,KAAK;;AACjE,WAAO,MAAK,KAAK;;AAGnB,2BAAyB,OAAO,QAAQ,MAAM,KAAK,OAAO;AACxD,QAAI,YAAY,MAAM,QAAQ,SAAS,SAAS,OAAO,QAAQ,QAAQ;AACvE,QAAI,UAAU,IAAI,QAAQ,SAAS,SAAS,MAAM,KAAK,QAAQ;AAE/D,QAAI,WAAU;AACd,aAAS,MAAM,OAAO,OAAO;AAC7B,QAAI,aAAa,WAAW,OAAO,MAAM,UAAU,KAAK,MAAM,QAAQ;AACpE,gBAAU,WAAW;AACrB,cAAQ,MAAM,WAAW,gBAAgB,OAAO,QAAQ,MAAM,KAAK,QAAQ,KAAK;WAC3E;AACL,UAAI,WACR;AAAM,gBAAQ,MAAM,WAAW,cAAc,OAAO,QAAQ,QAAQ,KAAK;;AACrE,eAAS,QAAQ,MAAM,OAAO;AAC9B,UAAI,SACR;AAAM,gBAAQ,MAAM,SAAS,cAAc,MAAM,KAAK,QAAQ,KAAK;;;AAEjE,aAAS,KAAK,MAAM,OAAO;AAC3B,WAAO,IAAI,SAAS;;AAGtB,yBAAuB,OAAO,KAAK,OAAO;AACxC,QAAI,WAAU;AACd,aAAS,MAAM,OAAO,OAAO;AAC7B,QAAI,MAAM,QAAQ,OAAO;AACvB,UAAI,OAAO,SAAS,OAAO,KAAK,QAAQ;AACxC,cAAQ,MAAM,MAAM,cAAc,OAAO,KAAK,QAAQ,KAAK;;AAE7D,aAAS,KAAK,MAAM,OAAO;AAC3B,WAAO,IAAI,SAAS;;AAGtB,kCAAgC,QAAO,QAAQ;AAC7C,QAAI,QAAQ,OAAO,QAAQ,OAAM,WAAW,SAAS,OAAO,KAAK;AACjE,QAAI,QAAO,OAAO,KAAK,OAAM;AAC7B,aAAS,IAAI,QAAQ,GAAG,KAAK,GAAG,KAClC;AAAI,cAAO,OAAO,KAAK,GAAG,KAAK,SAAS,KAAK;;AAC3C,WAAO;MAAC,OAAO,MAAK,eAAe,OAAM,YAAY;MAC7C,KAAK,MAAK,eAAe,MAAK,QAAQ,OAAO,OAAM,UAAU;;;MCrN1D,cACX,sBAAY,KAAK,MAAM,cAAc;AAEnC,SAAK,MAAM;AACX,SAAK,OAAO;AAKZ,SAAK,QAAQ,KAAK,SAAS,IAAI;AAE/B,SAAK,eAAe;;;wBAGtB,eAAA,sBAAa,KAAK;AAChB,QAAI,OAAO,MAAI;AAAE,aAAO,KAAK;;AAC7B,QAAI,MAAM,GAAC;AAAE,aAAO,KAAK,QAAQ;;AACjC,WAAO;;AAOT,uBAAI,OAAA,MAAA,WAAS;AAAE,WAAO,KAAK,KAAK,KAAK;;AAIrC,uBAAI,IAAA,MAAA,WAAM;AAAE,WAAO,KAAK,KAAK;;wBAK7B,OAAA,cAAK,OAAO;AAAE,WAAO,KAAK,KAAK,KAAK,aAAa,SAAS;;wBAM1D,QAAA,eAAM,OAAO;AAAE,WAAO,KAAK,KAAK,KAAK,aAAa,SAAS,IAAI;;wBAK/D,aAAA,oBAAW,OAAO;AAChB,YAAQ,KAAK,aAAa;AAC1B,WAAO,KAAK,MAAM,SAAU,UAAS,KAAK,SAAS,CAAC,KAAK,aAAa,IAAI;;wBAM5E,QAAA,eAAM,OAAO;AACX,YAAQ,KAAK,aAAa;AAC1B,WAAO,SAAS,IAAI,IAAI,KAAK,KAAK,QAAQ,IAAI,KAAK;;wBAMrD,MAAA,aAAI,OAAO;AACT,YAAQ,KAAK,aAAa;AAC1B,WAAO,KAAK,MAAM,SAAS,KAAK,KAAK,OAAO,QAAQ;;wBAOtD,SAAA,gBAAO,OAAO;AACZ,YAAQ,KAAK,aAAa;AAC1B,QAAI,CAAC,OAAK;AAAE,YAAM,IAAI,WAAW;;AACjC,WAAO,SAAS,KAAK,QAAQ,IAAI,KAAK,MAAM,KAAK,KAAK,QAAQ,IAAI;;wBAMpE,QAAA,eAAM,OAAO;AACX,YAAQ,KAAK,aAAa;AAC1B,QAAI,CAAC,OAAK;AAAE,YAAM,IAAI,WAAW;;AACjC,WAAO,SAAS,KAAK,QAAQ,IAAI,KAAK,MAAM,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,KAAK,QAAQ,GAAG;;AAO9F,uBAAI,WAAA,MAAA,WAAa;AAAE,WAAO,KAAK,MAAM,KAAK,KAAK,KAAK,KAAK,SAAS;;AAMlE,uBAAI,UAAA,MAAA,WAAY;AACd,QAAI,SAAS,KAAK,QAAQ,SAAQ,KAAK,MAAM,KAAK;AAClD,QAAI,UAAS,OAAO,YAAU;AAAE,aAAO;;AACvC,QAAI,OAAO,KAAK,MAAM,KAAK,KAAK,KAAK,KAAK,SAAS,IAAI,SAAQ,OAAO,MAAM;AAC5E,WAAO,OAAO,OAAO,MAAM,QAAO,IAAI,QAAQ;;AAOhD,uBAAI,WAAA,MAAA,WAAa;AACf,QAAI,SAAQ,KAAK,MAAM,KAAK;AAC5B,QAAI,OAAO,KAAK,MAAM,KAAK,KAAK,KAAK,KAAK,SAAS;AACnD,QAAI,MAAI;AAAE,aAAO,KAAK,OAAO,MAAM,QAAO,IAAI,GAAG;;AACjD,WAAO,UAAS,IAAI,OAAO,KAAK,OAAO,MAAM,SAAQ;;wBAMvD,aAAA,oBAAW,QAAO,OAAO;AACvB,YAAQ,KAAK,aAAa;AAC1B,QAAI,QAAO,KAAK,KAAK,QAAQ,IAAI,MAAM,SAAS,IAAI,IAAI,KAAK,KAAK,QAAQ,IAAI,KAAK;AACnF,aAAS,IAAI,GAAG,IAAI,QAAO,KAAG;AAAE,aAAO,MAAK,MAAM,GAAG;;AACrD,WAAO;;wBAQT,QAAA,iBAAQ;AACN,QAAI,SAAS,KAAK,QAAQ,SAAQ,KAAK;AAGvC,QAAI,OAAO,QAAQ,QAAQ,GAAC;AAAE,aAAO,KAAK;;AAG1C,QAAI,KAAK,YAAU;AAAE,aAAO,OAAO,MAAM,QAAO;;AAEhD,QAAI,QAAO,OAAO,WAAW,SAAQ,IAAI,QAAQ,OAAO,WAAW;AAGnE,QAAI,CAAC,OAAM;AAAE,UAAI,MAAM;AAAM,cAAO;AAAO,cAAQ;;AAInD,QAAI,SAAQ,MAAK;AACjB,aAAS,IAAI,GAAG,IAAI,OAAM,QAAQ,KACtC;AAAM,UAAI,OAAM,GAAG,KAAK,KAAK,cAAc,SAAU,EAAC,SAAS,CAAC,OAAM,GAAG,QAAQ,MAAM,SACvF;AAAQ,iBAAQ,OAAM,KAAK,cAAc;;;AAErC,WAAO;;wBAUT,cAAA,qBAAY,MAAM;AAChB,QAAI,SAAQ,KAAK,OAAO,WAAW,KAAK;AACxC,QAAI,CAAC,UAAS,CAAC,OAAM,UAAQ;AAAE,aAAO;;AAEtC,QAAI,SAAQ,OAAM,OAAO,OAAO,KAAK,OAAO,WAAW,KAAK;AAC5D,aAAS,IAAI,GAAG,IAAI,OAAM,QAAQ,KACtC;AAAM,UAAI,OAAM,GAAG,KAAK,KAAK,cAAc,SAAU,EAAC,QAAQ,CAAC,OAAM,GAAG,QAAQ,KAAK,SACrF;AAAQ,iBAAQ,OAAM,KAAK,cAAc;;;AACrC,WAAO;;wBAMT,cAAA,qBAAY,KAAK;AACf,aAAS,QAAQ,KAAK,OAAO,QAAQ,GAAG,SAC5C;AAAM,UAAI,KAAK,MAAM,UAAU,OAAO,KAAK,IAAI,UAAU,KAAG;AAAE,eAAO;;;AACjE,WAAO;;wBAWT,aAAA,oBAAW,OAAc,MAAM;;cAAZ;AACjB,QAAI,MAAM,MAAM,KAAK,KAAG;AAAE,aAAO,MAAM,WAAW;;AAClD,aAAS,IAAI,KAAK,QAAS,MAAK,OAAO,iBAAiB,KAAK,OAAO,MAAM,MAAM,IAAI,IAAI,KAAK,GAAG,KACpG;AAAM,UAAI,MAAM,OAAO,KAAK,IAAI,MAAO,EAAC,QAAQ,KAAK,KAAK,KAAK,MAC/D;AAAQ,eAAO,IAAI,UAAU,MAAM,OAAO;;;;wBAKxC,aAAA,oBAAW,OAAO;AAChB,WAAO,KAAK,MAAM,KAAK,gBAAgB,MAAM,MAAM,MAAM;;wBAK3D,MAAA,aAAI,OAAO;AACT,WAAO,MAAM,MAAM,KAAK,MAAM,QAAQ;;wBAKxC,MAAA,aAAI,OAAO;AACT,WAAO,MAAM,MAAM,KAAK,MAAM,QAAQ;;wBAGxC,WAAA,qBAAW;AACT,QAAI,MAAM;AACV,aAAS,IAAI,GAAG,KAAK,KAAK,OAAO,KACrC;AAAM,aAAQ,OAAM,MAAM,MAAM,KAAK,KAAK,GAAG,KAAK,OAAO,MAAM,KAAK,MAAM,IAAI;;AAC1E,WAAO,MAAM,MAAM,KAAK;;AAG1B,cAAO,UAAA,iBAAQ,MAAK,KAAK;AACvB,QAAI,CAAE,QAAO,KAAK,OAAO,KAAI,QAAQ,OAAK;AAAE,YAAM,IAAI,WAAW,cAAc,MAAM;;AACrF,QAAI,OAAO;AACX,QAAI,SAAQ,GAAG,eAAe;AAC9B,aAAS,QAAO,UAAO;AAC3B,UAAA,MAA4B,MAAK,QAAQ,UAAU;AAAxC,UAAA,SAAA,IAAA;AAAO,UAAA,UAAA,IAAA;AACZ,UAAI,MAAM,eAAe;AACzB,WAAK,KAAK,OAAM,QAAO,SAAQ;AAC/B,UAAI,CAAC,KAAG;AAAE;;AACV,cAAO,MAAK,MAAM;AAClB,UAAI,MAAK,QAAM;AAAE;;AACjB,qBAAe,MAAM;AACrB,gBAAS,UAAS;;AAEpB,WAAO,IAAI,YAAY,KAAK,MAAM;;AAGpC,cAAO,gBAAA,uBAAc,MAAK,KAAK;AAC7B,aAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC5C,UAAI,SAAS,aAAa;AAC1B,UAAI,OAAO,OAAO,OAAO,OAAO,OAAO,MAAG;AAAE,eAAO;;;AAErD,QAAI,UAAS,aAAa,mBAAmB,YAAY,QAAQ,MAAK;AACtE,sBAAmB,mBAAkB,KAAK;AAC1C,WAAO;;;AAIX,MAAI,eAAe;AAAnB,MAAuB,kBAAkB;AAAzC,MAA4C,mBAAmB;MAIlD,YAKX,oBAAY,OAAO,KAAK,OAAO;AAM7B,SAAK,QAAQ;AAGb,SAAK,MAAM;AAEX,SAAK,QAAQ;;;AAIf,yBAAI,MAAA,MAAA,WAAQ;AAAE,WAAO,KAAK,MAAM,OAAO,KAAK,QAAQ;;AAEpD,yBAAI,IAAA,MAAA,WAAM;AAAE,WAAO,KAAK,IAAI,MAAM,KAAK,QAAQ;;AAG/C,yBAAI,OAAA,MAAA,WAAS;AAAE,WAAO,KAAK,MAAM,KAAK,KAAK;;AAE3C,yBAAI,WAAA,MAAA,WAAa;AAAE,WAAO,KAAK,MAAM,MAAM,KAAK;;AAEhD,yBAAI,SAAA,MAAA,WAAW;AAAE,WAAO,KAAK,IAAI,WAAW,KAAK;;;AC3RnD,MAAM,aAAa,OAAO,OAAO;MAcpB,OACX,eAAY,MAAM,OAAO,UAAS,QAAO;AAGvC,SAAK,OAAO;AAMZ,SAAK,QAAQ;AAIb,SAAK,UAAU,YAAW,SAAS;AAKnC,SAAK,QAAQ,UAAS,KAAK;;;AAY7B,uBAAI,SAAA,MAAA,WAAW;AAAE,WAAO,KAAK,SAAS,IAAI,IAAI,KAAK,QAAQ;;AAI3D,uBAAI,WAAA,MAAA,WAAa;AAAE,WAAO,KAAK,QAAQ;;iBAKvC,QAAA,gBAAM,QAAO;AAAE,WAAO,KAAK,QAAQ,MAAM;;iBAIzC,aAAA,qBAAW,QAAO;AAAE,WAAO,KAAK,QAAQ,WAAW;;iBAKnD,UAAA,kBAAQ,GAAG;AAAE,SAAK,QAAQ,QAAQ;;iBAUlC,eAAA,uBAAa,OAAM,IAAI,GAAG,UAAc;;iBAAH;AACnC,SAAK,QAAQ,aAAa,OAAM,IAAI,GAAG,UAAU;;iBAMnD,cAAA,sBAAY,GAAG;AACb,SAAK,aAAa,GAAG,KAAK,QAAQ,MAAM;;AAM1C,uBAAI,YAAA,MAAA,WAAc;AAAE,WAAO,KAAK,YAAY,GAAG,KAAK,QAAQ,MAAM;;iBAOlE,cAAA,sBAAY,OAAM,IAAI,gBAAgB,UAAU;AAC9C,WAAO,KAAK,QAAQ,YAAY,OAAM,IAAI,gBAAgB;;AAM5D,uBAAI,WAAA,MAAA,WAAa;AAAE,WAAO,KAAK,QAAQ;;AAKvC,uBAAI,UAAA,MAAA,WAAY;AAAE,WAAO,KAAK,QAAQ;;iBAItC,KAAA,aAAG,OAAO;AACR,WAAO,QAAQ,SAAU,KAAK,WAAW,UAAU,KAAK,QAAQ,GAAG,MAAM;;iBAM3E,aAAA,oBAAW,OAAO;AAChB,WAAO,KAAK,UAAU,MAAM,MAAM,MAAM,OAAO,MAAM;;iBAMvD,YAAA,mBAAU,MAAM,OAAO,QAAO;AAC5B,WAAO,KAAK,QAAQ,QAClB,YAAY,KAAK,OAAO,SAAS,KAAK,gBAAgB,eACtD,KAAK,QAAQ,KAAK,OAAO,UAAS,KAAK;;iBAM3C,OAAA,cAAK,UAAgB;;iBAAN;AACb,QAAI,YAAW,KAAK,SAAO;AAAE,aAAO;;AACpC,WAAO,IAAI,KAAK,YAAY,KAAK,MAAM,KAAK,OAAO,UAAS,KAAK;;iBAMnE,OAAA,cAAK,QAAO;AACV,WAAO,UAAS,KAAK,QAAQ,OAAO,IAAI,KAAK,YAAY,KAAK,MAAM,KAAK,OAAO,KAAK,SAAS;;iBAOhG,MAAA,cAAI,OAAM,IAAI;AACZ,QAAI,SAAQ,KAAK,MAAM,KAAK,QAAQ,MAAI;AAAE,aAAO;;AACjD,WAAO,KAAK,KAAK,KAAK,QAAQ,IAAI,OAAM;;iBAM1C,QAAA,eAAM,OAAM,IAAwB,gBAAwB;;WAA3C,KAAK,QAAQ;;uBAAuB;AACnD,QAAI,SAAQ,IAAE;AAAE,aAAO,MAAM;;AAE7B,QAAI,QAAQ,KAAK,QAAQ,QAAO,MAAM,KAAK,QAAQ;AACnD,QAAI,QAAQ,iBAAiB,IAAI,MAAM,YAAY;AACnD,QAAI,SAAQ,MAAM,MAAM,QAAQ,QAAO,MAAM,KAAK;AAClD,QAAI,WAAU,MAAK,QAAQ,IAAI,MAAM,MAAM,QAAO,IAAI,MAAM;AAC5D,WAAO,IAAI,MAAM,UAAS,MAAM,QAAQ,OAAO,IAAI,QAAQ;;iBAU7D,UAAA,mBAAQ,OAAM,IAAI,QAAO;AACvB,WAAO,QAAQ,KAAK,QAAQ,QAAO,KAAK,QAAQ,KAAK;;iBAKvD,SAAA,gBAAO,KAAK;AACV,aAAS,QAAO,UAAQ;AAC5B,UAAA,MAA4B,MAAK,QAAQ,UAAU;AAAxC,UAAA,SAAA,IAAA;AAAO,UAAA,UAAA,IAAA;AACZ,cAAO,MAAK,WAAW;AACvB,UAAI,CAAC,OAAI;AAAE,eAAO;;AAClB,UAAI,WAAU,OAAO,MAAK,QAAM;AAAE,eAAO;;AACzC,aAAO,UAAS;;;iBAQpB,aAAA,oBAAW,KAAK;AAClB,QAAA,MAA0B,KAAK,QAAQ,UAAU;AAAxC,QAAA,SAAA,IAAA;AAAO,QAAA,UAAA,IAAA;AACZ,WAAO,EAAC,MAAM,KAAK,QAAQ,WAAW,SAAM,OAAE,QAAK,QAAE;;iBAOvD,cAAA,qBAAY,KAAK;AACf,QAAI,OAAO,GAAC;AAAE,aAAO,EAAC,MAAM,MAAM,OAAO,GAAG,QAAQ;;AACxD,QAAA,MAA0B,KAAK,QAAQ,UAAU;AAAxC,QAAA,SAAA,IAAA;AAAO,QAAA,UAAA,IAAA;AACZ,QAAI,UAAS,KAAG;AAAE,aAAO,EAAC,MAAM,KAAK,QAAQ,MAAM,SAAM,OAAE,QAAK,QAAE;;AAClE,QAAI,QAAO,KAAK,QAAQ,MAAM,SAAQ;AACtC,WAAO,EAAA,MAAC,OAAM,OAAO,SAAQ,GAAG,QAAQ,UAAS,MAAK;;iBAMxD,UAAA,kBAAQ,KAAK;AAAE,WAAO,YAAY,cAAc,MAAM;;iBAEtD,iBAAA,wBAAe,KAAK;AAAE,WAAO,YAAY,QAAQ,MAAM;;iBAKvD,eAAA,sBAAa,OAAM,IAAI,MAAM;AAC3B,QAAI,SAAQ;AACZ,QAAI,KAAK,OAAI;AAAE,WAAK,aAAa,OAAM,IAAE,SAAE,OAAQ;AACjD,YAAI,KAAK,QAAQ,MAAK,QAAM;AAAE,mBAAQ;;AACtC,eAAO,CAAC;;;AAEV,WAAO;;AAKT,uBAAI,QAAA,MAAA,WAAU;AAAE,WAAO,KAAK,KAAK;;AAKjC,uBAAI,YAAA,MAAA,WAAc;AAAE,WAAO,KAAK,KAAK;;AAIrC,uBAAI,cAAA,MAAA,WAAgB;AAAE,WAAO,KAAK,KAAK;;AAKvC,uBAAI,SAAA,MAAA,WAAW;AAAE,WAAO,KAAK,KAAK;;AAIlC,uBAAI,OAAA,MAAA,WAAS;AAAE,WAAO,KAAK,KAAK;;AAIhC,uBAAI,OAAA,MAAA,WAAS;AAAE,WAAO,KAAK,KAAK;;AAQhC,uBAAI,OAAA,MAAA,WAAS;AAAE,WAAO,KAAK,KAAK;;iBAKhC,WAAA,qBAAW;AACT,QAAI,KAAK,KAAK,KAAK,eAAa;AAAE,aAAO,KAAK,KAAK,KAAK,cAAc;;AACtE,QAAI,OAAO,KAAK,KAAK;AACrB,QAAI,KAAK,QAAQ,MACrB;AAAM,cAAQ,MAAM,KAAK,QAAQ,kBAAkB;;AAC/C,WAAO,UAAU,KAAK,OAAO;;iBAK/B,iBAAA,wBAAe,QAAO;AACpB,QAAI,QAAQ,KAAK,KAAK,aAAa,cAAc,KAAK,SAAS,GAAG;AAClE,QAAI,CAAC,OAAK;AAAE,YAAM,IAAI,MAAM;;AAC5B,WAAO;;iBAST,aAAA,oBAAW,OAAM,IAAI,aAA8B,QAAW,MAA8B;;oBAAzD,SAAS;;eAAe;;aAAS,YAAY;AAC9E,QAAI,MAAM,KAAK,eAAe,OAAM,cAAc,aAAa,QAAO;AACtE,QAAI,MAAM,OAAO,IAAI,cAAc,KAAK,SAAS;AACjD,QAAI,CAAC,OAAO,CAAC,IAAI,UAAQ;AAAE,aAAO;;AAClC,aAAS,IAAI,QAAO,IAAI,MAAK,KAAG;AAAE,UAAI,CAAC,KAAK,KAAK,YAAY,YAAY,MAAM,GAAG,QAAM;AAAE,eAAO;;;AACjG,WAAO;;iBAMT,iBAAA,wBAAe,OAAM,IAAI,MAAM,QAAO;AACpC,QAAI,UAAS,CAAC,KAAK,KAAK,YAAY,SAAM;AAAE,aAAO;;AACnD,QAAI,SAAQ,KAAK,eAAe,OAAM,UAAU;AAChD,QAAI,OAAM,UAAS,OAAM,cAAc,KAAK,SAAS;AACrD,WAAO,OAAM,KAAI,WAAW;;iBAQ9B,YAAA,mBAAU,OAAO;AACf,QAAI,MAAM,QAAQ,MAAI;AAAE,aAAO,KAAK,WAAW,KAAK,YAAY,KAAK,YAAY,MAAM;WAC3F;AAAS,aAAO,KAAK,KAAK,kBAAkB,MAAM;;;iBAMhD,QAAA,iBAAQ;AACN,QAAI,CAAC,KAAK,KAAK,aAAa,KAAK,UACrC;AAAM,YAAM,IAAI,WAAU,8BAA6B,KAAK,KAAK,OAAI,OAAK,KAAK,QAAQ,WAAW,MAAM,GAAG;;AACvG,QAAI,QAAO,KAAK;AAChB,aAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAG;AAAE,cAAO,KAAK,MAAM,GAAG,SAAS;;AAC1E,QAAI,CAAC,KAAK,QAAQ,OAAM,KAAK,QACjC;AAAM,YAAM,IAAI,WAAU,0CAAyC,KAAK,KAAK,OAAI,OAAK,KAAK,MAAM,IAAG,SAAC,GAAA;AAAA,eAAK,EAAE,KAAK;;;AAC7G,SAAK,QAAQ,QAAO,SAAC,OAAA;AAAA,aAAQ,MAAK;;;iBAKpC,SAAA,mBAAS;AACP,QAAI,MAAM,EAAC,MAAM,KAAK,KAAK;AAC3B,aAAS,KAAK,KAAK,OAAO;AACxB,UAAI,QAAQ,KAAK;AACjB;;AAEF,QAAI,KAAK,QAAQ,MACrB;AAAM,UAAI,UAAU,KAAK,QAAQ;;AAC7B,QAAI,KAAK,MAAM,QACnB;AAAM,UAAI,QAAQ,KAAK,MAAM,IAAG,SAAC,GAAA;AAAA,eAAK,EAAE;;;AACpC,WAAO;;AAKT,OAAO,WAAA,mBAAS,SAAQ,MAAM;AAC5B,QAAI,CAAC,MAAI;AAAE,YAAM,IAAI,WAAW;;AAChC,QAAI,SAAQ;AACZ,QAAI,KAAK,OAAO;AACd,UAAI,CAAC,MAAM,QAAQ,KAAK,QAAM;AAAE,cAAM,IAAI,WAAW;;AACrD,eAAQ,KAAK,MAAM,IAAI,QAAO;;AAEhC,QAAI,KAAK,QAAQ,QAAQ;AACvB,UAAI,OAAO,KAAK,QAAQ,UAAQ;AAAE,cAAM,IAAI,WAAW;;AACvD,aAAO,QAAO,KAAK,KAAK,MAAM;;AAEhC,QAAI,WAAU,SAAS,SAAS,SAAQ,KAAK;AAC7C,WAAO,QAAO,SAAS,KAAK,MAAM,OAAO,KAAK,OAAO,UAAS;;;AAI3D,MAAM,WAAQ,yBAAA,OAAA;AACnB,uBAAY,MAAM,OAAO,UAAS,QAAO;AACvC,YAAA,KAAK,MAAC,MAAM,OAAO,MAAM;AAEzB,UAAI,CAAC,UAAO;AAAE,cAAM,IAAI,WAAW;;AAEnC,WAAK,OAAO;;;;;;;AAGhB,cAAA,UAAE,WAAA,qBAAW;AACT,UAAI,KAAK,KAAK,KAAK,eAAa;AAAE,eAAO,KAAK,KAAK,KAAK,cAAc;;AACtE,aAAO,UAAU,KAAK,OAAO,KAAK,UAAU,KAAK;;AAGnD,0BAAI,YAAA,MAAA,WAAc;AAAE,aAAO,KAAK;;AAElC,cAAA,UAAE,cAAA,sBAAY,OAAM,IAAI;AAAE,aAAO,KAAK,KAAK,MAAM,OAAM;;AAErD,0BAAI,SAAA,MAAA,WAAW;AAAE,aAAO,KAAK,KAAK;;AAEpC,cAAA,UAAE,OAAA,eAAK,QAAO;AACV,aAAO,UAAS,KAAK,QAAQ,OAAO,IAAI,UAAS,KAAK,MAAM,KAAK,OAAO,KAAK,MAAM;;AAGvF,cAAA,UAAE,WAAA,kBAAS,OAAM;AACb,UAAI,SAAQ,KAAK,MAAI;AAAE,eAAO;;AAC9B,aAAO,IAAI,UAAS,KAAK,MAAM,KAAK,OAAO,OAAM,KAAK;;AAG1D,cAAA,UAAE,MAAA,cAAI,OAAU,IAAuB;;gBAA1B;;aAAQ,KAAK,KAAK;AAC3B,UAAI,SAAQ,KAAK,MAAM,KAAK,KAAK,QAAM;AAAE,eAAO;;AAChD,aAAO,KAAK,SAAS,KAAK,KAAK,MAAM,OAAM;;AAG/C,cAAA,UAAE,KAAA,cAAG,OAAO;AACR,aAAO,KAAK,WAAW,UAAU,KAAK,QAAQ,MAAM;;AAGxD,cAAA,UAAE,SAAA,mBAAS;AACP,UAAI,QAAO,MAAA,UAAM,OAAA,KAAM;AACvB,YAAK,OAAO,KAAK;AACjB,aAAO;;;;IAzCmB;AA6C9B,qBAAmB,QAAO,KAAK;AAC7B,aAAS,IAAI,OAAM,SAAS,GAAG,KAAK,GAAG,KACzC;AAAI,YAAM,OAAM,GAAG,KAAK,OAAO,MAAM,MAAM;;AACzC,WAAO;;MC3ZI,eACX,uBAAY,UAAU;AAGpB,SAAK,WAAW;AAChB,SAAK,OAAO;AACZ,SAAK,YAAY;;;AAGnB,eAAO,QAAA,eAAM,QAAQ,WAAW;AAC9B,QAAI,SAAS,IAAI,YAAY,QAAQ;AACrC,QAAI,OAAO,QAAQ,MAAI;AAAE,aAAO,aAAa;;AAC7C,QAAI,OAAO,UAAU;AACrB,QAAI,OAAO,MAAI;AAAE,aAAO,IAAI;;AAC5B,QAAI,QAAQ,IAAI,IAAI;AACpB,qBAAiB,OAAO;AACxB,WAAO;;yBAMT,YAAA,mBAAU,MAAM;AACd,aAAS,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,KAAK,GAC/C;AAAM,UAAI,KAAK,KAAK,MAAM,MAAI;AAAE,eAAO,KAAK,KAAK,IAAI;;;AACjD,WAAO;;yBAMT,gBAAA,uBAAc,MAAM,QAAW,MAAuB;;eAA1B;;aAAS,KAAK;AACxC,QAAI,MAAM;AACV,aAAS,IAAI,QAAO,OAAO,IAAI,MAAK,KACxC;AAAM,YAAM,IAAI,UAAU,KAAK,MAAM,GAAG;;AACpC,WAAO;;AAGT,uBAAI,cAAA,MAAA,WAAgB;AAClB,QAAI,QAAQ,KAAK,KAAK;AACtB,WAAO,QAAQ,MAAM,WAAW;;AAMlC,uBAAI,YAAA,MAAA,WAAc;AAChB,aAAS,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,KAAK,GAAG;AAC5C,UAAI,OAAO,KAAK,KAAK;AACrB,UAAI,CAAE,MAAK,UAAU,KAAK,qBAAmB;AAAE,eAAO;;;;yBAI1D,aAAA,oBAAW,OAAO;AAChB,aAAS,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,KAAK,GAC/C;AAAM,eAAS,IAAI,GAAG,IAAI,MAAM,KAAK,QAAQ,KAAK,GAClD;AAAQ,YAAI,KAAK,KAAK,MAAM,MAAM,KAAK,IAAE;AAAE,iBAAO;;;;AAC9C,WAAO;;yBAUT,aAAA,oBAAW,QAAO,OAAe,YAAgB;;cAAvB;;mBAAoB;AAC5C,QAAI,OAAO,CAAC;AACZ,oBAAgB,OAAO,OAAO;AAC5B,UAAI,WAAW,MAAM,cAAc,QAAO;AAC1C,UAAI,YAAa,EAAC,SAAS,SAAS,WAC1C;AAAQ,eAAO,SAAS,KAAK,MAAM,IAAG,SAAC,IAAA;AAAA,iBAAM,GAAG;;;AAE1C,eAAS,IAAI,GAAG,IAAI,MAAM,KAAK,QAAQ,KAAK,GAAG;AAC7C,YAAI,OAAO,MAAM,KAAK,IAAI,OAAO,MAAM,KAAK,IAAI;AAChD,YAAI,CAAE,MAAK,UAAU,KAAK,uBAAuB,KAAK,QAAQ,SAAS,IAAI;AACzE,eAAK,KAAK;AACV,cAAI,SAAQ,OAAO,MAAM,MAAM,OAAO;AACtC,cAAI,QAAK;AAAE,mBAAO;;;;;AAKxB,WAAO,OAAO,MAAM;;yBAQtB,eAAA,sBAAa,QAAQ;AACnB,aAAS,IAAI,GAAG,IAAI,KAAK,UAAU,QAAQ,KAAK,GACpD;AAAM,UAAI,KAAK,UAAU,MAAM,QAAM;AAAE,eAAO,KAAK,UAAU,IAAI;;;AAC7D,QAAI,WAAW,KAAK,gBAAgB;AACpC,SAAK,UAAU,KAAK,QAAQ;AAC5B,WAAO;;yBAGT,kBAAA,yBAAgB,QAAQ;AACtB,QAAI,OAAO,OAAO,OAAO,OAAO,SAAS,CAAC,EAAC,OAAO,MAAM,MAAM,MAAM,KAAK;AACzE,WAAO,OAAO,QAAQ;AACpB,UAAI,UAAU,OAAO,SAAS,QAAQ,QAAQ;AAC9C,UAAI,MAAM,UAAU,SAAS;AAC3B,YAAI,UAAS;AACb,iBAAS,MAAM,SAAS,IAAI,MAAM,MAAM,IAAI,KACpD;AAAU,kBAAO,KAAK,IAAI;;AAClB,eAAO,QAAO;;AAEhB,eAAS,IAAI,GAAG,IAAI,MAAM,KAAK,QAAQ,KAAK,GAAG;AAC7C,YAAI,OAAO,MAAM,KAAK;AACtB,YAAI,CAAC,KAAK,UAAU,CAAC,KAAK,sBAAsB,CAAE,MAAK,QAAQ,SAAU,EAAC,QAAQ,QAAQ,MAAM,KAAK,IAAI,GAAG,WAAW;AACrH,iBAAO,KAAK,EAAC,OAAO,KAAK,cAAY,MAAQ,KAAK;AAClD,eAAK,KAAK,QAAQ;;;;;AAS1B,uBAAI,UAAA,MAAA,WAAY;AACd,WAAO,KAAK,KAAK,UAAU;;yBAM7B,OAAA,cAAK,GAAG;AACN,QAAI,IAAI,KAAK;AACb,QAAI,KAAK,KAAK,KAAK,QAAM;AAAE,YAAM,IAAI,WAAU,gBAAe,IAAC;;AAC/D,WAAO,EAAC,MAAM,KAAK,KAAK,IAAI,MAAM,KAAK,KAAK,IAAI;;yBAGlD,WAAA,qBAAW;AACT,QAAI,OAAO;AACX,kBAAc,GAAG;AACf,WAAK,KAAK;AACV,eAAS,IAAI,GAAG,IAAI,EAAE,KAAK,QAAQ,KAAK,GAC9C;AAAQ,YAAI,KAAK,QAAQ,EAAE,KAAK,OAAO,IAAE;AAAE,eAAK,EAAE,KAAK;;;;AAEnD,SAAK;AACL,WAAO,KAAK,IAAG,SAAE,GAAG,GAAM;AACxB,UAAI,MAAM,IAAK,GAAE,WAAW,MAAM,OAAO;AACzC,eAAS,MAAI,GAAG,MAAI,EAAE,KAAK,QAAQ,OAAK,GAC9C;AAAQ,eAAQ,OAAI,OAAO,MAAM,EAAE,KAAK,KAAG,OAAO,OAAO,KAAK,QAAQ,EAAE,KAAK,MAAI;;AAC3E,aAAO;OACN,KAAK;;;AAIZ,eAAa,QAAQ,IAAI,aAAa;AAEtC,MAAM,cACJ,sBAAY,QAAQ,WAAW;AAC7B,SAAK,SAAS;AACd,SAAK,YAAY;AACjB,SAAK,SAAS;AACd,SAAK,MAAM;AACX,SAAK,SAAS,OAAO,MAAM;AAC3B,QAAI,KAAK,OAAO,KAAK,OAAO,SAAS,MAAM,IAAE;AAAE,WAAK,OAAO;;AAC3D,QAAI,KAAK,OAAO,MAAM,IAAE;AAAE,WAAK,OAAO;;;;AAGxC,yBAAI,KAAA,MAAA,WAAO;AAAE,WAAO,KAAK,OAAO,KAAK;;wBAErC,MAAA,aAAI,KAAK;AAAE,WAAO,KAAK,QAAQ,OAAQ,MAAK,SAAS;;wBAErD,MAAA,aAAI,KAAK;AAAE,UAAM,IAAI,YAAY,MAAM,8BAA8B,KAAK,SAAS;;;AAGrF,qBAAmB,QAAQ;AACzB,QAAI,QAAQ;AACZ,OAAG;AAAE,YAAM,KAAK,aAAa;aACtB,OAAO,IAAI;AAClB,WAAO,MAAM,UAAU,IAAI,MAAM,KAAK,EAAC,MAAM,UAAQ;;AAGvD,wBAAsB,QAAQ;AAC5B,QAAI,QAAQ;AACZ,OAAG;AAAE,YAAM,KAAK,mBAAmB;aAC5B,OAAO,QAAQ,OAAO,QAAQ,OAAO,OAAO,QAAQ;AAC3D,WAAO,MAAM,UAAU,IAAI,MAAM,KAAK,EAAC,MAAM,OAAK;;AAGpD,8BAA4B,QAAQ;AAClC,QAAI,OAAO,cAAc;AACzB,eAAS;AACP,UAAI,OAAO,IAAI,MACnB;AAAM,eAAO,EAAC,MAAM,QAAM;iBACb,OAAO,IAAI,MACxB;AAAM,eAAO,EAAC,MAAM,QAAM;iBACb,OAAO,IAAI,MACxB;AAAM,eAAO,EAAC,MAAM,OAAK;iBACZ,OAAO,IAAI,MACxB;AAAM,eAAO,eAAe,QAAQ;aACpC;AAAS;;;AAEP,WAAO;;AAGT,oBAAkB,QAAQ;AACxB,QAAI,KAAK,KAAK,OAAO,OAAK;AAAE,aAAO,IAAI,2BAA2B,OAAO,OAAO;;AAChF,QAAI,UAAS,OAAO,OAAO;AAC3B,WAAO;AACP,WAAO;;AAGT,0BAAwB,QAAQ,MAAM;AACpC,QAAI,OAAM,SAAS,SAAS,OAAM;AAClC,QAAI,OAAO,IAAI,MAAM;AACnB,UAAI,OAAO,QAAQ,KAAG;AAAE,eAAM,SAAS;aAC3C;AAAS,eAAM;;;AAEb,QAAI,CAAC,OAAO,IAAI,MAAI;AAAE,aAAO,IAAI;;AACjC,WAAO,EAAC,MAAM,SAAO,KAAE,MAAG,KAAE,MAAG;;AAGjC,uBAAqB,QAAQ,MAAM;AACjC,QAAI,QAAQ,OAAO,WAAW,OAAO,MAAM;AAC3C,QAAI,MAAI;AAAE,aAAO,CAAC;;AAClB,QAAI,UAAS;AACb,aAAS,YAAY,OAAO;AAC1B,UAAI,SAAO,MAAM;AACjB,UAAI,OAAK,OAAO,QAAQ,QAAQ,IAAE;AAAE,gBAAO,KAAK;;;AAElD,QAAI,QAAO,UAAU,GAAC;AAAE,aAAO,IAAI,4BAA4B,OAAO;;AACtE,WAAO;;AAGT,yBAAuB,QAAQ;AAC7B,QAAI,OAAO,IAAI,MAAM;AACnB,UAAI,OAAO,UAAU;AACrB,UAAI,CAAC,OAAO,IAAI,MAAI;AAAE,eAAO,IAAI;;AACjC,aAAO;eACE,CAAC,KAAK,KAAK,OAAO,OAAO;AAClC,UAAI,QAAQ,YAAY,QAAQ,OAAO,MAAM,IAAG,SAAC,MAAQ;AACvD,YAAI,OAAO,UAAU,MAAI;AAAE,iBAAO,SAAS,KAAK;mBACvC,OAAO,UAAU,KAAK,UAAQ;AAAE,iBAAO,IAAI;;AACpD,eAAO,EAAC,MAAM,QAAQ,OAAO;;AAE/B,aAAO;AACP,aAAO,MAAM,UAAU,IAAI,MAAM,KAAK,EAAC,MAAM,UAAQ;WAChD;AACL,aAAO,IAAI,uBAAuB,OAAO,OAAO;;;AAiBpD,eAAa,MAAM;AACjB,QAAI,OAAM,CAAC;AACX,YAAQ,SAAQ,MAAM,IAAI;AAC1B,WAAO;AAEP,qBAAgB;AAAE,aAAO,KAAI,KAAK,MAAM;;AACxC,mBAAc,OAAM,IAAI,MAAM;AAC5B,UAAI,QAAO,EAAA,MAAK;AAChB,WAAI,OAAM,KAAK;AACf,aAAO;;AAET,qBAAiB,OAAO,IAAI;AAAE,YAAM,QAAO,SAAC,OAAA;AAAA,eAAQ,MAAK,KAAK;;;AAE9D,sBAAiB,OAAM,OAAM;AAC3B,UAAI,MAAK,QAAQ,UAAU;AACzB,eAAO,MAAK,MAAM,OAAM,SAAE,KAAK,OAAI;AAAA,iBAAK,IAAI,OAAO,SAAQ,OAAM;WAAQ;iBAChE,MAAK,QAAQ,OAAO;AAC7B,iBAAS,IAAI,KAAI,KAAK;AACpB,cAAI,OAAO,SAAQ,MAAK,MAAM,IAAI;AAClC,cAAI,KAAK,MAAK,MAAM,SAAS,GAAC;AAAE,mBAAO;;AACvC,kBAAQ,MAAM,QAAO;;iBAEd,MAAK,QAAQ,QAAQ;AAC9B,YAAI,OAAO;AACX,cAAK,OAAM;AACX,gBAAQ,SAAQ,MAAK,MAAM,OAAO;AAClC,eAAO,CAAC,MAAK;iBACJ,MAAK,QAAQ,QAAQ;AAC9B,YAAI,SAAO;AACX,gBAAQ,SAAQ,MAAK,MAAM,QAAO;AAClC,gBAAQ,SAAQ,MAAK,MAAM,SAAO;AAClC,eAAO,CAAC,MAAK;iBACJ,MAAK,QAAQ,OAAO;AAC7B,eAAO,CAAC,MAAK,QAAO,OAAO,SAAQ,MAAK,MAAM;iBACrC,MAAK,QAAQ,SAAS;AAC/B,YAAI,MAAM;AACV,iBAAS,MAAI,GAAG,MAAI,MAAK,KAAK,OAAK;AACjC,cAAI,SAAO;AACX,kBAAQ,SAAQ,MAAK,MAAM,MAAM;AACjC,gBAAM;;AAER,YAAI,MAAK,OAAO,IAAI;AAClB,kBAAQ,SAAQ,MAAK,MAAM,MAAM;eAC5B;AACL,mBAAS,MAAI,MAAK,KAAK,MAAI,MAAK,KAAK,OAAK;AACxC,gBAAI,SAAO;AACX,kBAAK,KAAK;AACV,oBAAQ,SAAQ,MAAK,MAAM,MAAM;AACjC,kBAAM;;;AAGV,eAAO,CAAC,MAAK;iBACJ,MAAK,QAAQ,QAAQ;AAC9B,eAAO,CAAC,MAAK,OAAM,MAAM,MAAK;;;;AAKpC,eAAa,GAAG,GAAG;AAAE,WAAO,IAAI;;AAKhC,oBAAkB,MAAK,OAAM;AAC3B,QAAI,UAAS;AACb,SAAK;AACL,WAAO,QAAO,KAAK;AAEnB,kBAAc,OAAM;AAClB,UAAI,QAAQ,KAAI;AAChB,UAAI,MAAM,UAAU,KAAK,CAAC,MAAM,GAAG,MAAI;AAAE,eAAO,KAAK,MAAM,GAAG;;AAC9D,cAAO,KAAK;AACZ,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAC3C,YAAA,MAAuB,MAAM;AAAlB,YAAA,OAAA,IAAA;AAAM,YAAA,KAAA,IAAA;AACX,YAAI,CAAC,QAAQ,QAAO,QAAQ,OAAO,IAAE;AAAE,eAAK;;;;;AASlD,eAAa,MAAK;AAChB,QAAI,UAAU,OAAO,OAAO;AAC5B,WAAO,QAAQ,SAAS,MAAK;AAE7B,qBAAiB,QAAQ;AACvB,UAAI,MAAM;AACV,aAAO,QAAO,SAAC,OAAQ;AACrB,aAAI,OAAM,QAAO,SAAA,KAAiB;;;AAChC,cAAI,CAAC,MAAI;AAAE;;AACX,cAAI,QAAQ,IAAI,QAAQ,OAAO,OAAM,QAAQ,MAAM,IAAI,QAAQ;AAC/D,mBAAS,MAAK,IAAI,QAAO,SAAC,OAAQ;AAChC,gBAAI,CAAC,MAAG;AAAE,kBAAI,KAAK,MAAM,OAAM;;AAC/B,gBAAI,KAAI,QAAQ,UAAS,IAAE;AAAE,mBAAI,KAAK;;;;;AAI5C,UAAI,SAAQ,QAAQ,OAAO,KAAK,QAAQ,IAAI,aAAa,OAAO,QAAQ,KAAI,SAAS,KAAK;AAC1F,eAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK,GAAG;AACtC,YAAI,WAAS,IAAI,IAAI,GAAG,KAAK;AAC7B,eAAM,KAAK,KAAK,IAAI,IAAI,QAAQ,SAAO,KAAK,SAAS,QAAQ;;AAE/D,aAAO;;;AAIX,4BAA0B,OAAO,QAAQ;AACvC,aAAS,IAAI,GAAG,OAAO,CAAC,QAAQ,IAAI,KAAK,QAAQ,KAAK;AACpD,UAAI,SAAQ,KAAK,IAAI,OAAO,CAAC,OAAM,UAAU,SAAQ;AACrD,eAAS,IAAI,GAAG,IAAI,OAAM,KAAK,QAAQ,KAAK,GAAG;AAC7C,YAAI,QAAO,OAAM,KAAK,IAAI,OAAO,OAAM,KAAK,IAAI;AAChD,eAAM,KAAK,MAAK;AAChB,YAAI,QAAQ,CAAE,OAAK,UAAU,MAAK,qBAAmB;AAAE,iBAAO;;AAC9D,YAAI,KAAK,QAAQ,SAAS,IAAE;AAAE,eAAK,KAAK;;;AAE1C,UAAI,MAAI;AAAE,eAAO,IAAI,iCAAiC,OAAM,KAAK,QAAQ;;;;ACvX7E,wBAAsB,OAAO;AAC3B,QAAI,WAAW,OAAO,OAAO;AAC7B,aAAS,YAAY,OAAO;AAC1B,UAAI,OAAO,MAAM;AACjB,UAAI,CAAC,KAAK,YAAU;AAAE,eAAO;;AAC7B,eAAS,YAAY,KAAK;;AAE5B,WAAO;;AAGT,wBAAsB,OAAO,OAAO;AAClC,QAAI,QAAQ,OAAO,OAAO;AAC1B,aAAS,QAAQ,OAAO;AACtB,UAAI,QAAQ,SAAS,MAAM;AAC3B,UAAI,UAAU,QAAW;AACvB,YAAI,OAAO,MAAM;AACjB,YAAI,KAAK,YAAU;AAAE,kBAAQ,KAAK;eACxC;AAAW,gBAAM,IAAI,WAAW,qCAAqC;;;AAEjE,YAAM,QAAQ;;AAEhB,WAAO;;AAGT,qBAAmB,OAAO;AACxB,QAAI,UAAS,OAAO,OAAO;AAC3B,QAAI,OAAK;AAAE,eAAS,QAAQ,OAAK;AAAE,gBAAO,QAAQ,IAAI,UAAU,MAAM;;;AACtE,WAAO;;MAOI,WACX,mBAAY,MAAM,SAAQ,MAAM;AAG9B,SAAK,OAAO;AAIZ,SAAK,SAAS;AAId,SAAK,OAAO;AAEZ,SAAK,SAAS,KAAK,QAAQ,KAAK,MAAM,MAAM,OAAO;AACnD,SAAK,QAAQ,UAAU,KAAK;AAE5B,SAAK,eAAe,aAAa,KAAK;AAItC,SAAK,eAAe;AAKpB,SAAK,UAAU;AAIf,SAAK,gBAAgB;AAIrB,SAAK,UAAU,CAAE,MAAK,UAAU,QAAQ;AAIxC,SAAK,SAAS,QAAQ;;;AAKxB,uBAAI,SAAA,MAAA,WAAW;AAAE,WAAO,CAAC,KAAK;;AAK9B,uBAAI,YAAA,MAAA,WAAc;AAAE,WAAO,KAAK,WAAW,KAAK;;AAIhD,uBAAI,OAAA,MAAA,WAAS;AAAE,WAAO,KAAK,gBAAgB,aAAa;;AAKxD,uBAAI,OAAA,MAAA,WAAS;AAAE,WAAO,KAAK,UAAU,KAAK,KAAK;;qBAI/C,mBAAA,4BAAmB;AACjB,aAAS,KAAK,KAAK,OAAK;AAAE,UAAI,KAAK,MAAM,GAAG,YAAU;AAAE,eAAO;;;AAC/D,WAAO;;qBAGT,oBAAA,2BAAkB,OAAO;AACvB,WAAO,QAAQ,SAAS,KAAK,aAAa,WAAW,MAAM;;qBAG7D,eAAA,wBAAa,OAAO;AAClB,QAAI,CAAC,SAAS,KAAK,cAAY;AAAE,aAAO,KAAK;WACjD;AAAS,aAAO,aAAa,KAAK,OAAO;;;qBAUvC,SAAA,gBAAO,OAAO,UAAS,QAAO;AAC5B,QAAI,KAAK,QAAM;AAAE,YAAM,IAAI,MAAM;;AACjC,WAAO,IAAI,KAAK,MAAM,KAAK,aAAa,QAAQ,SAAS,KAAK,WAAU,KAAK,QAAQ;;qBAOvF,gBAAA,uBAAc,OAAO,UAAS,QAAO;AACnC,eAAU,SAAS,KAAK;AACxB,QAAI,CAAC,KAAK,aAAa,WAC3B;AAAM,YAAM,IAAI,WAAW,8BAA8B,KAAK;;AAC1D,WAAO,IAAI,KAAK,MAAM,KAAK,aAAa,QAAQ,UAAS,KAAK,QAAQ;;qBAUxE,gBAAA,uBAAc,OAAO,UAAS,QAAO;AACnC,YAAQ,KAAK,aAAa;AAC1B,eAAU,SAAS,KAAK;AACxB,QAAI,SAAQ,MAAM;AAChB,UAAI,UAAS,KAAK,aAAa,WAAW;AAC1C,UAAI,CAAC,SAAM;AAAE,eAAO;;AACpB,iBAAU,QAAO,OAAO;;AAE1B,QAAI,SAAQ,KAAK,aAAa,cAAc,UAAS,WAAW,SAAS,OAAO;AAChF,QAAI,CAAC,QAAK;AAAE,aAAO;;AACnB,WAAO,IAAI,KAAK,MAAM,OAAO,SAAQ,OAAO,SAAQ,KAAK,QAAQ;;qBAMnE,eAAA,sBAAa,UAAS;AACpB,QAAI,UAAS,KAAK,aAAa,cAAc;AAC7C,QAAI,CAAC,WAAU,CAAC,QAAO,UAAQ;AAAE,aAAO;;AACxC,aAAS,IAAI,GAAG,IAAI,SAAQ,YAAY,KAC5C;AAAM,UAAI,CAAC,KAAK,YAAY,SAAQ,MAAM,GAAG,QAAM;AAAE,eAAO;;;AACxD,WAAO;;qBAKT,iBAAA,wBAAe,UAAU;AACvB,WAAO,KAAK,WAAW,QAAQ,KAAK,QAAQ,QAAQ,YAAY;;qBAKlE,cAAA,qBAAY,QAAO;AACjB,QAAI,KAAK,WAAW,MAAI;AAAE,aAAO;;AACjC,aAAS,IAAI,GAAG,IAAI,OAAM,QAAQ,KAAG;AAAE,UAAI,CAAC,KAAK,eAAe,OAAM,GAAG,OAAK;AAAE,eAAO;;;AACvF,WAAO;;qBAKT,eAAA,sBAAa,QAAO;AAClB,QAAI,KAAK,WAAW,MAAI;AAAE,aAAO;;AACjC,QAAI;AACJ,aAAS,IAAI,GAAG,IAAI,OAAM,QAAQ,KAAK;AACrC,UAAI,CAAC,KAAK,eAAe,OAAM,GAAG,OAAO;AACvC,YAAI,CAAC,OAAI;AAAE,kBAAO,OAAM,MAAM,GAAG;;iBACxB,OAAM;AACf,cAAK,KAAK,OAAM;;;AAGpB,WAAO,CAAC,QAAO,SAAQ,MAAK,SAAS,QAAO,KAAK;;AAGnD,WAAO,UAAA,iBAAQ,QAAO,SAAQ;AAC5B,QAAI,UAAS,OAAO,OAAO;AAC3B,WAAM,QAAO,SAAE,MAAM,MAAI;AAAA,aAAK,QAAO,QAAQ,IAAI,SAAS,MAAM,SAAQ;;AAExE,QAAI,UAAU,QAAO,KAAK,WAAW;AACrC,QAAI,CAAC,QAAO,UAAQ;AAAE,YAAM,IAAI,WAAW,2CAA2C,UAAU;;AAChG,QAAI,CAAC,QAAO,MAAI;AAAE,YAAM,IAAI,WAAW;;AACvC,aAAS,KAAK,QAAO,KAAK,OAAK;AAAE,YAAM,IAAI,WAAW;;AAEtD,WAAO;;;AAMX,MAAM,YACJ,oBAAY,SAAS;AACnB,SAAK,aAAa,OAAO,UAAU,eAAe,KAAK,SAAS;AAChE,SAAK,UAAU,QAAQ;;;AAGzB,yBAAI,WAAA,MAAA,WAAa;AACf,WAAO,CAAC,KAAK;;;MAUJ,WACX,mBAAY,MAAM,MAAM,SAAQ,MAAM;AAGpC,SAAK,OAAO;AAIZ,SAAK,SAAS;AAId,SAAK,OAAO;AAEZ,SAAK,QAAQ,UAAU,KAAK;AAE5B,SAAK,OAAO;AACZ,SAAK,WAAW;AAChB,QAAI,WAAW,aAAa,KAAK;AACjC,SAAK,WAAW,YAAY,IAAI,KAAK,MAAM;;qBAO7C,SAAA,iBAAO,OAAO;AACZ,QAAI,CAAC,SAAS,KAAK,UAAQ;AAAE,aAAO,KAAK;;AACzC,WAAO,IAAI,KAAK,MAAM,aAAa,KAAK,OAAO;;AAGjD,WAAO,UAAA,kBAAQ,QAAO,SAAQ;AAC5B,QAAI,UAAS,OAAO,OAAO,OAAO,OAAO;AACzC,WAAM,QAAO,SAAE,MAAM,MAAI;AAAA,aAAK,QAAO,QAAQ,IAAI,SAAS,MAAM,QAAQ,SAAQ;;AAChF,WAAO;;qBAMT,gBAAA,wBAAc,MAAK;AACjB,aAAS,IAAI,GAAG,IAAI,KAAI,QAAQ,KAAG;AAAE,UAAI,KAAI,GAAG,QAAQ,MAAM;AAC5D,eAAM,KAAI,MAAM,GAAG,GAAG,OAAO,KAAI,MAAM,IAAI;AAC3C;;;AAEF,WAAO;;qBAKT,UAAA,kBAAQ,MAAK;AACX,aAAS,IAAI,GAAG,IAAI,KAAI,QAAQ,KACpC;AAAM,UAAI,KAAI,GAAG,QAAQ,MAAI;AAAE,eAAO,KAAI;;;;qBAMxC,WAAA,kBAAS,OAAO;AACd,WAAO,KAAK,SAAS,QAAQ,SAAS;;MAyK7B,SAGX,iBAAY,MAAM;AAOhB,SAAK,OAAO;AACZ,aAAS,QAAQ,MAAI;AAAE,WAAK,KAAK,QAAQ,KAAK;;AAC9C,SAAK,KAAK,QAAQ,iBAAW,KAAK,KAAK;AACvC,SAAK,KAAK,QAAQ,iBAAW,KAAK,KAAK;AAIvC,SAAK,QAAQ,SAAS,QAAQ,KAAK,KAAK,OAAO;AAI/C,SAAK,QAAQ,SAAS,QAAQ,KAAK,KAAK,OAAO;AAE/C,QAAI,mBAAmB,OAAO,OAAO;AACrC,aAAS,UAAQ,KAAK,OAAO;AAC3B,UAAI,UAAQ,KAAK,OACvB;AAAQ,cAAM,IAAI,WAAW,SAAO;;AAC9B,UAAI,OAAO,KAAK,MAAM,SAAO,cAAc,KAAK,KAAK,WAAW,IAAI,WAAW,KAAK,KAAK;AACzF,WAAK,eAAe,iBAAiB,gBAClC,kBAAiB,eAAe,aAAa,MAAM,aAAa,KAAK;AACxE,WAAK,gBAAgB,KAAK,aAAa;AACvC,WAAK,UAAU,YAAY,MAAM,OAC/B,WAAW,YAAY,MAAM,SAAS,MAAM,QAC5C,YAAY,MAAM,CAAC,KAAK,gBAAgB,KAAK;;AAEjD,aAAS,UAAQ,KAAK,OAAO;AAC3B,UAAI,SAAO,KAAK,MAAM,SAAO,OAAO,OAAK,KAAK;AAC9C,aAAK,WAAW,QAAQ,OAAO,CAAC,UAAQ,QAAQ,KAAK,KAAK,YAAY,MAAM,KAAK,MAAM;;AAGzF,SAAK,eAAe,KAAK,aAAa,KAAK;AAC3C,SAAK,eAAe,KAAK,aAAa,KAAK;AAK3C,SAAK,cAAc,KAAK,MAAM,KAAK,KAAK,WAAW;AAMnD,SAAK,SAAS,OAAO,OAAO;AAC5B,SAAK,OAAO,YAAY,OAAO,OAAO;;mBAQxC,OAAA,eAAK,MAAM,OAAO,UAAS,QAAO;AAChC,QAAI,OAAO,QAAQ,UACvB;AAAM,aAAO,KAAK,SAAS;eACd,CAAE,iBAAgB,WAC/B;AAAM,YAAM,IAAI,WAAW,wBAAwB;eACtC,KAAK,UAAU,MAC5B;AAAM,YAAM,IAAI,WAAW,2CAA2C,KAAK,OAAO;;AAE9E,WAAO,KAAK,cAAc,OAAO,UAAS;;mBAM5C,OAAA,cAAK,QAAM,QAAO;AAChB,QAAI,OAAO,KAAK,MAAM;AACtB,WAAO,IAAI,SAAS,MAAM,KAAK,cAAc,QAAM,KAAK,QAAQ;;mBAKlE,OAAA,eAAK,MAAM,OAAO;AAChB,QAAI,OAAO,QAAQ,UAAQ;AAAE,aAAO,KAAK,MAAM;;AAC/C,WAAO,KAAK,OAAO;;mBAMrB,eAAA,sBAAa,MAAM;AACjB,WAAO,KAAK,SAAS,MAAM;;mBAM7B,eAAA,sBAAa,MAAM;AACjB,WAAO,KAAK,SAAS,MAAM;;mBAG7B,WAAA,kBAAS,MAAM;AACb,QAAI,SAAQ,KAAK,MAAM;AACvB,QAAI,CAAC,QAAK;AAAE,YAAM,IAAI,WAAW,wBAAwB;;AACzD,WAAO;;AAIX,uBAAqB,SAAQ,QAAO;AAClC,QAAI,SAAQ;AACZ,aAAS,IAAI,GAAG,IAAI,OAAM,QAAQ,KAAK;AACrC,UAAI,OAAO,OAAM,IAAI,QAAO,QAAO,MAAM,OAAO,MAAK;AACrD,UAAI,OAAM;AACR,eAAM,KAAK;aACN;AACL,iBAAS,QAAQ,QAAO,OAAO;AAC7B,cAAI,SAAO,QAAO,MAAM;AACxB,cAAI,QAAQ,OAAQ,OAAK,KAAK,SAAS,OAAK,KAAK,MAAM,MAAM,KAAK,QAAQ,QAAQ,IAC1F;AAAU,mBAAM,KAAK,MAAK;;;;AAGtB,UAAI,CAAC,KAAE;AAAE,cAAM,IAAI,YAAY,yBAAyB,OAAM,KAAK;;;AAErE,WAAO;;MCpbI,YAIX,oBAAY,SAAQ,OAAO;;AAGzB,SAAK,SAAS;AAId,SAAK,QAAQ;AACb,SAAK,OAAO;AACZ,SAAK,SAAS;AAEd,UAAM,QAAO,SAAC,MAAQ;AACpB,UAAI,KAAK,KAAG;AAAE,eAAK,KAAK,KAAK;iBACpB,KAAK,OAAK;AAAE,eAAK,OAAO,KAAK;;;AAIxC,SAAK,iBAAiB,CAAC,KAAK,KAAK,KAAI,SAAC,GAAK;AACzC,UAAI,CAAC,aAAa,KAAK,EAAE,QAAQ,CAAC,EAAE,MAAI;AAAE,eAAO;;AACjD,UAAI,QAAO,QAAO,MAAM,EAAE;AAC1B,aAAO,MAAK,aAAa,UAAU;;;sBAMvC,QAAA,gBAAM,KAAK,SAAc;;gBAAJ;AACnB,QAAI,UAAU,IAAI,aAAa,MAAM,SAAS;AAC9C,YAAQ,OAAO,KAAK,MAAM,QAAQ,MAAM,QAAQ;AAChD,WAAO,QAAQ;;sBAUjB,aAAA,oBAAW,KAAK,SAAc;;gBAAJ;AACxB,QAAI,UAAU,IAAI,aAAa,MAAM,SAAS;AAC9C,YAAQ,OAAO,KAAK,MAAM,QAAQ,MAAM,QAAQ;AAChD,WAAO,MAAM,QAAQ,QAAQ;;sBAG/B,WAAA,kBAAS,KAAK,SAAS,QAAO;AAC5B,aAAS,IAAI,SAAQ,KAAK,KAAK,QAAQ,UAAS,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,KAAK;AAChF,UAAI,OAAO,KAAK,KAAK;AACrB,UAAI,QAAQ,KAAK,KAAK,QACjB,MAAK,cAAc,UAAa,IAAI,gBAAgB,KAAK,cACzD,EAAC,KAAK,WAAW,QAAQ,eAAe,KAAK,WAAW;AAC3D,YAAI,KAAK,UAAU;AACjB,cAAI,UAAS,KAAK,SAAS;AAC3B,cAAI,YAAW,OAAK;AAAE;;AACtB,eAAK,QAAQ;;AAEf,eAAO;;;;sBAKb,aAAA,oBAAW,MAAM,OAAO,SAAS,QAAO;AACtC,aAAS,IAAI,SAAQ,KAAK,OAAO,QAAQ,UAAS,IAAI,GAAG,IAAI,KAAK,OAAO,QAAQ,KAAK;AACpF,UAAI,OAAO,KAAK,OAAO;AACvB,UAAI,KAAK,MAAM,QAAQ,SAAS,KAC5B,KAAK,WAAW,CAAC,QAAQ,eAAe,KAAK,YAI7C,KAAK,MAAM,SAAS,KAAK,UACxB,MAAK,MAAM,WAAW,KAAK,WAAW,MAAM,KAAK,MAAM,MAAM,KAAK,SAAS,MAAM,QAC5F;AAAQ;;AACF,UAAI,KAAK,UAAU;AACjB,YAAI,UAAS,KAAK,SAAS;AAC3B,YAAI,YAAW,OAAK;AAAE;;AACtB,aAAK,QAAQ;;AAEf,aAAO;;;AAKX,YAAO,cAAA,qBAAY,SAAQ;AACzB,QAAI,UAAS;AACb,oBAAgB,MAAM;AACpB,UAAI,WAAW,KAAK,YAAY,OAAO,KAAK,KAAK,UAAU,IAAI;AAC/D,aAAO,IAAI,QAAO,QAAQ,KAAK;AAC7B,YAAI,OAAO,QAAO,IAAI,eAAe,KAAK,YAAY,OAAO,KAAK,KAAK;AACvE,YAAI,eAAe,UAAQ;AAAE;;;AAE/B,cAAO,OAAO,GAAG,GAAG;;AAG1B,QAAA,OAAA,SAAA,OAAmC;AAC7B,UAAI,QAAQ,QAAO,MAAM,OAAM,KAAK;AACpC,UAAI,OAAK;AAAE,cAAM,QAAO,SAAC,MAAQ;AAC/B,iBAAO,OAAO,MAAK;AACnB,eAAK,OAAO;;;;AAJhB,aAAS,QAAQ,QAAO;AAAK,WAAA;AAOjC,QAAA,SAAA,SAAA,OAAmC;AAC7B,UAAI,UAAQ,QAAO,MAAM,QAAM,KAAK;AACpC,UAAI,SAAK;AAAE,gBAAM,QAAO,SAAC,MAAQ;AAC/B,iBAAO,OAAO,MAAK;AACnB,eAAK,OAAO;;;;AAJhB,aAAS,UAAQ,QAAO;AAAK;AAO7B,WAAO;;AAOT,YAAO,aAAA,oBAAW,SAAQ;AACxB,WAAO,QAAO,OAAO,aAClB,SAAO,OAAO,YAAY,IAAI,UAAU,SAAQ,UAAU,YAAY;;AAK7E,MAAM,YAAY;IAChB,SAAS;IAAM,SAAS;IAAM,OAAO;IAAM,YAAY;IAAM,QAAQ;IACrE,IAAI;IAAM,KAAK;IAAM,IAAI;IAAM,UAAU;IAAM,YAAY;IAAM,QAAQ;IACzE,QAAQ;IAAM,MAAM;IAAM,IAAI;IAAM,IAAI;IAAM,IAAI;IAAM,IAAI;IAAM,IAAI;IACtE,IAAI;IAAM,QAAQ;IAAM,QAAQ;IAAM,IAAI;IAAM,IAAI;IAAM,UAAU;IAAM,IAAI;IAC9E,QAAQ;IAAM,GAAG;IAAM,KAAK;IAAM,SAAS;IAAM,OAAO;IAAM,OAAO;IAAM,IAAI;;AAIjF,MAAM,aAAa;IACjB,MAAM;IAAM,UAAU;IAAM,QAAQ;IAAM,QAAQ;IAAM,OAAO;IAAM,OAAO;;AAI9E,MAAM,WAAW,EAAC,IAAI,MAAM,IAAI;AAGhC,MAAM,kBAAkB;AAAxB,MAA2B,uBAAuB;AAAlD,MAAqD,gBAAgB;AAErE,wBAAsB,oBAAoB;AACxC,WAAQ,sBAAqB,kBAAkB,KAAM,wBAAuB,SAAS,uBAAuB;;AAG9G,MAAM,cACJ,sBAAY,MAAM,OAAO,QAAO,cAAc,OAAO,OAAO,SAAS;AACnE,SAAK,OAAO;AACZ,SAAK,QAAQ;AACb,SAAK,QAAQ;AACb,SAAK,QAAQ,SAAU,WAAU,gBAAgB,OAAO,KAAK;AAC7D,SAAK,UAAU;AACf,SAAK,UAAU;AAEf,SAAK,QAAQ;AAEb,SAAK,cAAc,KAAK;AAExB,SAAK,eAAe;AAEpB,SAAK,aAAa;;wBAGpB,eAAA,uBAAa,OAAM;AACjB,QAAI,CAAC,KAAK,OAAO;AACf,UAAI,CAAC,KAAK,MAAI;AAAE,eAAO;;AACvB,UAAI,OAAO,KAAK,KAAK,aAAa,WAAW,SAAS,KAAK;AAC3D,UAAI,MAAM;AACR,aAAK,QAAQ,KAAK,KAAK,aAAa,cAAc;aAC7C;AACL,YAAI,SAAQ,KAAK,KAAK,cAAc;AACpC,YAAI,OAAO,OAAM,aAAa,MAAK,OAAO;AACxC,eAAK,QAAQ;AACb,iBAAO;eACF;AACL,iBAAO;;;;AAIb,WAAO,KAAK,MAAM,aAAa,MAAK;;wBAGtC,SAAA,gBAAO,SAAS;AACd,QAAI,CAAE,MAAK,UAAU,kBAAkB;AACrC,UAAI,OAAO,KAAK,QAAQ,KAAK,QAAQ,SAAS,IAAI;AAClD,UAAI,QAAQ,KAAK,UAAW,KAAI,oBAAoB,KAAK,KAAK,QAAQ;AACpE,YAAI,KAAK,KAAK,UAAU,EAAE,GAAG,QAAM;AAAE,eAAK,QAAQ;eAC1D;AAAa,eAAK,QAAQ,KAAK,QAAQ,SAAS,KAAK,KAAK,SAAS,KAAK,KAAK,MAAM,GAAG,KAAK,KAAK,SAAS,EAAE,GAAG;;;;AAG1G,QAAI,WAAU,SAAS,KAAK,KAAK;AACjC,QAAI,CAAC,WAAW,KAAK,OACzB;AAAM,iBAAU,SAAQ,OAAO,KAAK,MAAM,WAAW,SAAS,OAAO;;AACjE,WAAO,KAAK,OAAO,KAAK,KAAK,OAAO,KAAK,OAAO,UAAS,KAAK,SAAS;;wBAGzE,mBAAA,0BAAiB,OAAM;AACrB,aAAS,IAAI,KAAK,WAAW,SAAS,GAAG,KAAK,GAAG,KACrD;AAAM,UAAI,MAAK,GAAG,KAAK,WAAW,KAAG;AAAE,eAAO,KAAK,WAAW,OAAO,GAAG,GAAG;;;;wBAGzE,eAAA,sBAAa,UAAU;AACrB,aAAS,IAAI,GAAG,UAAU,KAAK,cAAc,IAAI,QAAQ,QAAQ,KAAK;AACpE,UAAI,QAAO,QAAQ;AACnB,UAAK,MAAK,OAAO,KAAK,KAAK,eAAe,MAAK,QAAQ,aAAa,MAAK,MAAM,cAC3E,CAAC,MAAK,QAAQ,KAAK,cAAc;AACnC,aAAK,cAAc,MAAK,SAAS,KAAK;AACtC,aAAK,eAAe,MAAK,cAAc,KAAK;;;;wBAKlD,gBAAA,uBAAc,OAAM;AAClB,QAAI,KAAK,MAAI;AAAE,aAAO,KAAK,KAAK;;AAChC,QAAI,KAAK,QAAQ,QAAM;AAAE,aAAO,KAAK,QAAQ,GAAG;;AAChD,WAAO,MAAK,cAAc,CAAC,UAAU,eAAe,MAAK,WAAW,SAAS;;AAIjF,MAAM,eAEJ,uBAAY,QAAQ,SAAS,MAAM;AAEjC,SAAK,SAAS;AAEd,SAAK,UAAU;AACf,SAAK,SAAS;AACd,QAAI,UAAU,QAAQ,SAAS;AAC/B,QAAI,aAAa,aAAa,QAAQ,sBAAuB,QAAO,gBAAgB;AACpF,QAAI,SACR;AAAM,mBAAa,IAAI,YAAY,QAAQ,MAAM,QAAQ,OAAO,KAAK,MAAM,KAAK,MAAM,MACnD,QAAQ,YAAY,QAAQ,KAAK,cAAc;eACrE,MACb;AAAM,mBAAa,IAAI,YAAY,MAAM,MAAM,KAAK,MAAM,KAAK,MAAM,MAAM,MAAM;WAEjF;AAAM,mBAAa,IAAI,YAAY,OAAO,OAAO,aAAa,MAAM,KAAK,MAAM,KAAK,MAAM,MAAM,MAAM;;AAClG,SAAK,QAAQ,CAAC;AAEd,SAAK,OAAO;AACZ,SAAK,OAAO,QAAQ;AACpB,SAAK,aAAa;;;AAGpB,uBAAI,IAAA,MAAA,WAAM;AACR,WAAO,KAAK,MAAM,KAAK;;yBAOzB,SAAA,gBAAO,KAAK;AACV,QAAI,IAAI,YAAY,GAAG;AACrB,WAAK,YAAY;eACR,IAAI,YAAY,GAAG;AAC5B,UAAI,QAAQ,IAAI,aAAa;AAC7B,UAAI,SAAQ,QAAQ,KAAK,WAAW,YAAY,UAAU,MAAM,MAAM,KAAK;AAC3E,UAAI,UAAS,MAAI;AAAE,iBAAS,IAAI,GAAG,IAAI,OAAM,QAAQ,KAAG;AAAE,eAAK,eAAe,OAAM;;;AACpF,WAAK,WAAW;AAChB,UAAI,UAAS,MAAI;AAAE,iBAAS,MAAI,GAAG,MAAI,OAAM,QAAQ,OAAG;AAAE,eAAK,kBAAkB,OAAM,MAAI;;;;;yBAI/F,cAAA,qBAAY,KAAK;AACf,QAAI,QAAQ,IAAI;AAChB,QAAI,MAAM,KAAK;AACf,QAAI,IAAI,UAAU,wBACd,IAAI,cAAc,QAClB,mBAAmB,KAAK,QAAQ;AAClC,UAAI,CAAE,KAAI,UAAU,kBAAkB;AACpC,gBAAQ,MAAM,QAAQ,qBAAqB;AAI3C,YAAI,mBAAmB,KAAK,UAAU,KAAK,QAAQ,KAAK,MAAM,SAAS,GAAG;AACxE,cAAI,aAAa,IAAI,QAAQ,IAAI,QAAQ,SAAS;AAClD,cAAI,gBAAgB,IAAI;AACxB,cAAI,CAAC,cACA,iBAAiB,cAAc,YAAY,QAC3C,WAAW,UAAU,mBAAmB,KAAK,WAAW,OACvE;AAAY,oBAAQ,MAAM,MAAM;;;iBAEf,CAAE,KAAI,UAAU,uBAAuB;AAChD,gBAAQ,MAAM,QAAQ,aAAa;aAC9B;AACL,gBAAQ,MAAM,QAAQ,UAAU;;AAElC,UAAI,OAAK;AAAE,aAAK,WAAW,KAAK,OAAO,OAAO,KAAK;;AACnD,WAAK,WAAW;WACX;AACL,WAAK,WAAW;;;yBAOpB,aAAA,oBAAW,KAAK,YAAY;AAC1B,QAAI,OAAO,IAAI,SAAS,eAAe;AACvC,QAAI,SAAS,eAAe,SAAS,KAAK,OAAO,gBAAc;AAAE,oBAAc;;AAC/E,QAAI,OAAQ,KAAK,QAAQ,gBAAgB,KAAK,QAAQ,aAAa,QAC9D,UAAS,KAAK,OAAO,SAAS,KAAK,MAAM;AAC9C,QAAI,OAAO,KAAK,SAAS,WAAW,eAAe,OAAO;AACxD,WAAK,WAAW;AAChB,WAAK,eAAe;eACX,CAAC,QAAQ,KAAK,QAAQ,KAAK,aAAa;AACjD,UAAI,QAAQ,KAAK,aAAW;AAAE,aAAK,OAAO,KAAK,IAAI,GAAG,KAAK,OAAO;iBACzD,QAAQ,KAAK,KAAK,UAAQ;AAAE,cAAM,KAAK;;AAChD,UAAI,OAAM,MAAM,KAAK,KAAK,gBAAgB,KAAK;AAC/C,UAAI,UAAU,eAAe,OAAO;AAClC,gBAAO;AACP,YAAI,CAAC,IAAI,MAAI;AAAE,eAAK,aAAa;;iBACxB,CAAC,IAAI,YAAY;AAC1B,aAAK,aAAa;AAClB;;AAEF,WAAK,OAAO;AACZ,UAAI,OAAI;AAAE,aAAK,KAAK;;AACpB,WAAK,aAAa;WACb;AACL,WAAK,iBAAiB,KAAK,MAAM,KAAK,cAAc,QAAQ,SAAS;;;yBAKzE,eAAA,sBAAa,KAAK;AAChB,QAAI,IAAI,YAAY,QAAQ,KAAK,IAAI,QAAQ,KAAK,IAAI,KAAK,eAC/D;AAAM,WAAK,YAAY,IAAI,cAAc,eAAe;;;yBAItD,iBAAA,wBAAe,KAAK;AAElB,QAAI,IAAI,YAAY,QAAS,EAAC,KAAK,IAAI,QAAQ,CAAC,KAAK,IAAI,KAAK,gBAClE;AAAM,WAAK,UAAU,KAAK,OAAO,OAAO,KAAK;;;yBAM3C,aAAA,oBAAW,QAAQ;AACjB,QAAI,SAAQ,KAAK;AACjB;AAAO,eAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK,GAAG;AAChD,iBAAS,SAAQ,UAAQ;AACvB,cAAI,OAAO,KAAK,OAAO,WAAW,OAAO,IAAI,OAAO,IAAI,IAAI,MAAM;AAClE,cAAI,CAAC,MAAI;AAAE;;AACX,cAAI,KAAK,QAAM;AAAE,mBAAO;;AACxB,mBAAQ,KAAK,OAAO,OAAO,MAAM,KAAK,MAAM,OAAO,KAAK,OAAO,SAAS;AACxE,cAAI,KAAK,cAAc,OAAK;AAAE,qBAAQ;iBAC9C;AAAa;;;;AAGT,WAAO;;yBAOT,mBAAA,0BAAiB,KAAK,MAAM,eAAe;;AACzC,QAAI,OAAM,WAAU,UAAU;AAC9B,QAAI,KAAK,MAAM;AACb,kBAAW,KAAK,OAAO,OAAO,MAAM,KAAK;AACzC,UAAI,CAAC,UAAS,QAAQ;AACpB,gBAAO,KAAK,MAAM,WAAU,KAAK,OAAO,KAAK;iBACpC,CAAC,KAAK,WAAW,UAAS,OAAO,KAAK,SAAS;AACxD,aAAK,aAAa;;WAEf;AACL,iBAAW,KAAK,OAAO,OAAO,MAAM,KAAK;AACzC,cAAO,SAAS,OAAO,KAAK;AAC5B,WAAK,eAAe;;AAEtB,QAAI,UAAU,KAAK;AAEnB,QAAI,aAAY,UAAS,QAAQ;AAC/B,WAAK,WAAW;eACP,eAAe;AACxB,WAAK,WAAW,KAAK;eACZ,KAAK,YAAY;AAC1B,WAAK,WAAW;AAChB,WAAK,WAAW,KAAK,KAAK,OAAO,QAAQ,QAAO,SAAC,OAAA;AAAA,eAAQ,OAAK,WAAW;;WACpE;AACL,UAAI,aAAa,KAAK;AACtB,UAAI,OAAO,cAAc,UAAQ;AAAE,qBAAa,IAAI,cAAc;iBACzD,OAAO,cAAc,YAAU;AAAE,qBAAa,WAAW;;AAClE,UAAI,CAAC,YAAU;AAAE,qBAAa;;AAC9B,WAAK,WAAW,KAAK,YAAY;AACjC,WAAK,OAAO,YAAY;;AAE1B,QAAI,OAAM;AAAE,WAAK,KAAK;AAAU,WAAK;;AACrC,QAAI,OAAI;AAAE,WAAK,kBAAkB,OAAM;;;yBAOzC,SAAA,gBAAO,QAAQ,OAAM,YAAY,UAAU;AACzC,QAAI,SAAQ,cAAc;AAC1B,aAAS,MAAM,aAAa,OAAO,WAAW,cAAc,OAAO,YAC1D,OAAM,YAAY,OAAO,OAAO,OAAO,WAAW,WACtD,OAAO,MAAK,MAAM,IAAI,aAAa,EAAE,QAAO;AAC/C,WAAK,YAAY,QAAQ;AACzB,WAAK,OAAO;AACZ,UAAI,SAAQ,UAAU,eAAe,IAAI,SAAS,gBACxD;AAAQ,aAAK,KAAK;;;AAEd,SAAK,YAAY,QAAQ;;yBAM3B,YAAA,mBAAU,OAAM;AACd,QAAI,OAAO;AACX,aAAS,QAAQ,KAAK,MAAM,SAAS,GAAG,SAAS;AAC/C,UAAI,KAAK,KAAK,MAAM;AACpB,UAAI,SAAQ,GAAG,aAAa;AAC5B,UAAI,UAAU,EAAC,SAAS,MAAM,SAAS,OAAM,SAAS;AACpD,gBAAQ;AACR,gBAAO;AACP,YAAI,CAAC,OAAM,QAAM;AAAE;;;AAErB,UAAI,GAAG,OAAK;AAAE;;;AAEhB,QAAI,CAAC,OAAK;AAAE,aAAO;;AACnB,SAAK,KAAK;AACV,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KACtC;AAAM,WAAK,WAAW,MAAM,IAAI,MAAM;;AAClC,WAAO;;yBAKT,aAAA,oBAAW,OAAM;AACf,QAAI,MAAK,YAAY,KAAK,cAAc,CAAC,KAAK,IAAI,MAAM;AACtD,UAAI,QAAQ,KAAK;AACjB,UAAI,OAAK;AAAE,aAAK,WAAW;;;AAE7B,QAAI,KAAK,UAAU,QAAO;AACxB,WAAK;AACL,UAAI,MAAM,KAAK;AACf,UAAI,aAAa,MAAK;AACtB,UAAI,IAAI,OAAK;AAAE,YAAI,QAAQ,IAAI,MAAM,UAAU,MAAK;;AACpD,UAAI,SAAQ,IAAI;AAChB,eAAS,IAAI,GAAG,IAAI,MAAK,MAAM,QAAQ,KAC7C;AAAQ,YAAI,CAAC,IAAI,QAAQ,IAAI,KAAK,eAAe,MAAK,MAAM,GAAG,OAC/D;AAAU,mBAAQ,MAAK,MAAM,GAAG,SAAS;;;AACnC,UAAI,QAAQ,KAAK,MAAK,KAAK;AAC3B,aAAO;;AAET,WAAO;;yBAMT,QAAA,eAAM,MAAM,OAAO,YAAY;AAC7B,QAAI,MAAK,KAAK,UAAU,KAAK,OAAO;AACpC,QAAI,KAAE;AAAE,WAAK,WAAW,MAAM,OAAO,MAAM;;AAC3C,WAAO;;yBAIT,aAAA,oBAAW,MAAM,OAAO,OAAO,YAAY;AACzC,SAAK;AACL,QAAI,MAAM,KAAK;AACf,QAAI,aAAa;AACjB,QAAI,QAAQ,IAAI,SAAS,IAAI,MAAM,UAAU,MAAM;AACnD,QAAI,UAAU,cAAc,OAAO,IAAI,UAAU,CAAC,gBAAgB,aAAa;AAC/E,QAAK,IAAI,UAAU,iBAAkB,IAAI,QAAQ,UAAU,GAAC;AAAE,iBAAW;;AACzE,SAAK,MAAM,KAAK,IAAI,YAAY,MAAM,OAAO,IAAI,aAAa,IAAI,cAAc,OAAO,MAAM;AAC7F,SAAK;;yBAKP,aAAA,oBAAW,SAAS;AAClB,QAAI,IAAI,KAAK,MAAM,SAAS;AAC5B,QAAI,IAAI,KAAK,MAAM;AACjB,aAAO,IAAI,KAAK,MAAM,KAAG;AAAE,aAAK,MAAM,IAAI,GAAG,QAAQ,KAAK,KAAK,MAAM,GAAG,OAAO;;AAC/E,WAAK,MAAM,SAAS,KAAK,OAAO;;;yBAIpC,SAAA,mBAAS;AACP,SAAK,OAAO;AACZ,SAAK,WAAW,KAAK;AACrB,WAAO,KAAK,MAAM,GAAG,OAAO,KAAK,UAAU,KAAK,QAAQ;;yBAG1D,OAAA,cAAK,IAAI;AACP,aAAS,IAAI,KAAK,MAAM,KAAK,GAAG,KAAG;AAAE,UAAI,KAAK,MAAM,MAAM,IAAI;AAC5D,aAAK,OAAO;AACZ;;;;AAIJ,uBAAI,WAAA,MAAA,WAAa;AACf,SAAK;AACL,QAAI,MAAM;AACV,aAAS,IAAI,KAAK,MAAM,KAAK,GAAG,KAAK;AACnC,UAAI,WAAU,KAAK,MAAM,GAAG;AAC5B,eAAS,IAAI,SAAQ,SAAS,GAAG,KAAK,GAAG,KAC/C;AAAQ,eAAO,SAAQ,GAAG;;AACpB,UAAI,GAAC;AAAE;;;AAET,WAAO;;yBAGT,cAAA,qBAAY,QAAQ,SAAQ;AAC1B,QAAI,KAAK,MAAI;AAAE,eAAS,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,KAAK;AACxD,YAAI,KAAK,KAAK,GAAG,QAAQ,UAAU,KAAK,KAAK,GAAG,UAAU,SAChE;AAAQ,eAAK,KAAK,GAAG,MAAM,KAAK;;;;;yBAI9B,aAAA,oBAAW,QAAQ;AACjB,QAAI,KAAK,MAAI;AAAE,eAAS,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,KAAK;AACxD,YAAI,KAAK,KAAK,GAAG,OAAO,QAAQ,OAAO,YAAY,KAAK,OAAO,SAAS,KAAK,KAAK,GAAG,OAC3F;AAAQ,eAAK,KAAK,GAAG,MAAM,KAAK;;;;;yBAI9B,aAAA,oBAAW,QAAQ,UAAS,SAAQ;AAClC,QAAI,UAAU,YAAW,KAAK,MAAI;AAAE,eAAS,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,KAAK;AAC7E,YAAI,KAAK,KAAK,GAAG,OAAO,QAAQ,OAAO,YAAY,KAAK,OAAO,SAAS,KAAK,KAAK,GAAG,OAAO;AAC1F,cAAI,MAAM,SAAQ,wBAAwB,KAAK,KAAK,GAAG;AACvD,cAAI,MAAO,WAAS,IAAI,IAChC;AAAU,iBAAK,KAAK,GAAG,MAAM,KAAK;;;;;;yBAKhC,aAAA,oBAAW,UAAU;AACnB,QAAI,KAAK,MAAI;AAAE,eAAS,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,KAAK;AACxD,YAAI,KAAK,KAAK,GAAG,QAAQ,UAC/B;AAAQ,eAAK,KAAK,GAAG,MAAM,KAAK,aAAc,UAAS,UAAU,SAAS,KAAK,KAAK,GAAG;;;;;yBAOrF,iBAAA,wBAAe,SAAS;;AACtB,QAAI,QAAQ,QAAQ,OAAO,IAC/B;AAAM,aAAO,QAAQ,MAAM,YAAY,KAAK,KAAK,gBAAgB;;AAE7D,QAAI,QAAQ,QAAQ,MAAM;AAC1B,QAAI,SAAS,KAAK,QAAQ;AAC1B,QAAI,UAAU,CAAC,KAAK,UAAW,EAAC,UAAU,OAAO,OAAO,QAAQ,KAAK,MAAM,GAAG;AAC9E,QAAI,WAAW,CAAE,UAAS,OAAO,QAAQ,IAAI,KAAM,WAAU,IAAI;AACjE,QAAI,QAAK,SAAI,GAAG,OAAU;AACxB,aAAO,KAAK,GAAG,KAAK;AAClB,YAAI,OAAO,MAAM;AACjB,YAAI,QAAQ,IAAI;AACd,cAAI,KAAK,MAAM,SAAS,KAAK,KAAK,GAAC;AAAE;;AACrC,iBAAO,SAAS,UAAU,SACpC;AAAY,gBAAI,MAAM,IAAI,GAAG,QAAM;AAAE,qBAAO;;;AAClC,iBAAO;eACF;AACL,cAAI,OAAO,QAAQ,KAAM,SAAS,KAAK,UAAW,OAAK,MAAM,OAAO,OAC9D,UAAU,SAAS,WAAW,OAAO,KAAK,QAAQ,UAAU,OAC5D;AACN,cAAI,CAAC,QAAS,KAAK,QAAQ,QAAQ,KAAK,OAAO,QAAQ,SAAS,IAC1E;AAAY,mBAAO;;AACT;;;AAGJ,aAAO;;AAET,WAAO,MAAM,MAAM,SAAS,GAAG,KAAK;;yBAGtC,uBAAA,gCAAuB;AACrB,QAAI,WAAW,KAAK,QAAQ;AAC5B,QAAI,UAAQ;AAAE,eAAS,IAAI,SAAS,OAAO,KAAK,GAAG,KAAK;AACtD,YAAI,QAAQ,SAAS,KAAK,GAAG,eAAe,SAAS,WAAW,IAAI;AACpE,YAAI,SAAS,MAAM,eAAe,MAAM,cAAY;AAAE,iBAAO;;;;AAE/D,aAAS,QAAQ,KAAK,OAAO,OAAO,OAAO;AACzC,UAAI,OAAO,KAAK,OAAO,OAAO,MAAM;AACpC,UAAI,KAAK,eAAe,KAAK,cAAY;AAAE,eAAO;;;;yBAItD,iBAAA,wBAAe,OAAM;AACnB,QAAI,SAAQ,kBAAkB,OAAM,KAAK,IAAI;AAC7C,QAAI,QAAK;AAAE,WAAK,IAAI,WAAW,KAAK;;AACpC,SAAK,IAAI,eAAe,MAAK,SAAS,KAAK,IAAI;;yBAGjD,oBAAA,2BAAkB,OAAM,MAAM;AAC5B,aAAS,QAAQ,KAAK,MAAM,SAAS,GAAG,SAAS;AAC/C,UAAI,QAAQ,KAAK,MAAM;AACvB,UAAI,SAAQ,MAAM,aAAa,YAAY;AAC3C,UAAI,SAAQ,IAAI;AACd,cAAM,eAAe,MAAK,cAAc,MAAM;aACzC;AACL,cAAM,cAAc,MAAK,cAAc,MAAM;AAC7C,YAAI,YAAY,MAAM,iBAAiB;AACvC,YAAI,aAAa,MAAM,QAAQ,MAAM,KAAK,eAAe,UAAU,OAC3E;AAAU,gBAAM,cAAc,UAAU,SAAS,MAAM;;;AAEjD,UAAI,SAAS,MAAI;AAAE;;;;;AAQzB,yBAAuB,KAAK;AAC1B,aAAS,SAAQ,IAAI,YAAY,WAAW,MAAM,QAAO,SAAQ,OAAM,aAAa;AAClF,UAAI,OAAO,OAAM,YAAY,IAAI,OAAM,SAAS,gBAAgB;AAChE,UAAI,QAAQ,SAAS,eAAe,SAAS,UAAU;AACrD,iBAAS,YAAY;AACrB,iBAAQ;iBACC,QAAQ,MAAM;AACvB,mBAAW;iBACF,MAAM;AACf,mBAAW;;;;AAMjB,mBAAiB,KAAK,UAAU;AAC9B,WAAQ,KAAI,WAAW,IAAI,qBAAqB,IAAI,yBAAyB,IAAI,oBAAoB,KAAK,KAAK;;AAKjH,uBAAqB,OAAO;AAC1B,QAAI,KAAK,8BAA8B,GAAG,UAAS;AACnD,WAAO,IAAI,GAAG,KAAK,QAAM;AAAE,cAAO,KAAK,EAAE,IAAI,EAAE,GAAG;;AAClD,WAAO;;AAGT,iBAAc,KAAK;AACjB,QAAI,QAAO;AACX,aAAS,QAAQ,KAAG;AAAE,YAAK,QAAQ,IAAI;;AACvC,WAAO;;AAMT,wBAAsB,UAAU,WAAU;AACxC,QAAI,SAAQ,UAAS,OAAO;AAC9B,QAAA,OAAA,SAAA,OAA0B;AACtB,UAAI,SAAS,OAAM;AACnB,UAAI,CAAC,OAAO,eAAe,WAAS;AAAE;;AACtC,UAAI,OAAO,IAAI,OAAI,SAAG,OAAS;AAC7B,aAAK,KAAK;AACV,iBAAS,IAAI,GAAG,IAAI,MAAM,WAAW,KAAK;AAChD,cAAA,MAA2B,MAAM,KAAK;AAAzB,cAAA,OAAA,IAAA;AAAM,cAAA,OAAA,IAAA;AACX,cAAI,QAAQ,WAAQ;AAAE,mBAAO;;AAC7B,cAAI,KAAK,QAAQ,QAAQ,KAAK,KAAK,OAAK;AAAE,mBAAO;;;;AAGrD,UAAI,KAAK,OAAO,eAAa;AAAE,eAAA,EAAA,GAAO;;;AAXxC,aAAS,QAAQ,QAAK;;;;;;AAexB,6BAA2B,OAAM,MAAK;AACpC,aAAS,IAAI,GAAG,IAAI,KAAI,QAAQ,KAAK;AACnC,UAAI,MAAK,GAAG,KAAI,KAAG;AAAE,eAAO,KAAI;;;;MCjyBvB,gBASX,wBAAY,QAAO,QAAO;AAGxB,SAAK,QAAQ,UAAS;AAGtB,SAAK,QAAQ,UAAS;;0BAQxB,oBAAA,2BAAkB,UAAU,SAAc,QAAQ;;;gBAAZ;AACpC,QAAI,CAAC,QAAM;AAAE,eAAS,IAAI,SAAS;;AAEnC,QAAI,MAAM,QAAQ,SAAS;AAC3B,aAAS,QAAO,SAAC,OAAQ;AACvB,UAAI,UAAU,MAAK,MAAM,QAAQ;AAC/B,YAAI,CAAC,QAAM;AAAE,mBAAS;;AACtB,YAAI,OAAO,GAAG,WAAW;AACzB,eAAO,OAAO,OAAO,UAAU,WAAW,MAAK,MAAM,QAAQ;AAC3D,cAAI,OAAO,MAAK,MAAM;AACtB,cAAI,CAAC,OAAK,MAAM,KAAK,KAAK,OAAO;AAAE;AAAY;;AAC/C,cAAI,CAAC,KAAK,GAAG,OAAO,UAAU,KAAK,KAAK,KAAK,aAAa,OAAK;AAAE;;AACjE,kBAAQ;AAAG;;AAEb,eAAO,OAAO,OAAO,QAAQ;AAC3B,gBAAM,OAAO;AACb,iBAAO;;AAET,eAAO,WAAW,MAAK,MAAM,QAAQ;AACnC,cAAI,OAAM,MAAK,MAAM;AACrB,cAAI,UAAU,OAAK,cAAc,MAAK,MAAK,UAAU;AACrD,cAAI,SAAS;AACX,mBAAO,KAAK,MAAK;AACjB,gBAAI,YAAY,QAAQ;AACxB,kBAAM,QAAQ,cAAc,QAAQ;;;;AAI1C,UAAI,YAAY,OAAK,mBAAmB,OAAM;;AAGhD,WAAO;;0BAGT,qBAAA,4BAAmB,OAAM,SAAc;;gBAAJ;AACrC,QAAA,MACQ,cAAc,WAAW,IAAI,UAAU,KAAK,MAAM,MAAK,KAAK,MAAM;AADjE,QAAA,MAAA,IAAA;AAAK,QAAA,aAAA,IAAA;AAEV,QAAI,YAAY;AACd,UAAI,MAAK,QACf;AAAQ,cAAM,IAAI,WAAW;;AACvB,UAAI,QAAQ,WAClB;AAAQ,gBAAQ,UAAU,OAAM,YAAY;aAE5C;AAAQ,aAAK,kBAAkB,MAAK,SAAS,SAAS;;;AAElD,WAAO;;0BAST,gBAAA,uBAAc,OAAM,SAAc;;gBAAJ;AAC5B,QAAI,MAAM,KAAK,mBAAmB,OAAM;AACxC,aAAS,IAAI,MAAK,MAAM,SAAS,GAAG,KAAK,GAAG,KAAK;AAC/C,UAAI,OAAO,KAAK,cAAc,MAAK,MAAM,IAAI,MAAK,UAAU;AAC5D,UAAI,MAAM;AACP,QAAC,MAAK,cAAc,KAAK,KAAK,YAAY;AAC3C,cAAM,KAAK;;;AAGf,WAAO;;0BAGT,gBAAA,uBAAc,OAAM,SAAQ,SAAc;;gBAAJ;AACpC,QAAI,QAAQ,KAAK,MAAM,MAAK,KAAK;AACjC,WAAO,SAAS,cAAc,WAAW,IAAI,UAAU,MAAM,OAAM;;AAOrE,gBAAO,aAAA,oBAAW,MAAK,WAAW,OAAc;;cAAN;AACxC,QAAI,OAAO,aAAa,UAC5B;AAAM,aAAO,EAAC,KAAK,KAAI,eAAe;;AAClC,QAAI,UAAU,YAAY,MAC9B;AAAM,aAAO,EAAC,KAAK;;AACf,QAAI,UAAU,OAAO,UAAU,IAAI,YAAY,MACnD;AAAM,aAAO;;AACT,QAAI,UAAU,UAAU,IAAI,QAAQ,QAAQ,QAAQ;AACpD,QAAI,QAAQ,GAAG;AACb,cAAQ,QAAQ,MAAM,GAAG;AACzB,gBAAU,QAAQ,MAAM,QAAQ;;AAElC,QAAI,aAAa,MAAM,MAAM,QAAQ,KAAI,gBAAgB,OAAO,WAAW,KAAI,cAAc;AAC7F,QAAI,QAAQ,UAAU,IAAI,SAAQ;AAClC,QAAI,SAAS,OAAO,SAAS,YAAY,MAAM,YAAY,QAAQ,CAAC,MAAM,QAAQ,QAAQ;AACxF,eAAQ;AACR,eAAS,QAAQ,OAAK;AAAE,YAAI,MAAM,SAAS,MAAM;AAC/C,cAAI,UAAQ,KAAK,QAAQ;AACzB,cAAI,UAAQ,GAAC;AAAE,gBAAI,eAAe,KAAK,MAAM,GAAG,UAAQ,KAAK,MAAM,UAAQ,IAAI,MAAM;iBAC7F;AAAa,gBAAI,aAAa,MAAM,MAAM;;;;;AAGtC,aAAS,IAAI,QAAO,IAAI,UAAU,QAAQ,KAAK;AAC7C,UAAI,SAAQ,UAAU;AACtB,UAAI,WAAU,GAAG;AACf,YAAI,IAAI,UAAU,SAAS,KAAK,IAAI,QAC5C;AAAU,gBAAM,IAAI,WAAW;;AACvB,eAAO,EAAA,KAAM,YAAY;aACpB;AACb,YAAA,MAAqD,cAAc,WAAW,MAAK,QAAO;AAAxE,YAAA,QAAA,IAAA;AAAmB,YAAA,eAAA,IAAA;AAC7B,YAAI,YAAY;AAChB,YAAI,cAAc;AAChB,cAAI,YAAU;AAAE,kBAAM,IAAI,WAAW;;AACrC,uBAAa;;;;AAInB,WAAO,EAAA,KAAI;;AAMb,gBAAO,aAAA,qBAAW,SAAQ;AACxB,WAAO,QAAO,OAAO,iBAClB,SAAO,OAAO,gBAAgB,IAAI,cAAc,KAAK,gBAAgB,UAAS,KAAK,gBAAgB;;AAMxG,gBAAO,kBAAA,yBAAgB,SAAQ;AAC7B,QAAI,UAAS,YAAY,QAAO;AAChC,QAAI,CAAC,QAAO,MAAI;AAAE,cAAO,OAAI,SAAG,OAAA;AAAA,eAAQ,MAAK;;;AAC7C,WAAO;;AAKT,gBAAO,kBAAA,yBAAgB,SAAQ;AAC7B,WAAO,YAAY,QAAO;;AAI9B,uBAAqB,KAAK;AACxB,QAAI,UAAS;AACb,aAAS,QAAQ,KAAK;AACpB,UAAI,QAAQ,IAAI,MAAM,KAAK;AAC3B,UAAI,OAAK;AAAE,gBAAO,QAAQ;;;AAE5B,WAAO;;AAGT,eAAa,SAAS;AAEpB,WAAO,QAAQ,YAAY,OAAO;;;;AC/LpC,MAAM,OAAO,CAAC,KAAK;AAIZ,MAAM,QAAQ;AAAA,IAEnB,KAAK;AAAA,MACH,SAAS;AAAA;AAAA,IAKX,WAAW;AAAA,MACT,SAAS;AAAA,MACT,OAAO;AAAA,MACP,UAAU,CAAC,EAAE,KAAK;AAAA,MAClB,QAAQ;AACN,eAAO;AAAA;AAAA;AAAA,IAKX,MAAM;AAAA,MACJ,OAAO;AAAA;AAAA;AAKJ,MAAM,SAAQ;AAUd,MAAM,SAAS,IAAI,OAAO,EAAE,OAAO;;;ACZ1C,MAAM,UAAU;AAChB,MAAM,WAAW,KAAK,IAAI,GAAG;AAE7B,uBAAqB,QAAO,SAAQ;AAAE,WAAO,SAAQ,UAAS;;AAC9D,wBAAsB,OAAO;AAAE,WAAO,QAAQ;;AAC9C,yBAAuB,OAAO;AAAE,WAAQ,SAAS,SAAQ,YAAY;;MAIxD,YACX,oBAAY,KAAK,SAAiB,UAAgB;;gBAAvB;;iBAAiB;AAE1C,SAAK,MAAM;AAGX,SAAK,UAAU;AACf,SAAK,UAAU;;MASN,UAKX,kBAAY,QAAQ,UAAkB;;iBAAP;AAC7B,SAAK,SAAS;AACd,SAAK,WAAW;;oBAGlB,UAAA,iBAAQ,OAAO;AACb,QAAI,OAAO,GAAG,SAAQ,aAAa;AACnC,QAAI,CAAC,KAAK,UAAQ;AAAE,eAAS,IAAI,GAAG,IAAI,QAAO,KACnD;AAAM,gBAAQ,KAAK,OAAO,IAAI,IAAI,KAAK,KAAK,OAAO,IAAI,IAAI;;;AACvD,WAAO,KAAK,OAAO,SAAQ,KAAK,OAAO,cAAc;;oBAIvD,YAAA,mBAAU,KAAK,OAAW;;cAAH;AAAK,WAAO,KAAK,KAAK,KAAK,OAAO;;oBAGzD,MAAA,aAAI,KAAK,OAAW;;cAAH;AAAK,WAAO,KAAK,KAAK,KAAK,OAAO;;oBAEnD,OAAA,cAAK,KAAK,OAAO,QAAQ;AACvB,QAAI,OAAO,GAAG,WAAW,KAAK,WAAW,IAAI,GAAG,WAAW,KAAK,WAAW,IAAI;AAC/E,aAAS,IAAI,GAAG,IAAI,KAAK,OAAO,QAAQ,KAAK,GAAG;AAC9C,UAAI,SAAQ,KAAK,OAAO,KAAM,MAAK,WAAW,OAAO;AACrD,UAAI,SAAQ,KAAG;AAAE;;AACjB,UAAI,UAAU,KAAK,OAAO,IAAI,WAAW,UAAU,KAAK,OAAO,IAAI,WAAW,OAAM,SAAQ;AAC5F,UAAI,OAAO,MAAK;AACd,YAAI,OAAO,CAAC,UAAU,QAAQ,OAAO,SAAQ,KAAK,OAAO,OAAM,IAAI;AACnE,YAAI,UAAS,SAAQ,OAAQ,QAAO,IAAI,IAAI;AAC5C,YAAI,QAAM;AAAE,iBAAO;;AACnB,YAAI,WAAU,OAAQ,SAAQ,IAAI,SAAQ,QAAO,OAAO,YAAY,IAAI,GAAG,MAAM;AACjF,eAAO,IAAI,UAAU,SAAQ,QAAQ,IAAI,OAAO,SAAQ,OAAO,MAAK;;AAEtE,cAAQ,UAAU;;AAEpB,WAAO,SAAS,MAAM,OAAO,IAAI,UAAU,MAAM;;oBAGnD,UAAA,iBAAQ,KAAK,UAAS;AACpB,QAAI,OAAO,GAAG,SAAQ,aAAa;AACnC,QAAI,WAAW,KAAK,WAAW,IAAI,GAAG,WAAW,KAAK,WAAW,IAAI;AACrE,aAAS,IAAI,GAAG,IAAI,KAAK,OAAO,QAAQ,KAAK,GAAG;AAC9C,UAAI,SAAQ,KAAK,OAAO,KAAM,MAAK,WAAW,OAAO;AACrD,UAAI,SAAQ,KAAG;AAAE;;AACjB,UAAI,UAAU,KAAK,OAAO,IAAI,WAAW,OAAM,SAAQ;AACvD,UAAI,OAAO,QAAO,KAAK,SAAQ,GAAC;AAAE,eAAO;;AACzC,cAAQ,KAAK,OAAO,IAAI,YAAY;;AAEtC,WAAO;;oBAMT,UAAA,kBAAQ,GAAG;AACT,QAAI,WAAW,KAAK,WAAW,IAAI,GAAG,WAAW,KAAK,WAAW,IAAI;AACrE,aAAS,IAAI,GAAG,OAAO,GAAG,IAAI,KAAK,OAAO,QAAQ,KAAK,GAAG;AACxD,UAAI,SAAQ,KAAK,OAAO,IAAI,WAAW,SAAS,MAAK,WAAW,OAAO,IAAI,WAAW,SAAS,MAAK,WAAW,IAAI;AACnH,UAAI,UAAU,KAAK,OAAO,IAAI,WAAW,UAAU,KAAK,OAAO,IAAI;AACnE,QAAE,UAAU,WAAW,SAAS,UAAU,WAAW;AACrD,cAAQ,UAAU;;;oBAOtB,SAAA,kBAAS;AACP,WAAO,IAAI,QAAQ,KAAK,QAAQ,CAAC,KAAK;;oBAGxC,WAAA,qBAAW;AACT,WAAQ,MAAK,WAAW,MAAM,MAAM,KAAK,UAAU,KAAK;;AAO1D,UAAO,SAAA,gBAAO,GAAG;AACf,WAAO,KAAK,IAAI,QAAQ,QAAQ,IAAI,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,GAAG;;AAI5E,UAAQ,QAAQ,IAAI,QAAQ;MASf,UAGX,kBAAY,MAAM,QAAQ,OAAM,IAAI;AAGlC,SAAK,OAAO,QAAQ;AAIpB,SAAK,OAAO,SAAQ;AAGpB,SAAK,KAAK,MAAM,OAAO,KAAK,KAAK,SAAS;AAC1C,SAAK,SAAS;;oBAKhB,QAAA,gBAAM,OAAU,IAAuB;;cAA1B;;WAAQ,KAAK,KAAK;AAC7B,WAAO,IAAI,QAAQ,KAAK,MAAM,KAAK,QAAQ,OAAM;;oBAGnD,OAAA,iBAAO;AACL,WAAO,IAAI,QAAQ,KAAK,KAAK,SAAS,KAAK,UAAU,KAAK,OAAO,SAAS,KAAK,MAAM,KAAK;;oBAO5F,YAAA,mBAAU,OAAK,SAAS;AACtB,SAAK,KAAK,KAAK,KAAK,KAAK;AACzB,QAAI,WAAW,MAAI;AAAE,WAAK,UAAU,KAAK,KAAK,SAAS,GAAG;;;oBAM5D,gBAAA,uBAAc,SAAS;AACrB,aAAS,IAAI,GAAG,YAAY,KAAK,KAAK,QAAQ,IAAI,QAAQ,KAAK,QAAQ,KAAK;AAC1E,UAAI,OAAO,QAAQ,UAAU;AAC7B,WAAK,UAAU,QAAQ,KAAK,IAAI,QAAQ,QAAQ,OAAO,IAAI,YAAY,OAAO;;;oBAQlF,YAAA,mBAAU,GAAG;AACX,QAAI,KAAK,QAAM;AAAE,eAAS,IAAI,GAAG,IAAI,KAAK,OAAO,QAAQ,KAC7D;AAAM,YAAI,KAAK,OAAO,MAAM,GAAC;AAAE,iBAAO,KAAK,OAAO,IAAK,KAAI,IAAI,KAAK;;;;;oBAGlE,YAAA,mBAAU,GAAG,GAAG;AACd,QAAI,CAAC,KAAK,QAAM;AAAE,WAAK,SAAS;;AAChC,SAAK,OAAO,KAAK,GAAG;;oBAKtB,wBAAA,+BAAsB,SAAS;AAC7B,aAAS,IAAI,QAAQ,KAAK,SAAS,GAAG,YAAY,KAAK,KAAK,SAAS,QAAQ,KAAK,QAAQ,KAAK,GAAG,KAAK;AACrG,UAAI,OAAO,QAAQ,UAAU;AAC7B,WAAK,UAAU,QAAQ,KAAK,GAAG,UAAU,QAAQ,QAAQ,OAAO,IAAI,YAAY,OAAO,IAAI;;;oBAM/F,SAAA,mBAAS;AACP,QAAI,UAAU,IAAI;AAClB,YAAQ,sBAAsB;AAC9B,WAAO;;oBAKT,MAAA,cAAI,KAAK,OAAW;;cAAH;AACf,QAAI,KAAK,QAAM;AAAE,aAAO,KAAK,KAAK,KAAK,OAAO;;AAC9C,aAAS,IAAI,KAAK,MAAM,IAAI,KAAK,IAAI,KACzC;AAAM,YAAM,KAAK,KAAK,GAAG,IAAI,KAAK;;AAC9B,WAAO;;oBAMT,YAAA,oBAAU,KAAK,OAAW;;cAAH;AAAK,WAAO,KAAK,KAAK,KAAK,OAAO;;oBAEzD,OAAA,eAAK,KAAK,OAAO,QAAQ;AACvB,QAAI,UAAU;AAEd,aAAS,IAAI,KAAK,MAAM,IAAI,KAAK,IAAI,KAAK;AACxC,UAAI,QAAM,KAAK,KAAK,IAAI,UAAS,MAAI,UAAU,KAAK;AACpD,UAAI,QAAO,WAAW,MAAM;AAC1B,YAAI,OAAO,KAAK,UAAU;AAC1B,YAAI,QAAQ,QAAQ,OAAO,KAAK,OAAO,KAAK,IAAI;AAC9C,cAAI;AACJ,gBAAM,KAAK,KAAK,MAAM,QAAQ,QAAO;AACrC;;;AAIJ,UAAI,QAAO,SAAO;AAAE,kBAAU;;AAC9B,YAAM,QAAO;;AAGf,WAAO,SAAS,MAAM,IAAI,UAAU,KAAK;;AChQtC,0BAAwB,SAAS;AACtC,QAAI,OAAM,MAAM,KAAK,MAAM;AAC3B,SAAI,YAAY,eAAe;AAC/B,WAAO;;AAGT,iBAAe,YAAY,OAAO,OAAO,MAAM;AAC/C,iBAAe,UAAU,cAAc;AACvC,iBAAe,UAAU,OAAO;MAOnB,YAGX,oBAAY,MAAK;AAIf,SAAK,MAAM;AAGX,SAAK,QAAQ;AAGb,SAAK,OAAO;AAGZ,SAAK,UAAU,IAAI;;;AAIrB,sBAAI,OAAA,MAAA,WAAS;AAAE,WAAO,KAAK,KAAK,SAAS,KAAK,KAAK,KAAK,KAAK;;sBAK7D,OAAA,cAAK,QAAQ;AACX,QAAI,UAAS,KAAK,UAAU;AAC5B,QAAI,QAAO,QAAM;AAAE,YAAM,IAAI,eAAe,QAAO;;AACnD,WAAO;;sBAMT,YAAA,mBAAU,OAAM;AACd,QAAI,UAAS,MAAK,MAAM,KAAK;AAC7B,QAAI,CAAC,QAAO,QAAM;AAAE,WAAK,QAAQ,OAAM,QAAO;;AAC9C,WAAO;;AAMT,sBAAI,WAAA,MAAA,WAAa;AACf,WAAO,KAAK,MAAM,SAAS;;sBAG7B,UAAA,iBAAQ,OAAM,MAAK;AACjB,SAAK,KAAK,KAAK,KAAK;AACpB,SAAK,MAAM,KAAK;AAChB,SAAK,QAAQ,UAAU,MAAK;AAC5B,SAAK,MAAM;;;AChEf,0BAAwB;AAAE,UAAM,IAAI,MAAM;;AAE1C,MAAM,YAAY,OAAO,OAAO;MAWnB,OAAI,iBAAA;;iBAMf,QAAA,eAAM,MAAM;AAAE,WAAO;;iBAMrB,SAAA,kBAAS;AAAE,WAAO,QAAQ;;iBAK1B,SAAA,iBAAO,MAAM;AAAE,WAAO;;iBAMtB,MAAA,cAAI,UAAU;AAAE,WAAO;;iBAMvB,QAAA,eAAM,QAAQ;AAAE,WAAO;;iBAOvB,SAAA,mBAAS;AAAE,WAAO;;AAKlB,OAAO,WAAA,mBAAS,SAAQ,MAAM;AAC5B,QAAI,CAAC,QAAQ,CAAC,KAAK,UAAQ;AAAE,YAAM,IAAI,WAAW;;AAClD,QAAI,OAAO,UAAU,KAAK;AAC1B,QAAI,CAAC,MAAI;AAAE,YAAM,IAAI,WAAU,kBAAiB,KAAK,WAAQ;;AAC7D,WAAO,KAAK,SAAS,SAAQ;;AAQ/B,OAAO,SAAA,gBAAO,IAAI,WAAW;AAC3B,QAAI,MAAM,WAAS;AAAE,YAAM,IAAI,WAAW,mCAAmC;;AAC7E,cAAU,MAAM;AAChB,cAAU,UAAU,SAAS;AAC7B,WAAO;;MAME,aAEX,qBAAY,MAAK,QAAQ;AAEvB,SAAK,MAAM;AAEX,SAAK,SAAS;;AAKhB,aAAO,KAAA,YAAG,MAAK;AAAE,WAAO,IAAI,WAAW,MAAK;;AAI5C,aAAO,OAAA,cAAK,SAAS;AAAE,WAAO,IAAI,WAAW,MAAM;;AAMnD,aAAO,cAAA,qBAAY,MAAK,OAAM,IAAI,QAAO;AACvC,QAAI;AACF,aAAO,WAAW,GAAG,KAAI,QAAQ,OAAM,IAAI;aACpC,GAAP;AACA,UAAI,aAAa,cAAY;AAAE,eAAO,WAAW,KAAK,EAAE;;AACxD,YAAM;;;MCpGC,cAAW,yBAAA,OAAA;AAStB,0BAAY,OAAM,IAAI,QAAO,WAAW;AACtC,YAAA,KAAK;AAGL,WAAK,OAAO;AAGZ,WAAK,KAAK;AAGV,WAAK,QAAQ;AACb,WAAK,YAAY,CAAC,CAAC;;;;;;AAGvB,iBAAA,UAAE,QAAA,gBAAM,MAAK;AACT,UAAI,KAAK,aAAa,eAAe,MAAK,KAAK,MAAM,KAAK,KAC9D;AAAM,eAAO,WAAW,KAAK;;AACzB,aAAO,WAAW,YAAY,MAAK,KAAK,MAAM,KAAK,IAAI,KAAK;;AAGhE,iBAAA,UAAE,SAAA,mBAAS;AACP,aAAO,IAAI,QAAQ,CAAC,KAAK,MAAM,KAAK,KAAK,KAAK,MAAM,KAAK,MAAM;;AAGnE,iBAAA,UAAE,SAAA,iBAAO,MAAK;AACV,aAAO,IAAI,aAAY,KAAK,MAAM,KAAK,OAAO,KAAK,MAAM,MAAM,KAAI,MAAM,KAAK,MAAM,KAAK;;AAG7F,iBAAA,UAAE,MAAA,eAAI,SAAS;AACX,UAAI,QAAO,QAAQ,UAAU,KAAK,MAAM,IAAI,KAAK,QAAQ,UAAU,KAAK,IAAI;AAC5E,UAAI,MAAK,WAAW,GAAG,SAAO;AAAE,eAAO;;AACvC,aAAO,IAAI,aAAY,MAAK,KAAK,KAAK,IAAI,MAAK,KAAK,GAAG,MAAM,KAAK;;AAGtE,iBAAA,UAAE,QAAA,gBAAM,OAAO;AACX,UAAI,CAAE,kBAAiB,iBAAgB,MAAM,aAAa,KAAK,WAAS;AAAE,eAAO;;AAEjF,UAAI,KAAK,OAAO,KAAK,MAAM,QAAQ,MAAM,QAAQ,CAAC,KAAK,MAAM,WAAW,CAAC,MAAM,MAAM,WAAW;AAC9F,YAAI,SAAQ,KAAK,MAAM,OAAO,MAAM,MAAM,QAAQ,IAAI,MAAM,QACtD,IAAI,MAAM,KAAK,MAAM,QAAQ,OAAO,MAAM,MAAM,UAAU,KAAK,MAAM,WAAW,MAAM,MAAM;AAClG,eAAO,IAAI,aAAY,KAAK,MAAM,KAAK,KAAM,OAAM,KAAK,MAAM,OAAO,QAAO,KAAK;iBACxE,MAAM,MAAM,KAAK,QAAQ,CAAC,KAAK,MAAM,aAAa,CAAC,MAAM,MAAM,SAAS;AACjF,YAAI,UAAQ,KAAK,MAAM,OAAO,MAAM,MAAM,QAAQ,IAAI,MAAM,QACtD,IAAI,MAAM,MAAM,MAAM,QAAQ,OAAO,KAAK,MAAM,UAAU,MAAM,MAAM,WAAW,KAAK,MAAM;AAClG,eAAO,IAAI,aAAY,MAAM,MAAM,KAAK,IAAI,SAAO,KAAK;aACnD;AACL,eAAO;;;AAIb,iBAAA,UAAE,SAAA,mBAAS;AACP,UAAI,OAAO,EAAC,UAAU,WAAW,MAAM,KAAK,MAAM,IAAI,KAAK;AAC3D,UAAI,KAAK,MAAM,MAAI;AAAE,aAAK,QAAQ,KAAK,MAAM;;AAC7C,UAAI,KAAK,WAAS;AAAE,aAAK,YAAY;;AACrC,aAAO;;AAGT,iBAAO,WAAA,mBAAS,SAAQ,MAAM;AAC5B,UAAI,OAAO,KAAK,QAAQ,YAAY,OAAO,KAAK,MAAM,UAC1D;AAAM,cAAM,IAAI,WAAW;;AACvB,aAAO,IAAI,aAAY,KAAK,MAAM,KAAK,IAAI,MAAM,SAAS,SAAQ,KAAK,QAAQ,CAAC,CAAC,KAAK;;;IArEzD;AAyEjC,OAAK,OAAO,WAAW;MAKV,oBAAiB,yBAAA,OAAA;AAM5B,gCAAY,OAAM,IAAI,SAAS,OAAO,QAAO,QAAQ,WAAW;AAC9D,YAAA,KAAK;AAGL,WAAK,OAAO;AAGZ,WAAK,KAAK;AAGV,WAAK,UAAU;AAGf,WAAK,QAAQ;AAGb,WAAK,QAAQ;AAIb,WAAK,SAAS;AACd,WAAK,YAAY,CAAC,CAAC;;;;;;AAGvB,uBAAA,UAAE,QAAA,gBAAM,MAAK;AACT,UAAI,KAAK,aAAc,gBAAe,MAAK,KAAK,MAAM,KAAK,YACpC,eAAe,MAAK,KAAK,OAAO,KAAK,MAChE;AAAM,eAAO,WAAW,KAAK;;AAEzB,UAAI,MAAM,KAAI,MAAM,KAAK,SAAS,KAAK;AACvC,UAAI,IAAI,aAAa,IAAI,SAC7B;AAAM,eAAO,WAAW,KAAK;;AACzB,UAAI,WAAW,KAAK,MAAM,SAAS,KAAK,QAAQ,IAAI;AACpD,UAAI,CAAC,UAAQ;AAAE,eAAO,WAAW,KAAK;;AACtC,aAAO,WAAW,YAAY,MAAK,KAAK,MAAM,KAAK,IAAI;;AAG3D,uBAAA,UAAE,SAAA,mBAAS;AACP,aAAO,IAAI,QAAQ;QAAC,KAAK;QAAM,KAAK,UAAU,KAAK;QAAM,KAAK;QAC1C,KAAK;QAAO,KAAK,KAAK,KAAK;QAAO,KAAK,MAAM,OAAO,KAAK;;;AAGjF,uBAAA,UAAE,SAAA,iBAAO,MAAK;AACV,UAAI,MAAM,KAAK,QAAQ,KAAK;AAC5B,aAAO,IAAI,mBAAkB,KAAK,MAAM,KAAK,OAAO,KAAK,MAAM,OAAO,KACzC,KAAK,OAAO,KAAK,QAAQ,KAAK,OAAO,KAAK,SAAS,KACnD,KAAI,MAAM,KAAK,MAAM,KAAK,IAAI,cAAc,KAAK,UAAU,KAAK,MAAM,KAAK,QAAQ,KAAK,OACxF,KAAK,UAAU,KAAK,MAAM,KAAK;;AAGhE,uBAAA,UAAE,MAAA,eAAI,SAAS;AACX,UAAI,QAAO,QAAQ,UAAU,KAAK,MAAM,IAAI,KAAK,QAAQ,UAAU,KAAK,IAAI;AAC5E,UAAI,UAAU,QAAQ,IAAI,KAAK,SAAS,KAAK,QAAQ,QAAQ,IAAI,KAAK,OAAO;AAC7E,UAAK,MAAK,WAAW,GAAG,WAAY,UAAU,MAAK,OAAO,QAAQ,GAAG,KAAG;AAAE,eAAO;;AACjF,aAAO,IAAI,mBAAkB,MAAK,KAAK,GAAG,KAAK,SAAS,OAAO,KAAK,OAAO,KAAK,QAAQ,KAAK;;AAGjG,uBAAA,UAAE,SAAA,mBAAS;AACP,UAAI,OAAO;QAAC,UAAU;QAAiB,MAAM,KAAK;QAAM,IAAI,KAAK;QACrD,SAAS,KAAK;QAAS,OAAO,KAAK;QAAO,QAAQ,KAAK;;AACnE,UAAI,KAAK,MAAM,MAAI;AAAE,aAAK,QAAQ,KAAK,MAAM;;AAC7C,UAAI,KAAK,WAAS;AAAE,aAAK,YAAY;;AACrC,aAAO;;AAGT,uBAAO,WAAA,mBAAS,SAAQ,MAAM;AAC5B,UAAI,OAAO,KAAK,QAAQ,YAAY,OAAO,KAAK,MAAM,YAClD,OAAO,KAAK,WAAW,YAAY,OAAO,KAAK,SAAS,YAAY,OAAO,KAAK,UAAU,UAClG;AAAM,cAAM,IAAI,WAAW;;AACvB,aAAO,IAAI,mBAAkB,KAAK,MAAM,KAAK,IAAI,KAAK,SAAS,KAAK,OACvC,MAAM,SAAS,SAAQ,KAAK,QAAQ,KAAK,QAAQ,CAAC,CAAC,KAAK;;;IA5ElD;AAgFvC,OAAK,OAAO,iBAAiB;AAE7B,0BAAwB,MAAK,OAAM,IAAI;AACrC,QAAI,QAAQ,KAAI,QAAQ,QAAO,OAAO,KAAK,OAAM,QAAQ,MAAM;AAC/D,WAAO,OAAO,KAAK,QAAQ,KAAK,MAAM,WAAW,UAAU,MAAM,KAAK,OAAO,YAAY;AACvF;AACA;;AAEF,QAAI,OAAO,GAAG;AACZ,UAAI,OAAO,MAAM,KAAK,OAAO,WAAW,MAAM,WAAW;AACzD,aAAO,OAAO,GAAG;AACf,YAAI,CAAC,QAAQ,KAAK,QAAM;AAAE,iBAAO;;AACjC,eAAO,KAAK;AACZ;;;AAGJ,WAAO;;AC/KT,kBAAgB,OAAM,QAAO,MAAK;AAChC,WAAQ,WAAS,KAAK,MAAK,WAAW,QAAO,MAAK,gBAC/C,SAAO,MAAK,cAAc,MAAK,WAAW,GAAG;;AAO3C,sBAAoB,OAAO;AAChC,QAAI,SAAS,MAAM;AACnB,QAAI,WAAU,OAAO,QAAQ,WAAW,MAAM,YAAY,MAAM;AAChE,aAAS,QAAQ,MAAM,SAAQ,EAAE,OAAO;AACtC,UAAI,QAAO,MAAM,MAAM,KAAK;AAC5B,UAAI,SAAQ,MAAM,MAAM,MAAM,QAAQ,WAAW,MAAM,IAAI,WAAW;AACtE,UAAI,QAAQ,MAAM,SAAS,MAAK,WAAW,QAAO,UAAU,WAChE;AAAM,eAAO;;AACT,UAAI,SAAS,KAAK,MAAK,KAAK,KAAK,aAAa,CAAC,OAAO,OAAM,QAAO,WAAS;AAAE;;;;AAUlF,YAAU,UAAU,OAAO,SAAS,OAAO,QAAQ;AAC5C,QAAA,QAAA,MAAA;AAAO,QAAA,MAAA,MAAA;AAAK,QAAA,QAAA,MAAA;AAEjB,QAAI,WAAW,MAAM,OAAO,QAAQ,IAAI,SAAS,IAAI,MAAM,QAAQ;AACnE,QAAI,SAAQ,UAAU,OAAM;AAE5B,QAAI,UAAS,SAAS,OAAO,YAAY;AACzC,aAAS,IAAI,OAAO,YAAY,OAAO,IAAI,QAAQ,KACrD;AAAI,UAAI,aAAa,MAAM,MAAM,KAAK,GAAG;AACnC,oBAAY;AACZ,kBAAS,SAAS,KAAK,MAAM,KAAK,GAAG,KAAK;AAC1C;aACK;AACL;;;AAEJ,QAAI,SAAQ,SAAS,OAAO,UAAU;AACtC,aAAS,MAAI,OAAO,cAAY,OAAO,MAAI,QAAQ,OACrD;AAAI,UAAI,eAAa,IAAI,MAAM,MAAI,KAAK,IAAI,IAAI,MAAI;AAC9C,sBAAY;AACZ,iBAAQ,SAAS,KAAK,IAAI,KAAK,KAAG,KAAK;AACvC;aACK;AACL;;;AAGJ,WAAO,KAAK,KAAK,IAAI,kBAAkB,QAAO,MAAK,UAAU,QACtB,IAAI,MAAM,QAAO,OAAO,SAAQ,WAAW,UAC3C,QAAO,OAAO,WAAW;;AA4ClE,YAAU,UAAU,OAAO,SAAS,OAAO,UAAU;AACnD,QAAI,WAAU,SAAS;AACvB,aAAS,IAAI,SAAS,SAAS,GAAG,KAAK,GAAG,KAC5C;AAAI,iBAAU,SAAS,KAAK,SAAS,GAAG,KAAK,OAAO,SAAS,GAAG,OAAO;;AAErE,QAAI,SAAQ,MAAM,OAAO,OAAM,MAAM;AACrC,WAAO,KAAK,KAAK,IAAI,kBAAkB,QAAO,MAAK,QAAO,MAAK,IAAI,MAAM,UAAS,GAAG,IAAI,SAAS,QAAQ;;AAM5G,YAAU,UAAU,eAAe,SAAS,OAAM,IAAW,MAAM,OAAO;;;WAAnB;AACrD,QAAI,CAAC,KAAK,aAAW;AAAE,YAAM,IAAI,WAAW;;AAC5C,QAAI,UAAU,KAAK,MAAM;AACzB,SAAK,IAAI,aAAa,OAAM,IAAE,SAAG,OAAM,KAAQ;AAC7C,UAAI,MAAK,eAAe,CAAC,MAAK,UAAU,MAAM,UAAU,cAAc,OAAK,KAAK,OAAK,QAAQ,MAAM,SAAS,IAAI,MAAM,OAAO;AAE3H,eAAK,kBAAkB,OAAK,QAAQ,MAAM,SAAS,IAAI,KAAK,IAAI;AAChE,YAAI,UAAU,OAAK,QAAQ,MAAM;AACjC,YAAI,SAAS,QAAQ,IAAI,KAAK,IAAI,OAAO,QAAQ,IAAI,MAAM,MAAK,UAAU;AAC1E,eAAK,KAAK,IAAI,kBAAkB,QAAQ,MAAM,SAAS,GAAG,OAAO,GACjC,IAAI,MAAM,SAAS,KAAK,KAAK,OAAO,OAAO,MAAM,MAAK,SAAS,GAAG,IAAI,GAAG;AACzG,eAAO;;;AAGX,WAAO;;AAGT,yBAAuB,MAAK,KAAK,MAAM;AACrC,QAAI,OAAO,KAAI,QAAQ,MAAM,SAAQ,KAAK;AAC1C,WAAO,KAAK,OAAO,eAAe,QAAO,SAAQ,GAAG;;AAMtD,YAAU,UAAU,gBAAgB,SAAS,KAAK,MAAM,OAAO,QAAO;AACpE,QAAI,QAAO,KAAK,IAAI,OAAO;AAC3B,QAAI,CAAC,OAAI;AAAE,YAAM,IAAI,WAAW;;AAChC,QAAI,CAAC,MAAI;AAAE,aAAO,MAAK;;AACvB,QAAI,UAAU,KAAK,OAAO,OAAO,MAAM,UAAS,MAAK;AACrD,QAAI,MAAK,QACX;AAAI,aAAO,KAAK,YAAY,KAAK,MAAM,MAAK,UAAU;;AAEpD,QAAI,CAAC,KAAK,aAAa,MAAK,UAC9B;AAAI,YAAM,IAAI,WAAW,mCAAmC,KAAK;;AAE/D,WAAO,KAAK,KAAK,IAAI,kBAAkB,KAAK,MAAM,MAAK,UAAU,MAAM,GAAG,MAAM,MAAK,WAAW,GACzD,IAAI,MAAM,SAAS,KAAK,UAAU,GAAG,IAAI,GAAG;;AAK9E,oBAAkB,MAAK,KAAK,OAAW,YAAY;;cAAf;AACzC,QAAI,OAAO,KAAI,QAAQ,MAAM,QAAO,KAAK,QAAQ;AACjD,QAAI,YAAa,cAAc,WAAW,WAAW,SAAS,MAAO,KAAK;AAC1E,QAAI,QAAO,KAAK,KAAK,OAAO,KAAK,KAAK,aAClC,CAAC,KAAK,OAAO,WAAW,KAAK,SAAS,KAAK,OAAO,eAClD,CAAC,UAAU,KAAK,aAAa,KAAK,OAAO,QAAQ,WAAW,KAAK,SAAS,KAAK,OAAO,cAC5F;AAAI,aAAO;;AACT,aAAS,IAAI,KAAK,QAAQ,GAAG,IAAI,QAAQ,GAAG,IAAI,OAAM,KAAK,KAAK;AAC9D,UAAI,QAAO,KAAK,KAAK,IAAI,UAAQ,KAAK,MAAM;AAC5C,UAAI,MAAK,KAAK,KAAK,WAAS;AAAE,eAAO;;AACrC,UAAI,OAAO,MAAK,QAAQ,WAAW,SAAO,MAAK;AAC/C,UAAI,SAAS,cAAc,WAAW,MAAO;AAC7C,UAAI,UAAS,OAAI;AAAE,eAAO,KAAK,aAAa,GAAG,OAAM,KAAK,OAAO,OAAM;;AACvE,UAAI,CAAC,MAAK,WAAW,UAAQ,GAAG,MAAK,eAAe,CAAC,OAAM,KAAK,aAAa,OACjF;AAAM,eAAO;;;AAEX,QAAI,SAAQ,KAAK,WAAW;AAC5B,QAAI,WAAW,cAAc,WAAW;AACxC,WAAO,KAAK,KAAK,OAAM,eAAe,QAAO,QAAO,WAAW,SAAS,OAAO,KAAK,KAAK,QAAO,GAAG;;AASrG,YAAU,UAAU,QAAQ,SAAS,KAAK,OAAW,YAAY;;cAAf;AAChD,QAAI,OAAO,KAAK,IAAI,QAAQ,MAAM,UAAS,SAAS,OAAO,SAAQ,SAAS;AAC5E,aAAS,IAAI,KAAK,OAAO,IAAI,KAAK,QAAQ,OAAO,IAAI,QAAQ,GAAG,IAAI,GAAG,KAAK,KAAK;AAC/E,gBAAS,SAAS,KAAK,KAAK,KAAK,GAAG,KAAK;AACzC,UAAI,YAAY,cAAc,WAAW;AACzC,eAAQ,SAAS,KAAK,YAAY,UAAU,KAAK,OAAO,UAAU,OAAO,UAAS,KAAK,KAAK,GAAG,KAAK;;AAEtG,WAAO,KAAK,KAAK,IAAI,YAAY,KAAK,KAAK,IAAI,MAAM,QAAO,OAAO,SAAQ,OAAO,QAAQ;;AAMrF,mBAAiB,MAAK,KAAK;AAChC,QAAI,OAAO,KAAI,QAAQ,MAAM,SAAQ,KAAK;AAC1C,WAAO,UAAS,KAAK,YAAY,KAAK,cACpC,KAAK,OAAO,WAAW,QAAO,SAAQ;;AAG1C,qBAAkB,GAAG,GAAG;AACtB,WAAO,KAAK,KAAK,CAAC,EAAE,UAAU,EAAE,UAAU;;AAgC5C,YAAU,UAAU,OAAO,SAAS,KAAK,OAAW;;cAAH;AAC/C,QAAI,QAAO,IAAI,YAAY,MAAM,OAAO,MAAM,OAAO,MAAM,OAAO;AAClE,WAAO,KAAK,KAAK;;AAQZ,uBAAqB,MAAK,KAAK,WAAU;AAC9C,QAAI,OAAO,KAAI,QAAQ;AACvB,QAAI,KAAK,OAAO,eAAe,KAAK,SAAS,KAAK,SAAS,YAAS;AAAE,aAAO;;AAE7E,QAAI,KAAK,gBAAgB,GAC3B;AAAI,eAAS,IAAI,KAAK,QAAQ,GAAG,KAAK,GAAG,KAAK;AACxC,YAAI,SAAQ,KAAK,MAAM;AACvB,YAAI,KAAK,KAAK,GAAG,eAAe,QAAO,QAAO,YAAS;AAAE,iBAAO,KAAK,OAAO,IAAI;;AAChF,YAAI,SAAQ,GAAC;AAAE,iBAAO;;;;AAE1B,QAAI,KAAK,gBAAgB,KAAK,OAAO,QAAQ,MAC/C;AAAI,eAAS,MAAI,KAAK,QAAQ,GAAG,OAAK,GAAG,OAAK;AACxC,YAAI,UAAQ,KAAK,WAAW;AAC5B,YAAI,KAAK,KAAK,KAAG,eAAe,SAAO,SAAO,YAAS;AAAE,iBAAO,KAAK,MAAM,MAAI;;AAC/E,YAAI,UAAQ,KAAK,KAAK,KAAG,YAAU;AAAE,iBAAO;;;;;AAS3C,qBAAmB,MAAK,KAAK,QAAO;AACzC,QAAI,OAAO,KAAI,QAAQ;AACvB,QAAI,CAAC,OAAM,QAAQ,MAAI;AAAE,aAAO;;AAChC,QAAI,WAAU,OAAM;AACpB,aAAS,IAAI,GAAG,IAAI,OAAM,WAAW,KAAG;AAAE,iBAAU,SAAQ,WAAW;;AACvE,aAAS,OAAO,GAAG,QAAS,QAAM,aAAa,KAAK,OAAM,OAAO,IAAI,IAAI,QAAQ;AAC/E,eAAS,IAAI,KAAK,OAAO,KAAK,GAAG,KAAK;AACpC,YAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,OAAQ,MAAK,MAAM,IAAI,KAAK,KAAK,IAAI,IAAI,MAAM,IAAI,KAAK;AAC9F,YAAI,YAAY,KAAK,MAAM,KAAM,QAAO,IAAI,IAAI;AAChD,YAAI,SAAS,KAAK,KAAK,IAAI,OAAO;AAClC,YAAI,QAAQ,GAAG;AACb,iBAAO,OAAO,WAAW,WAAW,WAAW;eAC1C;AACL,cAAI,WAAW,OAAO,eAAe,WAAW,aAAa,SAAQ,WAAW;AAChF,iBAAO,YAAY,OAAO,eAAe,WAAW,WAAW,SAAS;;AAE1E,YAAI,MACV;AAAQ,iBAAO,QAAQ,IAAI,KAAK,MAAM,OAAO,IAAI,KAAK,OAAO,IAAI,KAAK,KAAK,MAAM,IAAI;;;;AAGnF,WAAO;;AC9RT,uBAAqB,UAAU,GAAG,QAAQ;AACxC,QAAI,SAAS;AACb,aAAS,IAAI,GAAG,IAAI,SAAS,YAAY,KAAK;AAC5C,UAAI,SAAQ,SAAS,MAAM;AAC3B,UAAI,OAAM,QAAQ,MAAI;AAAE,iBAAQ,OAAM,KAAK,YAAY,OAAM,SAAS,GAAG;;AACzE,UAAI,OAAM,UAAQ;AAAE,iBAAQ,EAAE,QAAO,QAAQ;;AAC7C,aAAO,KAAK;;AAEd,WAAO,SAAS,UAAU;;MAIf,cAAW,yBAAA,OAAA;AAEtB,0BAAY,OAAM,IAAI,OAAM;AAC1B,YAAA,KAAK;AAGL,WAAK,OAAO;AAGZ,WAAK,KAAK;AAGV,WAAK,OAAO;;;;;;AAGhB,iBAAA,UAAE,QAAA,gBAAM,MAAK;;AACT,UAAI,WAAW,KAAI,MAAM,KAAK,MAAM,KAAK,KAAK,QAAQ,KAAI,QAAQ,KAAK;AACvE,UAAI,SAAS,MAAM,KAAK,MAAM,YAAY,KAAK;AAC/C,UAAI,SAAQ,IAAI,MAAM,YAAY,SAAS,SAAO,SAAG,OAAM,SAAW;AACpE,YAAI,CAAC,MAAK,UAAU,CAAC,QAAO,KAAK,eAAe,OAAK,KAAK,OAAK;AAAE,iBAAO;;AACxE,eAAO,MAAK,KAAK,OAAK,KAAK,SAAS,MAAK;SACxC,SAAS,SAAS,WAAW,SAAS;AACzC,aAAO,WAAW,YAAY,MAAK,KAAK,MAAM,KAAK,IAAI;;AAG3D,iBAAA,UAAE,SAAA,mBAAS;AACP,aAAO,IAAI,eAAe,KAAK,MAAM,KAAK,IAAI,KAAK;;AAGvD,iBAAA,UAAE,MAAA,eAAI,SAAS;AACX,UAAI,QAAO,QAAQ,UAAU,KAAK,MAAM,IAAI,KAAK,QAAQ,UAAU,KAAK,IAAI;AAC5E,UAAI,MAAK,WAAW,GAAG,WAAW,MAAK,OAAO,GAAG,KAAG;AAAE,eAAO;;AAC7D,aAAO,IAAI,aAAY,MAAK,KAAK,GAAG,KAAK,KAAK;;AAGlD,iBAAA,UAAE,QAAA,gBAAM,OAAO;AACX,UAAI,iBAAiB,gBACjB,MAAM,KAAK,GAAG,KAAK,SACnB,KAAK,QAAQ,MAAM,MAAM,KAAK,MAAM,MAAM,MAClD;AAAM,eAAO,IAAI,aAAY,KAAK,IAAI,KAAK,MAAM,MAAM,OAC1B,KAAK,IAAI,KAAK,IAAI,MAAM,KAAK,KAAK;;;AAG/D,iBAAA,UAAE,SAAA,mBAAS;AACP,aAAO;QAAC,UAAU;QAAW,MAAM,KAAK,KAAK;QACrC,MAAM,KAAK;QAAM,IAAI,KAAK;;;AAGpC,iBAAO,WAAA,mBAAS,SAAQ,MAAM;AAC5B,UAAI,OAAO,KAAK,QAAQ,YAAY,OAAO,KAAK,MAAM,UAC1D;AAAM,cAAM,IAAI,WAAW;;AACvB,aAAO,IAAI,aAAY,KAAK,MAAM,KAAK,IAAI,QAAO,aAAa,KAAK;;;IAnDvC;AAuDjC,OAAK,OAAO,WAAW;MAGV,iBAAc,yBAAA,OAAA;AAEzB,6BAAY,OAAM,IAAI,OAAM;AAC1B,YAAA,KAAK;AAGL,WAAK,OAAO;AAGZ,WAAK,KAAK;AAGV,WAAK,OAAO;;;;;;AAGhB,oBAAA,UAAE,QAAA,gBAAM,MAAK;;AACT,UAAI,WAAW,KAAI,MAAM,KAAK,MAAM,KAAK;AACzC,UAAI,SAAQ,IAAI,MAAM,YAAY,SAAS,SAAO,SAAE,OAAQ;AAC1D,eAAO,MAAK,KAAK,OAAK,KAAK,cAAc,MAAK;UAC5C,SAAS,WAAW,SAAS;AACjC,aAAO,WAAW,YAAY,MAAK,KAAK,MAAM,KAAK,IAAI;;AAG3D,oBAAA,UAAE,SAAA,mBAAS;AACP,aAAO,IAAI,YAAY,KAAK,MAAM,KAAK,IAAI,KAAK;;AAGpD,oBAAA,UAAE,MAAA,eAAI,SAAS;AACX,UAAI,QAAO,QAAQ,UAAU,KAAK,MAAM,IAAI,KAAK,QAAQ,UAAU,KAAK,IAAI;AAC5E,UAAI,MAAK,WAAW,GAAG,WAAW,MAAK,OAAO,GAAG,KAAG;AAAE,eAAO;;AAC7D,aAAO,IAAI,gBAAe,MAAK,KAAK,GAAG,KAAK,KAAK;;AAGrD,oBAAA,UAAE,QAAA,gBAAM,OAAO;AACX,UAAI,iBAAiB,mBACjB,MAAM,KAAK,GAAG,KAAK,SACnB,KAAK,QAAQ,MAAM,MAAM,KAAK,MAAM,MAAM,MAClD;AAAM,eAAO,IAAI,gBAAe,KAAK,IAAI,KAAK,MAAM,MAAM,OAC1B,KAAK,IAAI,KAAK,IAAI,MAAM,KAAK,KAAK;;;AAGlE,oBAAA,UAAE,SAAA,mBAAS;AACP,aAAO;QAAC,UAAU;QAAc,MAAM,KAAK,KAAK;QACxC,MAAM,KAAK;QAAM,IAAI,KAAK;;;AAGpC,oBAAO,WAAA,mBAAS,SAAQ,MAAM;AAC5B,UAAI,OAAO,KAAK,QAAQ,YAAY,OAAO,KAAK,MAAM,UAC1D;AAAM,cAAM,IAAI,WAAW;;AACvB,aAAO,IAAI,gBAAe,KAAK,MAAM,KAAK,IAAI,QAAO,aAAa,KAAK;;;IAjDvC;AAqDpC,OAAK,OAAO,cAAc;ACtH1B,YAAU,UAAU,UAAU,SAAS,OAAM,IAAI,OAAM;;AACrD,QAAI,UAAU,IAAI,QAAQ,IAAI,WAAW,MAAM,SAAS;AACxD,SAAK,IAAI,aAAa,OAAM,IAAE,SAAG,OAAM,KAAK,QAAW;AACrD,UAAI,CAAC,MAAK,UAAQ;AAAE;;AACpB,UAAI,SAAQ,MAAK;AACjB,UAAI,CAAC,MAAK,QAAQ,WAAU,OAAO,KAAK,eAAe,MAAK,OAAO;AACjE,YAAI,SAAQ,KAAK,IAAI,KAAK,QAAO,OAAM,KAAK,IAAI,MAAM,MAAK,UAAU;AACrE,YAAI,SAAS,MAAK,SAAS;AAE3B,iBAAS,IAAI,GAAG,IAAI,OAAM,QAAQ,KAAK;AACrC,cAAI,CAAC,OAAM,GAAG,QAAQ,SAAS;AAC7B,gBAAI,YAAY,SAAS,MAAM,UAAS,SAAS,KAAK,GAAG,OAAM,KACzE;AAAY,uBAAS,KAAK;mBAE1B;AAAY,sBAAQ,KAAK,WAAW,IAAI,eAAe,QAAO,MAAK,OAAM;;;;AAInE,YAAI,UAAU,OAAO,MAAM,QACjC;AAAQ,iBAAO,KAAK;eAEpB;AAAQ,gBAAM,KAAK,SAAS,IAAI,YAAY,QAAO,MAAK;;;;AAItD,YAAQ,QAAO,SAAC,GAAA;AAAA,aAAK,OAAK,KAAK;;AAC/B,UAAM,QAAO,SAAC,GAAA;AAAA,aAAK,OAAK,KAAK;;AAC7B,WAAO;;AAQT,YAAU,UAAU,aAAa,SAAS,OAAM,IAAI,OAAa;;;cAAN;AACzD,QAAI,UAAU,IAAI,QAAO;AACzB,SAAK,IAAI,aAAa,OAAM,IAAE,SAAG,OAAM,KAAQ;AAC7C,UAAI,CAAC,MAAK,UAAQ;AAAE;;AACpB;AACA,UAAI,WAAW;AACf,UAAI,iBAAgB,UAAU;AAC5B,YAAI,OAAM,MAAK,OAAO;AACtB,eAAO,SAAQ,MAAK,QAAQ,OAAM;AAC/B,UAAC,aAAa,YAAW,KAAK,KAAK;AACpC,iBAAM,OAAM,cAAc;;iBAEnB,OAAM;AACf,YAAI,MAAK,QAAQ,MAAK,QAAM;AAAE,qBAAW,CAAC;;aACrC;AACL,mBAAW,MAAK;;AAElB,UAAI,YAAY,SAAS,QAAQ;AAC/B,YAAI,OAAM,KAAK,IAAI,MAAM,MAAK,UAAU;AACxC,iBAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACxC,cAAI,QAAQ,SAAS,IAAI,UAAA;AACzB,mBAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,gBAAI,IAAI,QAAQ;AAChB,gBAAI,EAAE,QAAQ,QAAO,KAAK,MAAM,GAAG,QAAQ,GAAG,QAAM;AAAE,wBAAQ;;;AAEhE,cAAI,SAAO;AACT,oBAAM,KAAK;AACX,oBAAM,OAAO;iBACR;AACL,oBAAQ,KAAK,EAAA,OAAQ,MAAM,KAAK,IAAI,KAAK,QAAO,IAAI,MAAG,MAAE;;;;;AAKjE,YAAQ,QAAO,SAAC,GAAA;AAAA,aAAK,OAAK,KAAK,IAAI,eAAe,EAAE,MAAM,EAAE,IAAI,EAAE;;AAClE,WAAO;;AAQT,YAAU,UAAU,oBAAoB,SAAS,KAAK,YAAY,OAAiC;;cAAzB,WAAW;AACnF,QAAI,QAAO,KAAK,IAAI,OAAO;AAC3B,QAAI,WAAW,IAAI,MAAM,MAAM;AAC/B,aAAS,IAAI,GAAG,IAAI,MAAK,YAAY,KAAK;AACxC,UAAI,SAAQ,MAAK,MAAM,IAAI,OAAM,MAAM,OAAM;AAC7C,UAAI,UAAU,MAAM,UAAU,OAAM,MAAM,OAAM;AAChD,UAAI,CAAC,SAAS;AACZ,iBAAS,KAAK,IAAI,YAAY,KAAK,MAAK,MAAM;aACzC;AACL,gBAAQ;AACR,iBAAS,IAAI,GAAG,IAAI,OAAM,MAAM,QAAQ,KAAG;AAAE,cAAI,CAAC,WAAW,eAAe,OAAM,MAAM,GAAG,OACjG;AAAQ,iBAAK,KAAK,IAAI,eAAe,KAAK,MAAK,OAAM,MAAM;;;;AAEvD,YAAM;;AAER,QAAI,CAAC,MAAM,UAAU;AACnB,UAAI,OAAO,MAAM,WAAW,SAAS,OAAO;AAC5C,WAAK,QAAQ,KAAK,KAAK,IAAI,MAAM,MAAM,GAAG;;AAE5C,aAAS,MAAI,SAAS,SAAS,GAAG,OAAK,GAAG,OAAG;AAAE,WAAK,KAAK,SAAS;;AAClE,WAAO;;AC/FF,uBAAqB,MAAK,OAAM,IAAW,QAAqB;;WAA3B;;eAAc,MAAM;AAC9D,QAAI,SAAQ,MAAM,CAAC,OAAM,MAAI;AAAE,aAAO;;AAEtC,QAAI,QAAQ,KAAI,QAAQ,QAAO,MAAM,KAAI,QAAQ;AAEjD,QAAI,cAAc,OAAO,KAAK,SAAM;AAAE,aAAO,IAAI,YAAY,OAAM,IAAI;;AACvE,WAAO,IAAI,OAAO,OAAO,KAAK,QAAO;;AAMvC,YAAU,UAAU,UAAU,SAAS,OAAM,IAAW,QAAqB;;WAA3B;;eAAc,MAAM;AACpE,QAAI,QAAO,YAAY,KAAK,KAAK,OAAM,IAAI;AAC3C,QAAI,OAAI;AAAE,WAAK,KAAK;;AACpB,WAAO;;AAMT,YAAU,UAAU,cAAc,SAAS,OAAM,IAAI,UAAS;AAC5D,WAAO,KAAK,QAAQ,OAAM,IAAI,IAAI,MAAM,SAAS,KAAK,WAAU,GAAG;;AAKrE,YAAU,UAAU,SAAS,SAAS,OAAM,IAAI;AAC9C,WAAO,KAAK,QAAQ,OAAM,IAAI,MAAM;;AAKtC,YAAU,UAAU,SAAS,SAAS,KAAK,UAAS;AAClD,WAAO,KAAK,YAAY,KAAK,KAAK;;AAGpC,yBAAuB,OAAO,KAAK,QAAO;AACxC,WAAO,CAAC,OAAM,aAAa,CAAC,OAAM,WAAW,MAAM,WAAW,IAAI,WAChE,MAAM,OAAO,WAAW,MAAM,SAAS,IAAI,SAAS,OAAM;;AAuB9D,MAAM,SACJ,iBAAY,OAAO,KAAK,QAAO;AAC7B,SAAK,MAAM;AACX,SAAK,QAAQ;AACb,SAAK,WAAW;AAEhB,SAAK,WAAW;AAChB,aAAS,IAAI,GAAG,KAAK,MAAM,OAAO,KAAK;AACrC,UAAI,QAAO,MAAM,KAAK;AACtB,WAAK,SAAS,KAAK;QACjB,MAAM,MAAK;QACX,OAAO,MAAK,eAAe,MAAM,WAAW;;;AAIhD,SAAK,SAAS,SAAS;AACvB,aAAS,MAAI,MAAM,OAAO,MAAI,GAAG,OACrC;AAAM,WAAK,SAAS,SAAS,KAAK,MAAM,KAAK,KAAG,KAAK,KAAK;;;;AAGxD,wBAAI,MAAA,MAAA,WAAQ;AAAE,WAAO,KAAK,SAAS,SAAS;;mBAE5C,MAAA,eAAM;AAIJ,WAAO,KAAK,SAAS,MAAM;AACzB,UAAI,OAAM,KAAK;AACf,UAAI,MAAG;AAAE,aAAK,WAAW;aAC/B;AAAW,aAAK,cAAc,KAAK;;;AAO/B,QAAI,aAAa,KAAK,kBAAkB,aAAa,KAAK,OAAO,OAAO,KAAK,QAAQ,KAAK,MAAM;AAChG,QAAI,QAAQ,KAAK,OAAO,MAAM,KAAK,MAAM,aAAa,IAAI,KAAK,MAAM,MAAM,IAAI,QAAQ;AACvF,QAAI,CAAC,KAAG;AAAE,aAAO;;AAGjB,QAAI,WAAU,KAAK,QAAQ,YAAY,MAAM,OAAO,UAAU,IAAI;AAClE,WAAO,aAAa,WAAW,SAAQ,cAAc,GAAG;AACtD,iBAAU,SAAQ,WAAW;AAC7B;AAAa;;AAEf,QAAI,SAAQ,IAAI,MAAM,UAAS,WAAW;AAC1C,QAAI,aAAa,IACrB;AAAM,aAAO,IAAI,kBAAkB,MAAM,KAAK,YAAY,KAAK,IAAI,KAAK,KAAK,IAAI,OAAO,QAAO;;AAC3F,QAAI,OAAM,QAAQ,MAAM,OAAO,KAAK,IAAI,KAC5C;AAAM,aAAO,IAAI,YAAY,MAAM,KAAK,IAAI,KAAK;;;mBAM/C,eAAA,wBAAe;AAGb,aAAS,OAAO,GAAG,QAAQ,GAAG,QAAQ;AACpC,eAAS,aAAa,KAAK,SAAS,WAAW,cAAc,GAAG,cAAc;AAC5E,YAAI,WAAA,QAAU,SAAA;AACd,YAAI,YAAY;AACd,mBAAS,UAAU,KAAK,SAAS,SAAS,aAAa,GAAG;AAC1D,qBAAW,OAAO;eACb;AACL,qBAAW,KAAK,SAAS;;AAE3B,YAAI,QAAQ,SAAS;AACrB,iBAAS,gBAAgB,KAAK,OAAO,iBAAiB,GAAG,iBAAiB;AAClF,cAAA,MAA8B,KAAK,SAAS;AAA7B,cAAA,OAAA,IAAA;AAAM,cAAA,QAAA,IAAA;AAAqC,cAAE,OAAA,QAAM,SAAA;AAIxD,cAAI,QAAQ,KAAM,SAAQ,MAAM,UAAU,MAAM,SAAU,UAAS,MAAM,WAAW,SAAS,KAAK,QAAQ,UACtF,KAAK,kBAAkB,OAAO,QAC5D;AAAY,mBAAO,EAAA,YAAW,eAAe,QAAQ;qBAGlC,QAAQ,KAAK,SAAU,QAAO,MAAM,aAAa,MAAM,QAC1E;AAAY,mBAAO,EAAA,YAAW,eAAe,QAAQ;;AAG3C,cAAI,UAAU,MAAM,UAAU,OAAO,OAAK;AAAE;;;;;;mBAMpD,WAAA,oBAAW;AACb,QAAA,MAAwC,KAAK;AAApC,QAAA,WAAA,IAAA;AAAS,QAAA,YAAA,IAAA;AAAW,QAAA,UAAA,IAAA;AACzB,QAAI,QAAQ,UAAU,UAAS;AAC/B,QAAI,CAAC,MAAM,cAAc,MAAM,WAAW,QAAM;AAAE,aAAO;;AACzD,SAAK,WAAW,IAAI,MAAM,UAAS,YAAY,GACrB,KAAK,IAAI,SAAS,MAAM,OAAO,aAAa,SAAQ,OAAO,UAAU,YAAY,IAAI;AAC/G,WAAO;;mBAGT,WAAA,oBAAW;AACb,QAAA,MAAwC,KAAK;AAApC,QAAA,WAAA,IAAA;AAAS,QAAA,YAAA,IAAA;AAAW,QAAA,UAAA,IAAA;AACzB,QAAI,QAAQ,UAAU,UAAS;AAC/B,QAAI,MAAM,cAAc,KAAK,YAAY,GAAG;AAC1C,UAAI,YAAY,SAAQ,OAAO,aAAa,YAAY,MAAM;AAC9D,WAAK,WAAW,IAAI,MAAM,iBAAiB,UAAS,YAAY,GAAG,IAAI,YAAY,GACzD,YAAY,YAAY,IAAI;WACjD;AACL,WAAK,WAAW,IAAI,MAAM,iBAAiB,UAAS,WAAW,IAAI,WAAW;;;mBAQlF,aAAA,oBAAA,KAA8D;;;;;;AAC5D,WAAO,KAAK,QAAQ,eAAa;AAAE,WAAK;;AACxC,QAAI,MAAI;AAAE,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAG;AAAE,aAAK,iBAAiB,KAAK;;;AAE3E,QAAI,SAAQ,KAAK,UAAU,WAAW,SAAS,OAAO,UAAU,OAAM;AACtE,QAAI,YAAY,OAAM,YAAY;AAClC,QAAI,QAAQ,GAAG,OAAM;AACzB,QAAA,QAAwB,KAAK,SAAS;AAA7B,QAAA,QAAA,MAAA;AAAO,QAAA,OAAA,MAAA;AACZ,QAAI,QAAQ;AACV,eAAS,MAAI,GAAG,MAAI,OAAO,YAAY,OAAG;AAAE,aAAI,KAAK,OAAO,MAAM;;AAClE,cAAQ,MAAM,cAAc;;AAK9B,QAAI,eAAgB,SAAS,OAAO,aAAe,QAAM,QAAQ,OAAO,OAAM;AAG9E,WAAO,QAAQ,SAAS,YAAY;AAClC,UAAI,OAAO,SAAS,MAAM,QAAQ,WAAU,MAAM,UAAU,KAAK;AACjE,UAAI,CAAC,UAAO;AAAE;;AACd;AACA,UAAI,QAAQ,KAAK,aAAa,KAAK,KAAK,QAAQ,MAAM;AACpD,gBAAQ;AACR,aAAI,KAAK,eAAe,KAAK,KAAK,KAAK,aAAa,KAAK,SAAS,SAAS,IAAI,YAAY,GACnE,SAAS,SAAS,aAAa,eAAe;;;AAG1E,QAAI,QAAQ,SAAS,SAAS;AAC9B,QAAI,CAAC,OAAK;AAAE,qBAAe;;AAE3B,SAAK,SAAS,cAAc,KAAK,QAAQ,eAAe,SAAS,KAAK;AACtE,SAAK,SAAS,eAAe,QAAQ;AAIrC,QAAI,SAAS,eAAe,KAAK,UAAU,OAAO,QAAQ,KAAK,SAAS,KAAK,OAAO,QAAQ,KAAK,SAAS,SAAS,GACvH;AAAM,WAAK;;AAGP,aAAS,MAAI,GAAG,MAAM,UAAU,MAAI,cAAc,OAAK;AACrD,UAAI,QAAO,IAAI;AACf,WAAK,SAAS,KAAK,EAAC,MAAM,MAAK,MAAM,OAAO,MAAK,eAAe,MAAK;AACrE,YAAM,MAAK;;AAMb,SAAK,WAAW,CAAC,QAAQ,IAAI,MAAM,iBAAiB,OAAM,SAAS,YAAY,QAAQ,OAAM,WAAW,OAAM,WAC1G,cAAc,IAAI,MAAM,QACxB,IAAI,MAAM,iBAAiB,OAAM,SAAS,aAAa,GAAG,IAChD,aAAa,GAAG,eAAe,IAAI,OAAM,UAAU,aAAa;;mBAGhF,iBAAA,0BAAiB;AACf,QAAI,CAAC,KAAK,IAAI,OAAO,eAAe,KAAK,IAAI,SAAS,KAAK,IAAI,KAAG;AAAE,aAAO;;AAC3E,QAAI,MAAM,KAAK,SAAS,KAAK,QAAQ;AACrC,QAAI,CAAC,IAAI,KAAK,eAAe,CAAC,iBAAiB,KAAK,KAAK,KAAK,IAAI,OAAO,IAAI,MAAM,IAAI,OAAO,UACzF,KAAK,IAAI,SAAS,KAAK,SAAU,SAAQ,KAAK,eAAe,KAAK,SAAS,MAAM,SAAS,KAAK,OAAM;AAAE,aAAO;;AAEvH,QAAA,MAAkB,KAAK;AAAd,QAAA,QAAA,IAAA;AAAiB,QAAE,SAAQ,KAAK,IAAI,MAAM;AAC/C,WAAO,QAAQ,KAAK,UAAS,KAAK,IAAI,IAAI,EAAE,QAAM;AAAE,QAAE;;AACtD,WAAO;;mBAGT,iBAAA,wBAAe,KAAK;AAClB;AAAM,eAAS,IAAI,KAAK,IAAI,KAAK,OAAO,IAAI,QAAQ,KAAK,GAAG,KAAK;AACrE,YAAA,MAA0B,KAAK,SAAS;AAA7B,YAAA,QAAA,IAAA;AAAO,YAAA,OAAA,IAAA;AACZ,YAAI,YAAY,IAAI,IAAI,SAAS,IAAI,IAAI,IAAI,MAAM,IAAI,MAAO,KAAI,QAAS,KAAI;AAC/E,YAAI,OAAM,iBAAiB,KAAK,GAAG,MAAM,OAAO;AAChD,YAAI,CAAC,MAAG;AAAE;;AACV,iBAAS,IAAI,IAAI,GAAG,KAAK,GAAG,KAAK;AACvC,cAAA,QAA4B,KAAK,SAAS;AAA7B,cAAA,UAAA,MAAA;AAAO,cAAA,SAAA,MAAA;AACZ,cAAI,WAAU,iBAAiB,KAAK,GAAG,QAAM,SAAO;AACpD,cAAI,CAAC,YAAW,SAAQ,YAAU;AAAE;;;AAEtC,eAAO,EAAC,OAAO,GAAC,KAAE,MAAK,MAAM,YAAY,IAAI,IAAI,QAAQ,IAAI,MAAM,IAAI,MAAM;;;mBAIjF,QAAA,gBAAM,KAAK;AACT,QAAI,SAAQ,KAAK,eAAe;AAChC,QAAI,CAAC,QAAK;AAAE,aAAO;;AAEnB,WAAO,KAAK,QAAQ,OAAM,OAAK;AAAE,WAAK;;AACtC,QAAI,OAAM,IAAI,YAAU;AAAE,WAAK,SAAS,cAAc,KAAK,QAAQ,OAAM,OAAO,OAAM;;AACtF,UAAM,OAAM;AACZ,aAAS,IAAI,OAAM,QAAQ,GAAG,KAAK,IAAI,OAAO,KAAK;AACjD,UAAI,QAAO,IAAI,KAAK,IAAI,OAAM,MAAK,KAAK,aAAa,WAAW,MAAK,SAAS,MAAM,IAAI,MAAM;AAC9F,WAAK,iBAAiB,MAAK,MAAM,MAAK,OAAO;;AAE/C,WAAO;;mBAGT,mBAAA,0BAAiB,MAAM,OAAO,UAAS;AACrC,QAAI,MAAM,KAAK,SAAS,KAAK;AAC7B,QAAI,QAAQ,IAAI,MAAM,UAAU;AAChC,SAAK,SAAS,cAAc,KAAK,QAAQ,KAAK,OAAO,SAAS,KAAK,KAAK,OAAO,OAAO;AACtF,SAAK,SAAS,KAAK,EAAA,MAAO,OAAO,KAAK;;mBAGxC,oBAAA,6BAAoB;AAClB,QAAI,OAAO,KAAK,SAAS;AACzB,QAAI,OAAM,KAAK,MAAM,WAAW,SAAS,OAAO;AAChD,QAAI,KAAI,YAAU;AAAE,WAAK,SAAS,cAAc,KAAK,QAAQ,KAAK,SAAS,QAAQ;;;;AAIvF,4BAA0B,UAAU,OAAO,OAAO;AAChD,QAAI,SAAS,GAAC;AAAE,aAAO,SAAS,WAAW;;AAC3C,WAAO,SAAS,aAAa,GAAG,SAAS,WAAW,KAAK,iBAAiB,SAAS,WAAW,SAAS,QAAQ,GAAG;;AAGpH,yBAAuB,UAAU,OAAO,UAAS;AAC/C,QAAI,SAAS,GAAC;AAAE,aAAO,SAAS,OAAO;;AACvC,WAAO,SAAS,aAAa,SAAS,aAAa,GACtB,SAAS,UAAU,KAAK,cAAc,SAAS,UAAU,SAAS,QAAQ,GAAG;;AAG5G,qBAAmB,UAAU,OAAO;AAClC,aAAS,IAAI,GAAG,IAAI,OAAO,KAAG;AAAE,iBAAW,SAAS,WAAW;;AAC/D,WAAO;;AAGT,0BAAwB,OAAM,WAAW,SAAS;AAChD,QAAI,aAAa,GAAC;AAAE,aAAO;;AAC3B,QAAI,OAAO,MAAK;AAChB,QAAI,YAAY,GAClB;AAAI,aAAO,KAAK,aAAa,GAAG,eAAe,KAAK,YAAY,YAAY,GAAG,KAAK,cAAc,IAAI,UAAU,IAAI;;AAClH,QAAI,YAAY,GAAG;AACjB,aAAO,MAAK,KAAK,aAAa,WAAW,MAAM,OAAO;AACtD,UAAI,WAAW,GAAC;AAAE,eAAO,KAAK,OAAO,MAAK,KAAK,aAAa,cAAc,MAAM,WAAW,SAAS,OAAO;;;AAE7G,WAAO,MAAK,KAAK;;AAGnB,4BAA0B,KAAK,OAAO,MAAM,OAAO,MAAM;AACvD,QAAI,QAAO,IAAI,KAAK,QAAQ,SAAQ,OAAO,IAAI,WAAW,SAAS,IAAI,MAAM;AAC7E,QAAI,UAAS,MAAK,cAAc,CAAC,KAAK,kBAAkB,MAAK,OAAK;AAAE,aAAO;;AAC3E,QAAI,OAAM,MAAM,WAAW,MAAK,SAAS,MAAM;AAC/C,WAAO,QAAO,CAAC,aAAa,MAAM,MAAK,SAAS,UAAS,OAAM;;AAGjE,wBAAsB,MAAM,UAAU,QAAO;AAC3C,aAAS,IAAI,QAAO,IAAI,SAAS,YAAY,KAC/C;AAAI,UAAI,CAAC,KAAK,YAAY,SAAS,MAAM,GAAG,QAAM;AAAE,eAAO;;;AACzD,WAAO;;AAmBT,YAAU,UAAU,eAAe,SAAS,OAAM,IAAI,QAAO;AAC3D,QAAI,CAAC,OAAM,MAAI;AAAE,aAAO,KAAK,YAAY,OAAM;;AAE/C,QAAI,QAAQ,KAAK,IAAI,QAAQ,QAAO,MAAM,KAAK,IAAI,QAAQ;AAC3D,QAAI,cAAc,OAAO,KAAK,SAChC;AAAI,aAAO,KAAK,KAAK,IAAI,YAAY,OAAM,IAAI;;AAE7C,QAAI,eAAe,cAAc,OAAO,KAAK,IAAI,QAAQ;AAEzD,QAAI,aAAa,aAAa,SAAS,MAAM,GAAC;AAAE,mBAAa;;AAG7D,QAAI,kBAAkB,CAAE,OAAM,QAAQ;AACtC,iBAAa,QAAQ;AAKrB,aAAS,IAAI,MAAM,OAAO,MAAM,MAAM,MAAM,GAAG,IAAI,GAAG,KAAK,OAAO;AAChE,UAAI,OAAO,MAAM,KAAK,GAAG,KAAK;AAC9B,UAAI,KAAK,YAAY,KAAK,WAAS;AAAE;;AACrC,UAAI,aAAa,QAAQ,KAAK,IAAE;AAAE,0BAAkB;iBAC3C,MAAM,OAAO,MAAM,KAAG;AAAE,qBAAa,OAAO,GAAG,GAAG,CAAC;;;AAI9D,QAAI,uBAAuB,aAAa,QAAQ;AAEhD,QAAI,YAAY,IAAI,iBAAiB,OAAM;AAC3C,aAAS,WAAU,OAAM,SAAS,IAAI,KAAI,KAAK;AAC7C,UAAI,QAAO,SAAQ;AACnB,gBAAU,KAAK;AACf,UAAI,KAAK,OAAM,WAAS;AAAE;;AAC1B,iBAAU,MAAK;;AAIjB,QAAI,iBAAiB,KAAK,UAAU,iBAAiB,GAAG,KAAK,KAAK,YAC9D,MAAM,KAAK,sBAAsB,QAAQ,UAAU,iBAAiB,GAAG,MAC7E;AAAI,wBAAkB;eACX,kBAAkB,KAAK,UAAU,iBAAiB,GAAG,eAAe,UAAU,iBAAiB,GAAG,KAAK,KAAK,YAC5G,MAAM,KAAK,sBAAsB,QAAQ,UAAU,iBAAiB,GAAG,MAClF;AAAI,wBAAkB;;AAEpB,aAAS,IAAI,OAAM,WAAW,KAAK,GAAG,KAAK;AACzC,UAAI,YAAa,KAAI,iBAAiB,KAAM,QAAM,YAAY;AAC9D,UAAI,SAAS,UAAU;AACvB,UAAI,CAAC,QAAM;AAAE;;AACb,eAAS,MAAI,GAAG,MAAI,aAAa,QAAQ,OAAK;AAG5C,YAAI,cAAc,aAAc,OAAI,wBAAwB,aAAa,SAAS,SAAS;AAC3F,YAAI,cAAc,GAAG;AAAE,mBAAS;AAAO,wBAAc,CAAC;;AACtD,YAAI,SAAS,MAAM,KAAK,cAAc,IAAI,SAAQ,MAAM,MAAM,cAAc;AAC5E,YAAI,OAAO,eAAe,QAAO,QAAO,OAAO,MAAM,OAAO,QAClE;AAAQ,iBAAO,KAAK,QAAQ,MAAM,OAAO,cAAc,SAAS,IAAI,MAAM,eAAe,IAC7D,IAAI,MAAM,cAAc,OAAM,SAAS,GAAG,OAAM,WAAW,YACjD,WAAW,OAAM;;;;AAIrD,QAAI,aAAa,KAAK,MAAM;AAC5B,aAAS,MAAI,aAAa,SAAS,GAAG,OAAK,GAAG,OAAK;AACjD,WAAK,QAAQ,OAAM,IAAI;AACvB,UAAI,KAAK,MAAM,SAAS,YAAU;AAAE;;AACpC,UAAI,QAAQ,aAAa;AACzB,UAAI,QAAQ,GAAC;AAAE;;AACf,cAAO,MAAM,OAAO;AAAQ,WAAK,IAAI,MAAM;;AAE7C,WAAO;;AAGT,yBAAuB,UAAU,OAAO,SAAS,SAAS,QAAQ;AAChE,QAAI,QAAQ,SAAS;AACnB,UAAI,QAAQ,SAAS;AACrB,iBAAW,SAAS,aAAa,GAAG,MAAM,KAAK,cAAc,MAAM,SAAS,QAAQ,GAAG,SAAS,SAAS;;AAE3G,QAAI,QAAQ,SAAS;AACnB,UAAI,QAAQ,OAAO,eAAe;AAClC,UAAI,SAAQ,MAAM,WAAW,UAAU,OAAO;AAC9C,iBAAW,OAAM,OAAO,MAAM,cAAc,QAAO,WAAW,SAAS,OAAO;;AAEhF,WAAO;;AAWT,YAAU,UAAU,mBAAmB,SAAS,OAAM,IAAI,OAAM;AAC9D,QAAI,CAAC,MAAK,YAAY,SAAQ,MAAM,KAAK,IAAI,QAAQ,OAAM,OAAO,QAAQ,MAAM;AAC9E,UAAI,QAAQ,YAAY,KAAK,KAAK,OAAM,MAAK;AAC7C,UAAI,SAAS,MAAI;AAAE,gBAAO,KAAK;;;AAEjC,WAAO,KAAK,aAAa,OAAM,IAAI,IAAI,MAAM,SAAS,KAAK,QAAO,GAAG;;AAMvE,YAAU,UAAU,cAAc,SAAS,OAAM,IAAI;AACnD,QAAI,QAAQ,KAAK,IAAI,QAAQ,QAAO,MAAM,KAAK,IAAI,QAAQ;AAC3D,QAAI,UAAU,cAAc,OAAO;AACnC,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,UAAI,QAAQ,QAAQ,IAAI,OAAO,KAAK,QAAQ,SAAS;AACrD,UAAK,QAAQ,SAAS,KAAM,MAAM,KAAK,OAAO,KAAK,aAAa,UACpE;AAAM,eAAO,KAAK,OAAO,MAAM,MAAM,QAAQ,IAAI,IAAI;;AACjD,UAAI,QAAQ,KAAM,SAAQ,MAAM,KAAK,QAAQ,GAAG,WAAW,MAAM,MAAM,QAAQ,IAAI,IAAI,WAAW,QAAQ,MAC9G;AAAM,eAAO,KAAK,OAAO,MAAM,OAAO,QAAQ,IAAI,MAAM;;;AAEtD,aAAS,IAAI,GAAG,KAAK,MAAM,SAAS,KAAK,IAAI,OAAO,KAAK;AACvD,UAAI,QAAO,MAAM,MAAM,MAAM,MAAM,QAAQ,KAAK,KAAK,MAAM,IAAI,MAAM,IAAI,IAAI,KAAK,MAAM,IAAI,QAAQ,GACxG;AAAM,eAAO,KAAK,OAAO,MAAM,OAAO,IAAI;;;AAExC,WAAO,KAAK,OAAO,OAAM;;AAM3B,yBAAuB,OAAO,KAAK;AACjC,QAAI,UAAS,IAAI,WAAW,KAAK,IAAI,MAAM,OAAO,IAAI;AACtD,aAAS,IAAI,UAAU,KAAK,GAAG,KAAK;AAClC,UAAI,SAAQ,MAAM,MAAM;AACxB,UAAI,SAAQ,MAAM,MAAO,OAAM,QAAQ,MACnC,IAAI,IAAI,KAAK,IAAI,MAAO,KAAI,QAAQ,MACpC,MAAM,KAAK,GAAG,KAAK,KAAK,aACxB,IAAI,KAAK,GAAG,KAAK,KAAK,WAAS;AAAE;;AACrC,UAAI,UAAS,IAAI,MAAM,MAClB,KAAK,MAAM,SAAS,KAAK,IAAI,SAAS,MAAM,OAAO,iBAAiB,IAAI,OAAO,iBAC/E,KAAK,IAAI,MAAM,IAAI,MAAM,SAAQ,GAC1C;AAAM,gBAAO,KAAK;;;AAEhB,WAAO;;;;ACveT,MAAM,cAAc,OAAO,OAAO;MAIrB,YAKX,oBAAY,SAAS,OAAO,QAAQ;AAGlC,SAAK,SAAS,UAAU,CAAC,IAAI,eAAe,QAAQ,IAAI,QAAQ,QAAQ,IAAI;AAI5E,SAAK,UAAU;AAIf,SAAK,QAAQ;;;AAKf,sBAAI,OAAA,MAAA,WAAS;AAAE,WAAO,KAAK,QAAQ;;AAInC,sBAAI,KAAA,MAAA,WAAO;AAAE,WAAO,KAAK,MAAM;;AAI/B,sBAAI,KAAA,MAAA,WAAO;AAAE,WAAO,KAAK,MAAM;;AAI/B,sBAAI,GAAA,MAAA,WAAK;AAAE,WAAO,KAAK,IAAI;;AAI3B,sBAAI,MAAA,MAAA,WAAQ;AACV,WAAO,KAAK,OAAO,GAAG;;AAKxB,sBAAI,IAAA,MAAA,WAAM;AACR,WAAO,KAAK,OAAO,GAAG;;AAKxB,sBAAI,MAAA,MAAA,WAAQ;AACV,QAAI,SAAS,KAAK;AAClB,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KACvC;AAAM,UAAI,OAAO,GAAG,MAAM,OAAO,OAAO,GAAG,IAAI,KAAG;AAAE,eAAO;;;AACvD,WAAO;;sBAYT,UAAA,mBAAU;AACR,WAAO,KAAK,MAAM,KAAK,GAAG,MAAM,KAAK,MAAM,KAAK,IAAI;;sBAMtD,UAAA,kBAAQ,IAAI,UAAuB;;iBAAb,MAAM;AAI1B,QAAI,WAAW,SAAQ,QAAQ,WAAW,aAAa;AACvD,aAAS,IAAI,GAAG,IAAI,SAAQ,SAAS,KAAK;AACxC,mBAAa;AACb,iBAAW,SAAS;;AAGtB,QAAI,UAAU,GAAG,MAAM,QAAQ,SAAS,KAAK;AAC7C,aAAS,MAAI,GAAG,MAAI,OAAO,QAAQ,OAAK;AAC5C,UAAA,MAAyB,OAAO;AAArB,UAAA,QAAA,IAAA;AAAO,UAAA,MAAA,IAAA;AAAgB,UAAE,UAAU,GAAG,QAAQ,MAAM;AACzD,SAAG,aAAa,QAAQ,IAAI,MAAM,MAAM,QAAQ,IAAI,IAAI,MAAM,MAAI,MAAM,QAAQ;AAChF,UAAI,OAAK,GACf;AAAQ,gCAAwB,IAAI,SAAU,YAAW,SAAS,WAAW,cAAc,WAAW,eAAe,KAAK;;;;sBAOxH,cAAA,qBAAY,IAAI,OAAM;AACpB,QAAI,UAAU,GAAG,MAAM,QAAQ,SAAS,KAAK;AAC7C,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AAC5C,UAAA,MAAyB,OAAO;AAArB,UAAA,QAAA,IAAA;AAAO,UAAA,MAAA,IAAA;AAAgB,UAAE,UAAU,GAAG,QAAQ,MAAM;AACzD,UAAI,QAAO,QAAQ,IAAI,MAAM,MAAM,KAAK,QAAQ,IAAI,IAAI;AACxD,UAAI,GAAG;AACL,WAAG,YAAY,OAAM;aAChB;AACL,WAAG,iBAAiB,OAAM,IAAI;AAC9B,gCAAwB,IAAI,SAAS,MAAK,WAAW,KAAK;;;;AAiBhE,YAAO,WAAA,kBAAS,MAAM,KAAK,UAAU;AACnC,QAAI,QAAQ,KAAK,OAAO,gBAAgB,IAAI,cAAc,QACpD,gBAAgB,KAAK,KAAK,IAAI,KAAK,QAAQ,KAAK,KAAK,KAAK,SAAS,KAAK;AAC9E,QAAI,OAAK;AAAE,aAAO;;AAElB,aAAS,QAAQ,KAAK,QAAQ,GAAG,SAAS,GAAG,SAAS;AACpD,UAAI,SAAQ,MAAM,IACZ,gBAAgB,KAAK,KAAK,IAAI,KAAK,KAAK,QAAQ,KAAK,OAAO,QAAQ,IAAI,KAAK,MAAM,QAAQ,KAAK,YAChG,gBAAgB,KAAK,KAAK,IAAI,KAAK,KAAK,QAAQ,KAAK,MAAM,QAAQ,IAAI,KAAK,MAAM,SAAS,GAAG,KAAK;AACzG,UAAI,QAAK;AAAE,eAAO;;;;AAQtB,YAAO,OAAA,cAAK,MAAM,MAAU;;aAAH;AACvB,WAAO,KAAK,SAAS,MAAM,SAAS,KAAK,SAAS,MAAM,CAAC,SAAS,IAAI,aAAa,KAAK,KAAK;;AAQ/F,YAAO,UAAA,iBAAQ,MAAK;AAClB,WAAO,gBAAgB,MAAK,MAAK,GAAG,GAAG,MAAM,IAAI,aAAa;;AAMhE,YAAO,QAAA,eAAM,MAAK;AAChB,WAAO,gBAAgB,MAAK,MAAK,KAAI,QAAQ,MAAM,KAAI,YAAY,OAAO,IAAI,aAAa;;AAM7F,YAAO,WAAA,mBAAS,MAAK,MAAM;AACzB,QAAI,CAAC,QAAQ,CAAC,KAAK,MAAI;AAAE,YAAM,IAAI,WAAW;;AAC9C,QAAI,MAAM,YAAY,KAAK;AAC3B,QAAI,CAAC,KAAG;AAAE,YAAM,IAAI,WAAU,uBAAsB,KAAK,OAAI;;AAC7D,WAAO,IAAI,SAAS,MAAK;;AAQ3B,YAAO,SAAA,iBAAO,IAAI,gBAAgB;AAChC,QAAI,MAAM,aAAW;AAAE,YAAM,IAAI,WAAW,wCAAwC;;AACpF,gBAAY,MAAM;AAClB,mBAAe,UAAU,SAAS;AAClC,WAAO;;sBAWT,cAAA,uBAAc;AACZ,WAAO,cAAc,QAAQ,KAAK,SAAS,KAAK,OAAO;;;AAQ3D,YAAU,UAAU,UAAU;MAiBjB,iBAEX,yBAAY,OAAO,KAAK;AAGtB,SAAK,QAAQ;AAGb,SAAK,MAAM;;MAQF,gBAAa,yBAAA,YAAA;AAGxB,4BAAY,SAAS,OAAiB;;gBAAT;AAC3B,iBAAA,KAAK,MAAC,SAAS;;;;;;;AAMjB,0BAAI,QAAA,MAAA,WAAU;AAAE,aAAO,KAAK,QAAQ,OAAO,KAAK,MAAM,MAAM,KAAK,QAAQ;;AAE3E,mBAAA,UAAE,MAAA,eAAI,MAAK,SAAS;AAChB,UAAI,QAAQ,KAAI,QAAQ,QAAQ,IAAI,KAAK;AACzC,UAAI,CAAC,MAAM,OAAO,eAAa;AAAE,eAAO,WAAU,KAAK;;AACvD,UAAI,UAAU,KAAI,QAAQ,QAAQ,IAAI,KAAK;AAC3C,aAAO,IAAI,eAAc,QAAQ,OAAO,gBAAgB,UAAU,OAAO;;AAG7E,mBAAA,UAAE,UAAA,kBAAQ,IAAI,UAAuB;;mBAAb,MAAM;AAC1B,iBAAA,UAAM,QAAA,KAAO,MAAC,IAAI;AAClB,UAAI,YAAW,MAAM,OAAO;AAC1B,YAAI,SAAQ,KAAK,MAAM,YAAY,KAAK;AACxC,YAAI,QAAK;AAAE,aAAG,YAAY;;;;AAIhC,mBAAA,UAAE,KAAA,cAAG,OAAO;AACR,aAAO,iBAAiB,kBAAiB,MAAM,UAAU,KAAK,UAAU,MAAM,QAAQ,KAAK;;AAG/F,mBAAA,UAAE,cAAA,wBAAc;AACZ,aAAO,IAAI,aAAa,KAAK,QAAQ,KAAK;;AAG9C,mBAAA,UAAE,SAAA,mBAAS;AACP,aAAO,EAAC,MAAM,QAAQ,QAAQ,KAAK,QAAQ,MAAM,KAAK;;AAGxD,mBAAO,WAAA,mBAAS,MAAK,MAAM;AACzB,UAAI,OAAO,KAAK,UAAU,YAAY,OAAO,KAAK,QAAQ,UAC9D;AAAM,cAAM,IAAI,WAAW;;AACvB,aAAO,IAAI,eAAc,KAAI,QAAQ,KAAK,SAAS,KAAI,QAAQ,KAAK;;AAKtE,mBAAO,SAAA,iBAAO,MAAK,QAAQ,MAAe;;eAAR;AAChC,UAAI,UAAU,KAAI,QAAQ;AAC1B,aAAO,IAAI,KAAK,SAAS,QAAQ,SAAS,UAAU,KAAI,QAAQ;;AAUlE,mBAAO,UAAA,iBAAQ,SAAS,OAAO,MAAM;AACnC,UAAI,OAAO,QAAQ,MAAM,MAAM;AAC/B,UAAI,CAAC,QAAQ,MAAI;AAAE,eAAO,QAAQ,IAAI,IAAI;;AAC1C,UAAI,CAAC,MAAM,OAAO,eAAe;AAC/B,YAAI,SAAQ,WAAU,SAAS,OAAO,MAAM,SAAS,WAAU,SAAS,OAAO,CAAC,MAAM;AACtF,YAAI,QAAK;AAAE,kBAAQ,OAAM;eAC/B;AAAW,iBAAO,WAAU,KAAK,OAAO;;;AAEpC,UAAI,CAAC,QAAQ,OAAO,eAAe;AACjC,YAAI,QAAQ,GAAG;AACb,oBAAU;eACL;AACL,oBAAW,YAAU,SAAS,SAAS,CAAC,MAAM,SAAS,WAAU,SAAS,SAAS,MAAM,OAAO;AAChG,cAAK,QAAQ,MAAM,MAAM,OAAS,OAAO,GAAE;AAAE,sBAAU;;;;AAG3D,aAAO,IAAI,eAAc,SAAS;;;;IA3EH;AA+EnC,YAAU,OAAO,QAAQ;AAEzB,MAAM,eACJ,uBAAY,QAAQ,MAAM;AACxB,SAAK,SAAS;AACd,SAAK,OAAO;;yBAEd,MAAA,cAAI,SAAS;AACX,WAAO,IAAI,aAAa,QAAQ,IAAI,KAAK,SAAS,QAAQ,IAAI,KAAK;;yBAErE,UAAA,kBAAQ,MAAK;AACX,WAAO,cAAc,QAAQ,KAAI,QAAQ,KAAK,SAAS,KAAI,QAAQ,KAAK;;MAS/D,gBAAa,yBAAA,YAAA;AAIxB,4BAAY,MAAM;AAChB,UAAI,QAAO,KAAK;AAChB,UAAI,OAAO,KAAK,KAAK,GAAG,QAAQ,KAAK,MAAM,MAAK;AAChD,iBAAA,KAAK,MAAC,MAAM;AAEZ,WAAK,OAAO;;;;;;AAGhB,mBAAA,UAAE,MAAA,eAAI,MAAK,SAAS;AACpB,UAAA,MAAyB,QAAQ,UAAU,KAAK;AAAvC,UAAA,UAAA,IAAA;AAAS,UAAA,MAAA,IAAA;AACd,UAAI,OAAO,KAAI,QAAQ;AACvB,UAAI,SAAO;AAAE,eAAO,WAAU,KAAK;;AACnC,aAAO,IAAI,eAAc;;AAG7B,mBAAA,UAAE,UAAA,oBAAU;AACR,aAAO,IAAI,MAAM,SAAS,KAAK,KAAK,OAAO,GAAG;;AAGlD,mBAAA,UAAE,KAAA,cAAG,OAAO;AACR,aAAO,iBAAiB,kBAAiB,MAAM,UAAU,KAAK;;AAGlE,mBAAA,UAAE,SAAA,mBAAS;AACP,aAAO,EAAC,MAAM,QAAQ,QAAQ,KAAK;;AAGvC,mBAAA,UAAE,cAAA,wBAAc;AAAE,aAAO,IAAI,aAAa,KAAK;;AAE7C,mBAAO,WAAA,mBAAS,MAAK,MAAM;AACzB,UAAI,OAAO,KAAK,UAAU,UAC9B;AAAM,cAAM,IAAI,WAAW;;AACvB,aAAO,IAAI,eAAc,KAAI,QAAQ,KAAK;;AAK5C,mBAAO,SAAA,iBAAO,MAAK,OAAM;AACvB,aAAO,IAAI,KAAK,KAAI,QAAQ;;AAM9B,mBAAO,eAAA,sBAAa,OAAM;AACxB,aAAO,CAAC,MAAK,UAAU,MAAK,KAAK,KAAK,eAAe;;;IAjDtB;AAqDnC,gBAAc,UAAU,UAAU;AAElC,YAAU,OAAO,QAAQ;AAEzB,MAAM,eACJ,uBAAY,QAAQ;AAClB,SAAK,SAAS;;yBAEhB,MAAA,cAAI,SAAS;AACf,QAAA,MAAyB,QAAQ,UAAU,KAAK;AAAvC,QAAA,UAAA,IAAA;AAAS,QAAA,MAAA,IAAA;AACd,WAAO,UAAU,IAAI,aAAa,KAAK,OAAO,IAAI,aAAa;;yBAEjE,UAAA,kBAAQ,MAAK;AACX,QAAI,OAAO,KAAI,QAAQ,KAAK,SAAS,QAAO,KAAK;AACjD,QAAI,SAAQ,cAAc,aAAa,QAAK;AAAE,aAAO,IAAI,cAAc;;AACvE,WAAO,UAAU,KAAK;;MAQb,eAAY,yBAAA,YAAA;AAGvB,2BAAY,MAAK;AACf,iBAAA,KAAK,MAAC,KAAI,QAAQ,IAAI,KAAI,QAAQ,KAAI,QAAQ;;;;;;AAGlD,kBAAA,UAAE,UAAA,kBAAQ,IAAI,UAAuB;;mBAAb,MAAM;AAC1B,UAAI,YAAW,MAAM,OAAO;AAC1B,WAAG,OAAO,GAAG,GAAG,IAAI,QAAQ;AAC5B,YAAI,MAAM,WAAU,QAAQ,GAAG;AAC/B,YAAI,CAAC,IAAI,GAAG,GAAG,YAAU;AAAE,aAAG,aAAa;;aACtC;AACL,mBAAA,UAAM,QAAA,KAAO,MAAC,IAAI;;;AAIxB,kBAAA,UAAE,SAAA,mBAAS;AAAE,aAAO,EAAC,MAAM;;AAEzB,kBAAO,WAAA,mBAAS,MAAK;AAAE,aAAO,IAAI,cAAa;;AAEjD,kBAAA,UAAE,MAAA,eAAI,MAAK;AAAE,aAAO,IAAI,cAAa;;AAErC,kBAAA,UAAE,KAAA,cAAG,OAAO;AAAE,aAAO,iBAAiB;;AAEtC,kBAAA,UAAE,cAAA,wBAAc;AAAE,aAAO;;;IAzBS;AA4BlC,YAAU,OAAO,OAAO;AAExB,MAAM,cAAc;IAClB,KAAA,gBAAM;AAAE,aAAO;;IACf,SAAA,kBAAQ,MAAK;AAAE,aAAO,IAAI,aAAa;;;AAQzC,2BAAyB,MAAK,OAAM,KAAK,QAAO,KAAK,OAAM;AACzD,QAAI,MAAK,eAAa;AAAE,aAAO,cAAc,OAAO,MAAK;;AACzD,aAAS,IAAI,SAAS,OAAM,IAAI,IAAI,IAAI,MAAM,IAAI,IAAI,MAAK,aAAa,KAAK,GAAG,KAAK,KAAK;AACxF,UAAI,SAAQ,MAAK,MAAM;AACvB,UAAI,CAAC,OAAM,QAAQ;AACjB,YAAI,QAAQ,gBAAgB,MAAK,QAAO,MAAM,KAAK,MAAM,IAAI,OAAM,aAAa,GAAG,KAAK;AACxF,YAAI,OAAK;AAAE,iBAAO;;iBACT,CAAC,SAAQ,cAAc,aAAa,SAAQ;AACrD,eAAO,cAAc,OAAO,MAAK,MAAO,OAAM,IAAI,OAAM,WAAW;;AAErE,aAAO,OAAM,WAAW;;;AAI5B,mCAAiC,IAAI,UAAU,MAAM;AACnD,QAAI,OAAO,GAAG,MAAM,SAAS;AAC7B,QAAI,OAAO,UAAQ;AAAE;;AACrB,QAAI,QAAO,GAAG,MAAM;AACpB,QAAI,CAAE,kBAAgB,eAAe,iBAAgB,oBAAkB;AAAE;;AACzE,QAAI,QAAM,GAAG,QAAQ,KAAK,OAAO;AACjC,UAAI,QAAO,SAAE,OAAO,KAAK,UAAU,OAAU;AAAE,UAAI,QAAO,MAAI;AAAE,eAAM;;;AACtE,OAAG,aAAa,UAAU,KAAK,GAAG,IAAI,QAAQ,OAAM;;ACpdtD,MAAM,cAAc;AAApB,MAAuB,gBAAgB;AAAvC,MAA0C,iBAAiB;MAmB9C,cAAW,yBAAA,YAAA;AACtB,0BAAY,QAAO;AACjB,iBAAA,KAAK,MAAC,OAAM;AAIZ,WAAK,OAAO,KAAK;AACjB,WAAK,eAAe,OAAM;AAE1B,WAAK,kBAAkB;AAGvB,WAAK,cAAc,OAAM;AAGzB,WAAK,UAAU;AAEf,WAAK,OAAO,OAAO,OAAO;;;;;;;AAQ5B,wBAAI,UAAA,MAAA,WAAY;AACd,UAAI,KAAK,kBAAkB,KAAK,MAAM,QAAQ;AAC5C,aAAK,eAAe,KAAK,aAAa,IAAI,KAAK,KAAK,KAAK,QAAQ,MAAM,KAAK;AAC5E,aAAK,kBAAkB,KAAK,MAAM;;AAEpC,aAAO,KAAK;;AAMhB,iBAAA,UAAE,eAAA,uBAAa,WAAW;AACtB,UAAI,UAAU,MAAM,OAAO,KAAK,KACpC;AAAM,cAAM,IAAI,WAAW;;AACvB,WAAK,eAAe;AACpB,WAAK,kBAAkB,KAAK,MAAM;AAClC,WAAK,UAAW,MAAK,UAAU,eAAe,CAAC;AAC/C,WAAK,cAAc;AACnB,aAAO;;AAKT,wBAAI,aAAA,MAAA,WAAe;AACjB,aAAQ,MAAK,UAAU,eAAe;;AAK1C,iBAAA,UAAE,iBAAA,wBAAe,QAAO;AACpB,WAAK,cAAc;AACnB,WAAK,WAAW;AAChB,aAAO;;AAOX,iBAAA,UAAE,cAAA,qBAAY,QAAO;AACjB,UAAI,CAAC,KAAK,QAAQ,KAAK,eAAe,KAAK,UAAU,MAAM,SAAS,SACxE;AAAM,aAAK,eAAe;;AACtB,aAAO;;AAKX,iBAAA,UAAE,gBAAA,uBAAc,OAAM;AAClB,aAAO,KAAK,YAAY,MAAK,SAAS,KAAK,eAAe,KAAK,UAAU,MAAM;;AAKnF,iBAAA,UAAE,mBAAA,0BAAiB,OAAM;AACrB,aAAO,KAAK,YAAY,MAAK,cAAc,KAAK,eAAe,KAAK,UAAU,MAAM;;AAKtF,wBAAI,eAAA,MAAA,WAAiB;AACnB,aAAQ,MAAK,UAAU,iBAAiB;;AAG5C,iBAAA,UAAE,UAAA,kBAAQ,OAAM,MAAK;AACjB,iBAAA,UAAM,QAAA,KAAO,MAAC,OAAM;AACpB,WAAK,UAAU,KAAK,UAAU,CAAC;AAC/B,WAAK,cAAc;;AAKvB,iBAAA,UAAE,UAAA,iBAAQ,MAAM;AACZ,WAAK,OAAO;AACZ,aAAO;;AAKX,iBAAA,UAAE,mBAAA,0BAAiB,QAAO;AACtB,WAAK,UAAU,QAAQ,MAAM;AAC7B,aAAO;;AAOX,iBAAA,UAAE,uBAAA,8BAAqB,OAAM,cAAc;AACvC,UAAI,YAAY,KAAK;AACrB,UAAI,iBAAiB,OACzB;AAAM,gBAAO,MAAK,KAAK,KAAK,eAAgB,WAAU,QAAQ,UAAU,MAAM,UAAW,UAAU,MAAM,YAAY,UAAU,QAAQ,KAAK;;AACxI,gBAAU,YAAY,MAAM;AAC5B,aAAO;;AAKX,iBAAA,UAAE,kBAAA,4BAAkB;AAChB,WAAK,UAAU,QAAQ;AACvB,aAAO;;AAMX,iBAAA,UAAE,aAAA,oBAAW,OAAM,OAAM,IAAW;;aAAN;AAC1B,UAAI,UAAS,KAAK,IAAI,KAAK;AAC3B,UAAI,SAAQ,MAAM;AAChB,YAAI,CAAC,OAAI;AAAE,iBAAO,KAAK;;AACvB,eAAO,KAAK,qBAAqB,QAAO,KAAK,QAAO;aAC/C;AACL,YAAI,CAAC,OAAI;AAAE,iBAAO,KAAK,YAAY,OAAM;;AACzC,YAAI,SAAQ,KAAK;AACjB,YAAI,CAAC,QAAO;AACV,cAAI,QAAQ,KAAK,IAAI,QAAQ;AAC7B,mBAAQ,MAAM,QAAO,MAAM,UAAU,MAAM,YAAY,KAAK,IAAI,QAAQ;;AAE1E,aAAK,iBAAiB,OAAM,IAAI,QAAO,KAAK,OAAM;AAClD,YAAI,CAAC,KAAK,UAAU,OAAK;AAAE,eAAK,aAAa,UAAU,KAAK,KAAK,UAAU;;AAC3E,eAAO;;;AAOb,iBAAA,UAAE,UAAA,iBAAQ,KAAK,OAAO;AAClB,WAAK,KAAK,OAAO,OAAO,WAAW,MAAM,IAAI,OAAO;AACpD,aAAO;;AAKX,iBAAA,UAAE,UAAA,iBAAQ,KAAK;AACX,aAAO,KAAK,KAAK,OAAO,OAAO,WAAW,MAAM,IAAI;;AAMtD,wBAAI,UAAA,MAAA,WAAY;AACd,eAAS,KAAK,KAAK,MAAI;AAAE,eAAO;;AAChC,aAAO;;AAMX,iBAAA,UAAE,iBAAA,0BAAiB;AACf,WAAK,WAAW;AAChB,aAAO;;AAGT,wBAAI,iBAAA,MAAA,WAAmB;AACrB,aAAQ,MAAK,UAAU,kBAAkB;;;;IAnLZ;AClBjC,gBAAc,GAAG,MAAM;AACrB,WAAO,CAAC,QAAQ,CAAC,IAAI,IAAI,EAAE,KAAK;;AAGlC,MAAM,YACJ,oBAAY,MAAM,MAAM,MAAM;AAC5B,SAAK,OAAO;AACZ,SAAK,OAAO,KAAK,KAAK,MAAM;AAC5B,SAAK,QAAQ,KAAK,KAAK,OAAO;;AAIlC,MAAM,aAAa;IACjB,IAAI,UAAU,OAAO;MACnB,MAAA,cAAK,QAAQ;AAAE,eAAO,OAAO,OAAO,OAAO,OAAO,YAAY;;MAC9D,OAAA,gBAAM,IAAI;AAAE,eAAO,GAAG;;;IAGxB,IAAI,UAAU,aAAa;MACzB,MAAA,eAAK,QAAQ,UAAU;AAAE,eAAO,OAAO,aAAa,UAAU,QAAQ,SAAS;;MAC/E,OAAA,gBAAM,IAAI;AAAE,eAAO,GAAG;;;IAGxB,IAAI,UAAU,eAAe;MAC3B,MAAA,eAAK,QAAQ;AAAE,eAAO,OAAO,eAAe;;MAC5C,OAAA,gBAAM,IAAI,QAAQ,MAAM,QAAO;AAAE,eAAO,OAAM,UAAU,UAAU,GAAG,cAAc;;;IAGrF,IAAI,UAAU,qBAAqB;MACjC,MAAA,iBAAO;AAAE,eAAO;;MAChB,OAAA,gBAAM,IAAI,MAAM;AAAE,eAAO,GAAG,mBAAmB,OAAO,IAAI;;;;AAM9D,MAAM,gBACJ,wBAAY,SAAQ,SAAS;;AAC3B,SAAK,SAAS;AACd,SAAK,SAAS,WAAW;AACzB,SAAK,UAAU;AACf,SAAK,eAAe,OAAO,OAAO;AAClC,QAAI,SAAO;AAAE,cAAQ,QAAO,SAAC,QAAU;AACrC,YAAI,OAAK,aAAa,OAAO,MACnC;AAAQ,gBAAM,IAAI,WAAW,mDAAmD,OAAO,MAAM;;AACvF,eAAK,QAAQ,KAAK;AAClB,eAAK,aAAa,OAAO,OAAO;AAChC,YAAI,OAAO,KAAK,OACtB;AAAQ,iBAAK,OAAO,KAAK,IAAI,UAAU,OAAO,KAAK,OAAO,KAAK,OAAO;;;;;MAYzD,cACX,sBAAY,QAAQ;AAClB,SAAK,SAAS;;;AAehB,wBAAI,OAAA,MAAA,WAAS;AACX,WAAO,KAAK,OAAO;;AAKrB,wBAAI,QAAA,MAAA,WAAU;AACZ,WAAO,KAAK,OAAO;;wBAKrB,QAAA,gBAAM,IAAI;AACR,WAAO,KAAK,iBAAiB,IAAI;;wBAInC,oBAAA,2BAAkB,IAAI,QAAa;;eAAJ;AAC7B,aAAS,IAAI,GAAG,IAAI,KAAK,OAAO,QAAQ,QAAQ,KAAG;AAAE,UAAI,KAAK,QAAQ;AACpE,YAAI,SAAS,KAAK,OAAO,QAAQ;AACjC,YAAI,OAAO,KAAK,qBAAqB,CAAC,OAAO,KAAK,kBAAkB,KAAK,QAAQ,IAAI,OAC3F;AAAQ,iBAAO;;;;AAEX,WAAO;;wBAST,mBAAA,0BAAiB,QAAQ;AACvB,QAAI,CAAC,KAAK,kBAAkB,SAAO;AAAE,aAAO,EAAC,OAAO,MAAM,cAAc;;AAExE,QAAI,MAAM,CAAC,SAAS,WAAW,KAAK,WAAW,SAAS,OAAO;AAIxD,eAAS;AACd,UAAI,UAAU;AACd,eAAS,IAAI,GAAG,IAAI,KAAK,OAAO,QAAQ,QAAQ,KAAK;AACnD,YAAI,SAAS,KAAK,OAAO,QAAQ;AACjC,YAAI,OAAO,KAAK,mBAAmB;AACjC,cAAI,IAAI,OAAO,KAAK,GAAG,IAAI,GAAG,WAAW,OAAO,KAAK,GAAG,QAAQ;AAChE,cAAI,KAAK,IAAI,IAAI,UACb,OAAO,KAAK,kBAAkB,KAAK,QAAQ,IAAI,IAAI,MAAM,KAAK,KAAK,UAAU;AACjF,cAAI,MAAM,SAAS,kBAAkB,IAAI,IAAI;AAC3C,eAAG,QAAQ,uBAAuB;AAClC,gBAAI,CAAC,MAAM;AACT,qBAAO;AACP,uBAAS,IAAI,GAAG,IAAI,KAAK,OAAO,QAAQ,QAAQ,KAC9D;AAAgB,qBAAK,KAAK,IAAI,IAAI,EAAC,OAAO,UAAU,GAAG,IAAI,WAAU,EAAC,OAAO,MAAM,GAAG;;;AAE1E,gBAAI,KAAK;AACT,uBAAW,SAAS,WAAW;AAC/B,sBAAU;;AAEZ,cAAI,MAAI;AAAE,iBAAK,KAAK,EAAC,OAAO,UAAU,GAAG,IAAI;;;;AAGjD,UAAI,CAAC,SAAO;AAAE,eAAO,EAAC,OAAO,UAAU,cAAc;;;;wBAKzD,aAAA,oBAAW,IAAI;AACb,QAAI,CAAC,GAAG,OAAO,GAAG,KAAK,MAAI;AAAE,YAAM,IAAI,WAAW;;AAClD,QAAI,cAAc,IAAI,YAAY,KAAK,SAAS,SAAS,KAAK,OAAO;AACrE,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,UAAI,QAAQ,OAAO;AACnB,kBAAY,MAAM,QAAQ,MAAM,MAAM,IAAI,KAAK,MAAM,OAAO,MAAM;;AAEpE,aAAS,MAAI,GAAG,MAAI,eAAe,QAAQ,OAAG;AAAE,qBAAe,KAAG,MAAM,IAAI;;AAC5E,WAAO;;AAKT,wBAAI,GAAA,MAAA,WAAK;AAAE,WAAO,IAAI,YAAY;;AAqBlC,cAAO,SAAA,iBAAO,QAAQ;AACpB,QAAI,UAAU,IAAI,cAAc,OAAO,MAAM,OAAO,IAAI,KAAK,SAAS,OAAO,QAAQ,OAAO;AAC5F,QAAI,WAAW,IAAI,YAAY;AAC/B,aAAS,IAAI,GAAG,IAAI,QAAQ,OAAO,QAAQ,KAC/C;AAAM,eAAS,QAAQ,OAAO,GAAG,QAAQ,QAAQ,OAAO,GAAG,KAAK,QAAQ;;AACpE,WAAO;;wBAeT,cAAA,qBAAY,QAAQ;AAClB,QAAI,UAAU,IAAI,cAAc,KAAK,QAAQ,OAAO;AACpD,QAAI,SAAS,QAAQ,QAAQ,WAAW,IAAI,YAAY;AACxD,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,UAAI,OAAO,OAAO,GAAG;AACrB,eAAS,QAAQ,KAAK,eAAe,QAAQ,KAAK,QAAQ,OAAO,GAAG,KAAK,QAAQ;;AAEnF,WAAO;;wBAST,SAAA,iBAAO,cAAc;AACnB,QAAI,UAAS,EAAC,KAAK,KAAK,IAAI,UAAU,WAAW,KAAK,UAAU;AAChE,QAAI,KAAK,aAAW;AAAE,cAAO,cAAc,KAAK,YAAY,IAAG,SAAC,GAAA;AAAA,eAAK,EAAE;;;AACvE,QAAI,gBAAgB,OAAO,gBAAgB,UAAQ;AAAE,eAAS,QAAQ,cAAc;AAClF,YAAI,QAAQ,SAAS,QAAQ,aACnC;AAAQ,gBAAM,IAAI,WAAW;;AACvB,YAAI,SAAS,aAAa,OAAO,SAAQ,OAAO,KAAK;AACrD,YAAI,UAAS,OAAM,QAAM;AAAE,kBAAO,QAAQ,OAAM,OAAO,KAAK,QAAQ,KAAK,OAAO;;;;AAElF,WAAO;;AAiBT,cAAO,WAAA,mBAAS,QAAQ,MAAM,cAAc;AAC1C,QAAI,CAAC,MAAI;AAAE,YAAM,IAAI,WAAW;;AAChC,QAAI,CAAC,OAAO,QAAM;AAAE,YAAM,IAAI,WAAW;;AACzC,QAAI,UAAU,IAAI,cAAc,OAAO,QAAQ,OAAO;AACtD,QAAI,WAAW,IAAI,YAAY;AAC/B,YAAQ,OAAO,QAAO,SAAC,OAAS;AAC9B,UAAI,MAAM,QAAQ,OAAO;AACvB,iBAAS,MAAM,KAAK,SAAS,OAAO,QAAQ,KAAK;iBACxC,MAAM,QAAQ,aAAa;AACpC,iBAAS,YAAY,UAAU,SAAS,SAAS,KAAK,KAAK;iBAClD,MAAM,QAAQ,eAAe;AACtC,YAAI,KAAK,aAAW;AAAE,mBAAS,cAAc,KAAK,YAAY,IAAI,OAAO,OAAO;;aAC3E;AACL,YAAI,cAAY;AAAE,mBAAS,QAAQ,cAAc;AAC/C,gBAAI,SAAS,aAAa,OAAO,SAAQ,OAAO,KAAK;AACrD,gBAAI,OAAO,OAAO,MAAM,QAAQ,UAAS,OAAM,YAC3C,OAAO,UAAU,eAAe,KAAK,MAAM,OAAO;AAEpD,uBAAS,MAAM,QAAQ,OAAM,SAAS,KAAK,QAAQ,QAAQ,KAAK,OAAO;AACvE;;;;AAGJ,iBAAS,MAAM,QAAQ,MAAM,KAAK,QAAQ;;;AAG9C,WAAO;;AAST,cAAO,mBAAA,0BAAiB,GAAG;AACzB,mBAAe,KAAK;;AAEtB,cAAO,sBAAA,6BAAoB,GAAG;AAC5B,QAAI,SAAQ,eAAe,QAAQ;AACnC,QAAI,SAAQ,IAAE;AAAE,qBAAe,OAAO,QAAO;;;;AAIjD,MAAM,iBAAiB;AC7OvB,qBAAmB,KAAK,MAAM,QAAQ;AACpC,aAAS,QAAQ,KAAK;AACpB,UAAI,MAAM,IAAI;AACd,UAAI,eAAe,UAAQ;AAAE,cAAM,IAAI,KAAK;iBACnC,QAAQ,mBAAiB;AAAE,cAAM,UAAU,KAAK,MAAM;;AAC/D,aAAO,QAAQ;;AAEjB,WAAO;;MAMI,SAGX,iBAAY,MAAM;AAGhB,SAAK,QAAQ;AACb,QAAI,KAAK,OAAK;AAAE,gBAAU,KAAK,OAAO,MAAM,KAAK;;AAGjD,SAAK,OAAO;AACZ,SAAK,MAAM,KAAK,MAAM,KAAK,IAAI,MAAM,UAAU;;mBAKjD,WAAA,kBAAS,QAAO;AAAE,WAAO,OAAM,KAAK;;AA6BtC,MAAM,OAAO,OAAO,OAAO;AAE3B,qBAAmB,MAAM;AACvB,QAAI,QAAQ,MAAI;AAAE,aAAO,OAAO,MAAM,EAAE,KAAK;;AAC7C,SAAK,QAAQ;AACb,WAAO,OAAO;;MAOH,YAGX,oBAAY,MAAc;;aAAP;AAAS,SAAK,MAAM,UAAU;;sBAKjD,MAAA,aAAI,QAAO;AAAE,WAAO,OAAM,OAAO,aAAa,KAAK;;sBAInD,WAAA,mBAAS,QAAO;AAAE,WAAO,OAAM,KAAK;;;;ACpItC,MAAM,SAAS;AAGf,MAAI,OAAO,aAAa,eAAe,OAAO,YAAY,aAAa;AAC/D,cAAU,cAAc,KAAK,UAAU;AACvC,gBAAY,UAAU,KAAK,UAAU;AACrC,cAAU,wCAAwC,KAAK,UAAU;AAEnE,UAAK,OAAO,KAAK,CAAC,CAAE,cAAa,WAAW;AAChD,WAAO,aAAa,YAAY,SAAS,gBAAgB,IAAI,UAAU,CAAC,QAAQ,KAAK,UAAU,CAAC,QAAQ,KAAK;AAC7G,WAAO,QAAQ,CAAC,OAAM,gBAAgB,KAAK,UAAU;AACrD,WAAO,gBAAgB,OAAO,SAAS,CAAE,kBAAiB,KAAK,UAAU,cAAc,CAAC,GAAG,IAAI;AAC3F,cAAS,CAAC,OAAM,gBAAgB,KAAK,UAAU;AACnD,WAAO,SAAS,CAAC,CAAC;AAClB,WAAO,iBAAiB,WAAU,CAAC,QAAO;AAE1C,WAAO,SAAS,CAAC,OAAM,iBAAiB,KAAK,UAAU;AACvD,WAAO,MAAM,OAAO,UAAW,eAAc,KAAK,UAAU,cAAc,UAAU,iBAAiB;AACrG,WAAO,MAAM,OAAO,OAAO,MAAM,KAAK,UAAU;AAChD,WAAO,UAAU,aAAa,KAAK,UAAU;AAC7C,WAAO,SAAS,yBAAyB,SAAS,gBAAgB;AAClE,WAAO,iBAAiB,OAAO,UAAU,CAAE,wBAAuB,KAAK,UAAU,cAAc,CAAC,GAAG,IAAI;;AAjBjG;AACA;AACA;AAEF;AAIA;ACVC,MAAM,WAAW,SAAS,OAAM;AACrC,aAAS,SAAQ,KAAI,UAAS;AAC5B,cAAO,MAAK;AACZ,UAAI,CAAC,OAAI;AAAE,eAAO;;;;AAIf,MAAM,aAAa,SAAS,OAAM;AACvC,QAAI,SAAS,MAAK,gBAAgB,MAAK;AACvC,WAAO,UAAU,OAAO,YAAY,KAAK,OAAO,OAAO;;AAGzD,MAAI,cAAc;AAKX,MAAM,YAAY,SAAS,OAAM,OAAM,IAAI;AAChD,QAAI,QAAQ,eAAgB,eAAc,SAAS;AACnD,UAAM,OAAO,OAAM,MAAM,OAAO,MAAK,UAAU,SAAS;AACxD,UAAM,SAAS,OAAM,SAAQ;AAC7B,WAAO;;AAMF,MAAM,uBAAuB,SAAS,OAAM,KAAK,YAAY,WAAW;AAC7E,WAAO,cAAe,SAAQ,OAAM,KAAK,YAAY,WAAW,OAC1C,QAAQ,OAAM,KAAK,YAAY,WAAW;;AAGlE,MAAM,eAAe;AAErB,mBAAiB,OAAM,KAAK,YAAY,WAAW,KAAK;AACtD,eAAS;AACP,UAAI,SAAQ,cAAc,OAAO,WAAS;AAAE,eAAO;;AACnD,UAAI,OAAQ,OAAM,IAAI,IAAI,SAAS,SAAQ;AACzC,YAAI,SAAS,MAAK;AAClB,YAAI,OAAO,YAAY,KAAK,aAAa,UAAS,aAAa,KAAK,MAAK,aAAa,MAAK,mBAAmB,SACpH;AAAQ,iBAAO;;AACT,cAAM,SAAS,SAAS,OAAM,IAAI,IAAI;AACtC,gBAAO;iBACE,MAAK,YAAY,GAAG;AAC7B,gBAAO,MAAK,WAAW,MAAO,OAAM,IAAI,KAAK;AAC7C,YAAI,MAAK,mBAAmB,SAAO;AAAE,iBAAO;;AAC5C,cAAM,MAAM,IAAI,SAAS,SAAQ;aAC5B;AACL,eAAO;;;;AAKN,oBAAkB,OAAM;AAC7B,WAAO,MAAK,YAAY,IAAI,MAAK,UAAU,SAAS,MAAK,WAAW;;AAG/D,oBAAkB,OAAM,SAAQ,QAAQ;AAC7C,aAAS,WAAU,WAAU,GAAG,SAAQ,WAAU,SAAS,QAAO,YAAW,UAAQ;AACnF,UAAI,SAAQ,QAAM;AAAE,eAAO;;AAC3B,UAAI,SAAQ,SAAS;AACrB,cAAO,MAAK;AACZ,UAAI,CAAC,OAAI;AAAE,eAAO;;AAClB,iBAAU,YAAW,UAAS;AAC9B,eAAQ,UAAS,UAAS,SAAS;;;AAIvC,wBAAsB,KAAK;AACzB,QAAI;AACJ,aAAS,MAAM,KAAK,KAAK,MAAM,IAAI,YAAU;AAAE,UAAI,OAAO,IAAI,YAAU;AAAE;;;AAC1E,WAAO,QAAQ,KAAK,QAAQ,KAAK,KAAK,WAAY,MAAK,OAAO,OAAO,KAAK,cAAc;;AAKnF,MAAM,qBAAqB,SAAS,QAAQ;AACjD,QAAI,YAAY,OAAO;AACvB,QAAI,aAAa,OAAQ,UAAU,OAAO,cAAc,CAAC,OAAO,WAAW,GAAG,WAChF;AAAI,kBAAY;;AACd,WAAO;;AAGF,oBAAkB,SAAS,KAAK;AACrC,QAAI,QAAQ,SAAS,YAAY;AACjC,UAAM,UAAU,WAAW,MAAM;AACjC,UAAM,UAAU;AAChB,UAAM,MAAM,MAAM,OAAO;AACzB,WAAO;;ACvFT,sBAAoB,MAAK;AACvB,WAAO;MAAC,MAAM;MAAG,OAAO,KAAI,gBAAgB;MACpC,KAAK;MAAG,QAAQ,KAAI,gBAAgB;;;AAG9C,mBAAiB,OAAO,MAAM;AAC5B,WAAO,OAAO,SAAS,WAAW,QAAQ,MAAM;;AAGlD,sBAAoB,OAAM;AACxB,QAAI,OAAO,MAAK;AAEhB,QAAI,SAAU,KAAK,QAAQ,MAAK,eAAgB;AAChD,QAAI,SAAU,KAAK,SAAS,MAAK,gBAAiB;AAElD,WAAO;MAAC,MAAM,KAAK;MAAM,OAAO,KAAK,OAAO,MAAK,cAAc;MACvD,KAAK,KAAK;MAAK,QAAQ,KAAK,MAAM,MAAK,eAAe;;;AAGzD,8BAA4B,OAAM,MAAM,UAAU;AACvD,QAAI,kBAAkB,MAAK,SAAS,sBAAsB,GAAG,eAAe,MAAK,SAAS,mBAAmB;AAC7G,QAAI,OAAM,MAAK,IAAI;AACnB,aAAS,SAAS,YAAY,MAAK,OAAM,SAAS,WAAW,SAAS;AACpE,UAAI,CAAC,QAAM;AAAE;;AACb,UAAI,OAAO,YAAY,GAAC;AAAE;;AAC1B,UAAI,QAAQ,UAAU,KAAI,QAAQ,OAAO,YAAY;AACrD,UAAI,WAAW,QAAQ,WAAW,QAAO,WAAW;AACpD,UAAI,QAAQ,GAAG,QAAQ;AACvB,UAAI,KAAK,MAAM,SAAS,MAAM,QAAQ,iBAAiB,QAC3D;AAAM,gBAAQ,CAAE,UAAS,MAAM,KAAK,MAAM,QAAQ,cAAc;iBACnD,KAAK,SAAS,SAAS,SAAS,QAAQ,iBAAiB,WACtE;AAAM,gBAAQ,KAAK,SAAS,SAAS,SAAS,QAAQ,cAAc;;AAChE,UAAI,KAAK,OAAO,SAAS,OAAO,QAAQ,iBAAiB,SAC7D;AAAM,gBAAQ,CAAE,UAAS,OAAO,KAAK,OAAO,QAAQ,cAAc;iBACrD,KAAK,QAAQ,SAAS,QAAQ,QAAQ,iBAAiB,UACpE;AAAM,gBAAQ,KAAK,QAAQ,SAAS,QAAQ,QAAQ,cAAc;;AAC9D,UAAI,SAAS,OAAO;AAClB,YAAI,OAAO;AACT,eAAI,YAAY,SAAS,OAAO;eAC3B;AACL,cAAI,SAAS,OAAO,YAAY,SAAS,OAAO;AAChD,cAAI,OAAK;AAAE,mBAAO,aAAa;;AAC/B,cAAI,OAAK;AAAE,mBAAO,cAAc;;AAChC,cAAI,KAAK,OAAO,aAAa,QAAQ,KAAK,OAAO,YAAY;AAC7D,iBAAO,EAAC,MAAM,KAAK,OAAO,IAAI,KAAK,KAAK,MAAM,IAAI,OAAO,KAAK,QAAQ,IAAI,QAAQ,KAAK,SAAS;;;AAGpG,UAAI,OAAK;AAAE;;;;AAQR,0BAAwB,OAAM;AACnC,QAAI,OAAO,MAAK,IAAI,yBAAyB,SAAS,KAAK,IAAI,GAAG,KAAK;AACvE,QAAI,QAAQ;AACZ,aAAS,IAAK,MAAK,OAAO,KAAK,SAAS,GAAG,IAAI,SAAS,GACnD,IAAI,KAAK,IAAI,aAAa,KAAK,SAAS,KAAK,GAAG;AACnD,UAAI,MAAM,MAAK,KAAK,iBAAiB,GAAG;AACxC,UAAI,OAAO,MAAK,OAAO,CAAC,MAAK,IAAI,SAAS,MAAI;AAAE;;AAChD,UAAI,YAAY,IAAI;AACpB,UAAI,UAAU,OAAO,SAAS,IAAI;AAChC,iBAAS;AACT,iBAAS,UAAU;AACnB;;;AAGJ,WAAO,EAAA,QAAO,QAAU,OAAO,YAAY,MAAK;;AAGlD,uBAAqB,KAAK;AACxB,QAAI,QAAQ,IAAI,OAAM,IAAI;AAC1B,WAAO,KAAK,MAAM,WAAW,MAAM;AACjC,YAAM,KAAK,EAAA,KAAM,KAAK,IAAI,WAAW,MAAM,IAAI;AAC/C,UAAI,OAAO,MAAG;AAAE;;;AAElB,WAAO;;AAKF,0BAAuB,KAA0B;;;;AACtD,QAAI,YAAY,SAAS,OAAO,wBAAwB,MAAM;AAC9D,uBAAmB,OAAO,aAAa,IAAI,IAAI,YAAY;;AAG7D,8BAA4B,OAAO,MAAM;AACvC,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACzC,UAAA,MAA2B,MAAM;AAAxB,UAAA,MAAA,IAAA;AAAK,UAAA,MAAA,IAAA;AAAK,UAAA,OAAA,IAAA;AACf,UAAI,IAAI,aAAa,MAAM,MAAI;AAAE,YAAI,YAAY,MAAM;;AACvD,UAAI,IAAI,cAAc,MAAI;AAAE,YAAI,aAAa;;;;AAIjD,MAAI,yBAAyB;AAGtB,8BAA4B,KAAK;AACtC,QAAI,IAAI,WAAS;AAAE,aAAO,IAAI;;AAC9B,QAAI,wBAAsB;AAAE,aAAO,IAAI,MAAM;;AAE7C,QAAI,SAAS,YAAY;AACzB,QAAI,MAAM,0BAA0B,OAAO;UACrC,gBAAgB;AAClB,iCAAyB,EAAC,eAAe;AACzC,eAAO;;QAEP;AACJ,QAAI,CAAC,wBAAwB;AAC3B,+BAAyB;AACzB,yBAAmB,QAAQ;;;AAI/B,4BAA0B,OAAM,SAAQ;AACtC,QAAI,SAAS,YAAY,KAAK,eAAe,UAAS;AACtD,QAAI,SAAS,QAAO,KAAK,SAAS,QAAO;AACzC,aAAS,SAAQ,MAAK,YAAY,aAAa,GAAG,QAAO,SAAQ,OAAM,aAAa,cAAc;AAChG,UAAI,QAAA;AACJ,UAAI,OAAM,YAAY,GAAC;AAAE,gBAAQ,OAAM;iBAC9B,OAAM,YAAY,GAAC;AAAE,gBAAQ,UAAU,QAAO;aAC3D;AAAS;;AAEL,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,YAAI,OAAO,MAAM;AACjB,YAAI,KAAK,OAAO,UAAU,KAAK,UAAU,QAAQ;AAC/C,mBAAS,KAAK,IAAI,KAAK,QAAQ;AAC/B,mBAAS,KAAK,IAAI,KAAK,KAAK;AAC5B,cAAI,KAAK,KAAK,OAAO,QAAO,OAAO,KAAK,OAAO,QAAO,OAChD,KAAK,QAAQ,QAAO,OAAO,QAAO,OAAO,KAAK,QAAQ;AAC5D,cAAI,KAAK,WAAW;AAClB,sBAAU;AACV,wBAAY;AACZ,4BAAgB,MAAM,QAAQ,YAAY,IAAI,EAAC,MAAM,KAAK,QAAQ,QAAO,OAAO,KAAK,QAAQ,KAAK,MAAM,KAAK,QAAO,QAAO;AAC3H,gBAAI,OAAM,YAAY,KAAK,IACrC;AAAY,wBAAS,aAAc,SAAO,QAAS,MAAK,OAAO,KAAK,SAAS,IAAI,IAAI;;AAC3E;;;AAGJ,YAAI,CAAC,WAAY,SAAO,QAAQ,KAAK,SAAS,QAAO,OAAO,KAAK,OAChD,QAAO,QAAQ,KAAK,QAAQ,QAAO,OAAO,KAAK,SACtE;AAAQ,oBAAS,aAAa;;;;AAG5B,QAAI,WAAW,QAAQ,YAAY,GAAC;AAAE,aAAO,iBAAiB,SAAS;;AACvE,QAAI,CAAC,WAAY,aAAa,QAAQ,YAAY,GAAE;AAAE,aAAO,EAAA,MAAC,OAAI,QAAE;;AACpE,WAAO,iBAAiB,SAAS;;AAGnC,4BAA0B,OAAM,SAAQ;AACtC,QAAI,MAAM,MAAK,UAAU;AACzB,QAAI,QAAQ,SAAS;AACrB,aAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,YAAM,OAAO,OAAM,IAAI;AACvB,YAAM,SAAS,OAAM;AACrB,UAAI,OAAO,WAAW,OAAO;AAC7B,UAAI,KAAK,OAAO,KAAK,QAAM;AAAE;;AAC7B,UAAI,OAAO,SAAQ,OACvB;AAAM,eAAO,EAAA,MAAC,OAAM,QAAQ,IAAK,SAAO,QAAS,MAAK,OAAO,KAAK,SAAS,IAAI,IAAI;;;AAEjF,WAAO,EAAA,MAAC,OAAM,QAAQ;;AAGxB,kBAAgB,SAAQ,MAAM;AAC5B,WAAO,QAAO,QAAQ,KAAK,OAAO,KAAK,QAAO,QAAQ,KAAK,QAAQ,KACjE,QAAO,OAAO,KAAK,MAAM,KAAK,QAAO,OAAO,KAAK,SAAS;;AAG9D,wBAAsB,KAAK,SAAQ;AACjC,QAAI,SAAS,IAAI;AACjB,QAAI,UAAU,QAAQ,KAAK,OAAO,aAAa,QAAO,OAAO,IAAI,wBAAwB,MAC3F;AAAI,aAAO;;AACT,WAAO;;AAGT,0BAAwB,OAAM,KAAK,SAAQ;AAC3C,QAAA,MAAuB,iBAAiB,KAAK;AAAtC,QAAA,QAAA,IAAA;AAAM,QAAA,UAAA,IAAA;AAAuC,QAAE,OAAO;AAC3D,QAAI,MAAK,YAAY,KAAK,CAAC,MAAK,YAAY;AAC1C,UAAI,OAAO,MAAK;AAChB,aAAO,KAAK,QAAQ,KAAK,SAAS,QAAO,OAAQ,MAAK,OAAO,KAAK,SAAS,IAAI,IAAI;;AAErF,WAAO,MAAK,QAAQ,WAAW,OAAM,SAAQ;;AAG/C,wBAAsB,OAAM,OAAM,SAAQ,SAAQ;AAOhD,QAAI,UAAU;AACd,aAAS,MAAM,WAAQ;AACrB,UAAI,OAAO,MAAK,KAAG;AAAE;;AACrB,UAAI,OAAO,MAAK,QAAQ,YAAY,KAAK;AACzC,UAAI,CAAC,MAAI;AAAE,eAAO;;AAClB,UAAI,KAAK,KAAK,WAAW,KAAK,QAAQ;AACpC,YAAI,OAAO,KAAK,IAAI;AACpB,YAAI,KAAK,OAAO,QAAO,QAAQ,KAAK,MAAM,QAAO,KAAG;AAAE,oBAAU,KAAK;mBAC5D,KAAK,QAAQ,QAAO,QAAQ,KAAK,SAAS,QAAO,KAAG;AAAE,oBAAU,KAAK;eACpF;AAAW;;;AAEP,YAAM,KAAK,IAAI;;AAEjB,WAAO,UAAU,KAAK,UAAU,MAAK,QAAQ,WAAW,OAAM;;AAGhE,4BAA0B,SAAS,SAAQ,KAAK;AAC9C,QAAI,MAAM,QAAQ,WAAW;AAC7B,QAAI,OAAO,IAAI,MAAM,IAAI,QAAQ;AAC/B,eAAS,SAAS,KAAK,IAAI,GAAG,KAAK,IAAI,MAAM,GAAG,KAAK,MAAM,MAAO,SAAO,MAAM,IAAI,OAAQ,KAAI,SAAS,IAAI,QAAQ,KAAK,IAAI,YAAU;AACrI,YAAI,SAAQ,QAAQ,WAAW;AAC/B,YAAI,OAAM,YAAY,GAAG;AACvB,cAAI,QAAQ,OAAM;AAClB,mBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,gBAAI,OAAO,MAAM;AACjB,gBAAI,OAAO,SAAQ,OAAK;AAAE,qBAAO,iBAAiB,QAAO,SAAQ;;;;AAGrE,YAAK,KAAK,KAAI,KAAK,QAAQ,QAAM;AAAE;;;;AAGvC,WAAO;;AAIF,uBAAqB,OAAM,SAAQ;;AACxC,QAAI,OAAM,MAAK,IAAI,eAAe,OAAM;AACxC,QAAI,KAAI,wBAAwB;AAC9B,UAAI;AACF,YAAI,QAAM,KAAI,uBAAuB,QAAO,MAAM,QAAO;AACzD,YAAI,OAAG;AAAE,UAAA,SAA8B,OAAhB,QAAA,OAAA,YAAM,UAAA,OAAA;;eACtB,GAAP;;;AAEJ,QAAI,CAAC,SAAQ,KAAI,qBAAqB;AACpC,UAAI,QAAQ,KAAI,oBAAoB,QAAO,MAAM,QAAO;AACxD,UAAI,OAAK;AAAE,QAAA,WAA+C,OAA7B,QAAA,SAAA,gBAAmB,UAAA,SAAA;;;AAGlD,QAAI,MAAO,OAAK,KAAK,mBAAmB,MAAK,OAAO,MAAK,iBAAiB,QAAO,MAAM,QAAO,MAAM,IAAI;AACxG,QAAI,CAAC,OAAO,CAAC,MAAK,IAAI,SAAS,IAAI,YAAY,IAAI,IAAI,aAAa,MAAM;AACxE,UAAI,MAAM,MAAK,IAAI;AACnB,UAAI,CAAC,OAAO,SAAQ,MAAI;AAAE,eAAO;;AACjC,YAAM,iBAAiB,MAAK,KAAK,SAAQ;AACzC,UAAI,CAAC,KAAG;AAAE,eAAO;;;AAGnB,QAAI,OAAQ,QAAQ;AAClB,eAAS,IAAI,KAAK,SAAQ,GAAG,IAAI,WAAW,IAChD;AAAM,YAAI,EAAE,WAAS;AAAE,kBAAO,UAAS;;;;AAErC,UAAM,aAAa,KAAK;AACxB,QAAI,OAAM;AACR,UAAI,OAAQ,SAAS,MAAK,YAAY,GAAG;AAGvC,kBAAS,KAAK,IAAI,SAAQ,MAAK,WAAW;AAG1C,YAAI,UAAS,MAAK,WAAW,QAAQ;AACnC,cAAI,OAAO,MAAK,WAAW,UAAS;AACpC,cAAI,KAAK,YAAY,SAAU,SAAM,KAAK,yBAAyB,SAAS,QAAO,QAC/E,MAAI,SAAS,QAAO,KAChC;AAAU;;;;AAKN,UAAI,SAAQ,MAAK,OAAO,WAAU,MAAK,WAAW,SAAS,KAAK,MAAK,UAAU,YAAY,KACvF,QAAO,MAAM,MAAK,UAAU,wBAAwB,QAC5D;AAAM,cAAM,MAAK,MAAM,IAAI,QAAQ;iBAItB,WAAU,KAAK,MAAK,YAAY,KAAK,MAAK,WAAW,UAAS,GAAG,YAAY,MAC1F;AAAM,cAAM,aAAa,OAAM,OAAM,SAAQ;;;AAE3C,QAAI,OAAO,MAAI;AAAE,YAAM,eAAe,OAAM,KAAK;;AAEjD,QAAI,OAAO,MAAK,QAAQ,YAAY,KAAK;AACzC,WAAO,EAAA,KAAM,QAAQ,OAAO,KAAK,aAAa,KAAK,SAAS;;AAG9D,sBAAoB,QAAQ,MAAM;AAChC,QAAI,QAAQ,OAAO;AACnB,WAAO,CAAC,MAAM,SAAS,OAAO,0BAA0B,MAAM,OAAO,IAAI,IAAI,MAAM,SAAS;;AAG9F,MAAM,OAAO;AAKN,uBAAqB,OAAM,KAAK,MAAM;AAC7C,QAAA,MAAuB,MAAK,QAAQ,WAAW,KAAK,OAAO,IAAI,KAAK;AAA7D,QAAA,QAAA,IAAA;AAAM,QAAA,UAAA,IAAA;AAEX,QAAI,oBAAoB,OAAQ,UAAU,OAAQ;AAClD,QAAI,MAAK,YAAY,GAAG;AAGtB,UAAI,qBAAsB,MAAK,KAAK,MAAK,cAAe,QAAO,IAAI,CAAC,UAAS,WAAU,MAAK,UAAU,UAAU;AAC9G,YAAI,OAAO,WAAW,UAAU,OAAM,SAAQ,UAAS;AAIvD,YAAI,OAAQ,SAAS,WAAU,KAAK,KAAK,MAAK,UAAU,UAAS,OAAO,UAAS,MAAK,UAAU,QAAQ;AACtG,cAAI,aAAa,WAAW,UAAU,OAAM,UAAS,GAAG,UAAS,IAAI;AACrE,cAAI,WAAW,OAAO,KAAK,KAAK;AAC9B,gBAAI,YAAY,WAAW,UAAU,OAAM,SAAQ,UAAS,IAAI;AAChE,gBAAI,UAAU,OAAO,KAAK,KACpC;AAAY,qBAAO,SAAS,WAAW,UAAU,OAAO,WAAW;;;;AAG7D,eAAO;aACF;AACL,YAAI,QAAO,SAAQ,KAAK,SAAQ,WAAW,OAAO,IAAI,IAAI;AAC1D,YAAI,OAAO,KAAK,CAAC,SAAQ;AAAE;AAAM,qBAAW;mBACnC,QAAQ,KAAK,WAAU,MAAK,UAAU,QAAQ;AAAE;AAAQ,qBAAW;mBACnE,OAAO,GAAG;AAAE;eAChB;AAAE;;AACP,eAAO,SAAS,WAAW,UAAU,OAAM,OAAM,KAAK,WAAW,WAAW;;;AAKhF,QAAI,CAAC,MAAK,MAAM,IAAI,QAAQ,KAAK,OAAO,eAAe;AACrD,UAAI,WAAW,QAAO,KAAK,WAAU,SAAS,SAAQ;AACpD,YAAI,UAAS,MAAK,WAAW,UAAS;AACtC,YAAI,QAAO,YAAY,GAAC;AAAE,iBAAO,SAAS,QAAO,yBAAyB;;;AAE5E,UAAI,UAAS,SAAS,QAAO;AAC3B,YAAI,SAAQ,MAAK,WAAW;AAC5B,YAAI,OAAM,YAAY,GAAC;AAAE,iBAAO,SAAS,OAAM,yBAAyB;;;AAE1E,aAAO,SAAS,MAAK,yBAAyB,QAAQ;;AAIxD,QAAI,WAAW,QAAO,KAAK,WAAU,SAAS,SAAQ;AACpD,UAAI,WAAS,MAAK,WAAW,UAAS;AACtC,UAAI,SAAS,SAAO,YAAY,IAAI,UAAU,UAAQ,SAAS,YAAW,qBAAoB,IAAI,MAG5F,SAAO,YAAY,KAAM,UAAO,YAAY,QAAQ,CAAC,SAAO,eAAe,WAAS;AAC1F,UAAI,QAAM;AAAE,eAAO,SAAS,WAAW,QAAQ,IAAI;;;AAErD,QAAI,UAAS,SAAS,QAAO;AAC3B,UAAI,UAAQ,MAAK,WAAW;AAC5B,aAAO,QAAM,cAAc,QAAM,WAAW,iBAAe;AAAE,kBAAQ,QAAM;;AAC3E,UAAI,WAAS,CAAC,UAAQ,OAAO,QAAM,YAAY,IAAI,UAAU,SAAO,GAAI,oBAAoB,IAAI,KAC1F,QAAM,YAAY,IAAI,UAAQ;AACpC,UAAI,UAAM;AAAE,eAAO,SAAS,WAAW,UAAQ,KAAK;;;AAGtD,WAAO,SAAS,WAAW,MAAK,YAAY,IAAI,UAAU,SAAQ,OAAM,CAAC,OAAO,QAAQ;;AAG1F,oBAAkB,MAAM,MAAM;AAC5B,QAAI,KAAK,SAAS,GAAC;AAAE,aAAO;;AAC5B,QAAI,IAAI,OAAO,KAAK,OAAO,KAAK;AAChC,WAAO,EAAC,KAAK,KAAK,KAAK,QAAQ,KAAK,QAAQ,MAAM,GAAG,OAAO;;AAG9D,oBAAkB,MAAM,KAAK;AAC3B,QAAI,KAAK,UAAU,GAAC;AAAE,aAAO;;AAC7B,QAAI,IAAI,MAAM,KAAK,MAAM,KAAK;AAC9B,WAAO,EAAC,KAAK,GAAG,QAAQ,GAAG,MAAM,KAAK,MAAM,OAAO,KAAK;;AAG1D,4BAA0B,OAAM,QAAO,GAAG;AACxC,QAAI,YAAY,MAAK,OAAO,SAAS,MAAK,KAAK;AAC/C,QAAI,aAAa,QAAK;AAAE,YAAK,YAAY;;AACzC,QAAI,UAAU,MAAK,KAAG;AAAE,YAAK;;AAC7B,QAAI;AACF,aAAO;cACR;AACC,UAAI,aAAa,QAAK;AAAE,cAAK,YAAY;;AACzC,UAAI,UAAU,MAAK,OAAO,QAAM;AAAE,eAAO;;;;AAO7C,kCAAgC,OAAM,QAAO,KAAK;AAChD,QAAI,MAAM,OAAM;AAChB,QAAI,OAAO,OAAO,OAAO,IAAI,QAAQ,IAAI;AACzC,WAAO,iBAAiB,OAAM,QAAK,WAAQ;AAC7C,UAAA,MAAsB,MAAK,QAAQ,WAAW,KAAK,KAAK,OAAO,OAAO,KAAK;AAA5D,UAAA,MAAA,IAAA;AACX,iBAAS;AACP,YAAI,UAAU,MAAK,QAAQ,YAAY,KAAK;AAC5C,YAAI,CAAC,SAAO;AAAE;;AACd,YAAI,QAAQ,KAAK,SAAS;AAAE,gBAAM,QAAQ;AAAK;;AAC/C,cAAM,QAAQ,IAAI;;AAEpB,UAAI,UAAS,YAAY,OAAM,KAAK,KAAK;AACzC,eAAS,SAAQ,IAAI,YAAY,QAAO,SAAQ,OAAM,aAAa;AACjE,YAAI,QAAA;AACJ,YAAI,OAAM,YAAY,GAAC;AAAE,kBAAQ,OAAM;mBAC9B,OAAM,YAAY,GAAC;AAAE,kBAAQ,UAAU,QAAO,GAAG,OAAM,UAAU,QAAQ;eACxF;AAAW;;AACL,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,cAAI,MAAM,MAAM;AAChB,cAAI,IAAI,SAAS,IAAI,MAAM,KACtB,QAAO,OAAO,QAAO,MAAM,IAAI,MAAO,KAAI,SAAS,QAAO,OAAO,IAC/D,IAAI,SAAS,QAAO,SAAU,SAAO,SAAS,IAAI,OAAO,IACxE;AAAU,mBAAO;;;;AAGb,aAAO;;;AAIX,MAAM,WAAW;AAEjB,oCAAkC,OAAM,QAAO,KAAK;AACpD,QAAA,MAAgB,OAAM;AAAf,QAAA,QAAA,IAAA;AACL,QAAI,CAAC,MAAM,OAAO,aAAW;AAAE,aAAO;;AACtC,QAAI,UAAS,MAAM,cAAc,WAAU,CAAC,SAAQ,SAAQ,WAAU,MAAM,OAAO,QAAQ;AAC3F,QAAI,MAAM,MAAK,KAAK;AAGpB,QAAI,CAAC,SAAS,KAAK,MAAM,OAAO,gBAAgB,CAAC,IAAI,QACvD;AAAI,aAAO,OAAO,UAAU,OAAO,aAAa,WAAU;;AAExD,WAAO,iBAAiB,OAAM,QAAK,WAAQ;AAMzC,UAAI,WAAW,IAAI,WAAW,IAAI,UAAU,IAAI,WAAW,SAAS,IAAI;AACxE,UAAI,eAAe,IAAI;AACvB,UAAI,OAAO,QAAQ,KAAK;AACxB,UAAI,YAAY,MAAM,QAAQ,MAAK,QAAQ,YAAY,MAAM,YAAY,MAAK;AAC9E,UAAI,UAAS,CAAC,UAAU,SAAS,IAAI,UAAU,YAAY,IAAI,IAAI,YAAY,IAAI,UAAU,eACxF,WAAW,IAAI,aAAa,UAAU,IAAI;AAE/C,UAAI;AACJ,UAAI,SAAS;AACb,UAAI,gBAAgB,MAAI;AAAE,YAAI,iBAAiB;;AAC/C,aAAO;;;AAIX,MAAI,cAAc;AAAlB,MAAwB,YAAY;AAApC,MAA0C,eAAe;AAClD,0BAAwB,OAAM,QAAO,KAAK;AAC/C,QAAI,eAAe,UAAS,aAAa,KAAG;AAAE,aAAO;;AACrD,kBAAc;AAAO,gBAAY;AACjC,WAAO,eAAe,OAAO,QAAQ,OAAO,SACxC,uBAAuB,OAAM,QAAO,OACpC,yBAAyB,OAAM,QAAO;;AC7W5C,MAAM,YAAY;AAAlB,MAAqB,cAAc;AAAnC,MAAsC,gBAAgB;AAAtD,MAAyD,aAAa;AAItE,MAAM,WAEJ,mBAAY,QAAQ,UAAU,KAAK,YAAY;AAC7C,SAAK,SAAS;AACd,SAAK,WAAW;AAChB,SAAK,MAAM;AAGX,QAAI,aAAa;AAGjB,SAAK,aAAa;AAClB,SAAK,QAAQ;;;qBAKf,gBAAA,yBAAgB;AAAE,WAAO;;qBACzB,cAAA,uBAAc;AAAE,WAAO;;qBACvB,cAAA,uBAAc;AAAE,WAAO;;qBACvB,cAAA,qBAAY,WAAW;AAAE,WAAO;;qBAMhC,YAAA,qBAAY;AAAE,WAAO;;qBAKrB,YAAA,qBAAY;AAAE,WAAO;;AAGrB,sBAAI,KAAA,MAAA,WAAO;AACT,QAAI,OAAO;AACX,aAAS,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,KAAG;AAAE,cAAQ,KAAK,SAAS,GAAG;;AACxE,WAAO;;AAKT,sBAAI,OAAA,MAAA,WAAS;AAAE,WAAO;;qBAEtB,UAAA,mBAAU;AACR,SAAK,SAAS;AACd,QAAI,KAAK,IAAI,cAAc,MAAI;AAAE,WAAK,IAAI,aAAa;;AACvD,aAAS,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,KAC9C;AAAM,WAAK,SAAS,GAAG;;;qBAGrB,iBAAA,wBAAe,QAAO;AACpB,aAAS,IAAI,GAAG,MAAM,KAAK,YAAY,IAAI,KAAK,SAAS,QAAQ,KAAK;AACpE,UAAI,MAAM,KAAK,SAAS;AACxB,UAAI,OAAO,QAAK;AAAE,eAAO;;AACzB,aAAO,IAAI;;;AAIf,sBAAI,UAAA,MAAA,WAAY;AACd,WAAO,KAAK,OAAO,eAAe;;AAGpC,sBAAI,WAAA,MAAA,WAAa;AACf,WAAO,KAAK,SAAS,KAAK,OAAO,eAAe,QAAQ,KAAK,SAAS;;AAGxE,sBAAI,SAAA,MAAA,WAAW;AACb,WAAO,KAAK,YAAY,KAAK;;AAG/B,sBAAI,SAAA,MAAA,WAAW;AACb,WAAO,KAAK,aAAa,KAAK,OAAO,IAAI,KAAK;;qBAIhD,kBAAA,yBAAgB,KAAK,SAAQ,MAAM;AAGjC,QAAI,KAAK,cAAc,KAAK,WAAW,SAAS,IAAI,YAAY,IAAI,MAAM,IAAI,aAAa;AACzF,UAAI,OAAO,GAAG;AACZ,YAAI,WAAW;AACf,YAAI,OAAO,KAAK,YAAY;AAC1B,sBAAY,IAAI,WAAW,UAAS;eAC/B;AACL,iBAAO,IAAI,cAAc,KAAK,YAAU;AAAE,kBAAM,IAAI;;AACpD,sBAAY,IAAI;;AAElB,eAAO,aAAa,CAAG,SAAO,UAAU,eAAe,KAAK,UAAU,OAAK;AAAE,sBAAY,UAAU;;AACnG,eAAO,YAAY,KAAK,eAAe,QAAQ,KAAK,OAAO,KAAK;aAC3D;AACL,YAAI,UAAU;AACd,YAAI,OAAO,KAAK,YAAY;AAC1B,qBAAW,IAAI,WAAW;eACrB;AACL,iBAAO,IAAI,cAAc,KAAK,YAAU;AAAE,kBAAM,IAAI;;AACpD,qBAAW,IAAI;;AAEjB,eAAO,YAAY,CAAG,WAAO,SAAS,eAAe,OAAK,UAAU,OAAK;AAAE,qBAAW,SAAS;;AAC/F,eAAO,WAAW,KAAK,eAAe,UAAQ,KAAK;;;AAMvD,QAAI;AACJ,QAAI,OAAO,KAAK,OAAO,KAAK,YAAY;AACtC,eAAQ,UAAS,SAAS,KAAK;eACtB,KAAK,cAAc,KAAK,cAAc,KAAK,OAAO,KAAK,IAAI,SAAS,KAAK,aAAa;AAC/F,eAAQ,IAAI,wBAAwB,KAAK,cAAc;eAC9C,KAAK,IAAI,YAAY;AAC9B,UAAI,WAAU,GAAC;AAAE,iBAAS,SAAS,OAAM,SAAS,OAAO,YAAY;AACnE,cAAI,UAAU,KAAK,KAAK;AAAE,qBAAQ;AAAO;;AACzC,cAAI,OAAO,WAAW,cAAc,QAAM;AAAE;;;;AAE9C,UAAI,UAAS,QAAQ,WAAU,IAAI,WAAW,QAAM;AAAE,iBAAS,WAAS,OAAM,WAAS,SAAO,YAAY;AACxG,cAAI,YAAU,KAAK,KAAK;AAAE,qBAAQ;AAAM;;AACxC,cAAI,SAAO,WAAW,aAAa,UAAM;AAAE;;;;;AAG/C,WAAQ,WAAS,OAAO,OAAO,IAAI,UAAS,KAAK,WAAW,KAAK;;qBAKnE,cAAA,qBAAY,KAAK,WAAW;AAC1B,aAAS,QAAQ,MAAM,MAAM,KAAK,KAAK,MAAM,IAAI,YAAY;AAC3D,UAAI,OAAO,KAAK,QAAQ;AACxB,UAAI,QAAS,EAAC,aAAa,KAAK,OAAO;AAErC,YAAI,SAAS,KAAK,WACd,CAAE,MAAK,QAAQ,YAAY,IAAI,KAAK,QAAQ,SAAS,IAAI,YAAY,IAAI,MAAM,IAAI,cAAc,KAAK,WAAW,MAC7H;AAAU,kBAAQ;eAElB;AAAU,iBAAO;;;;;qBAKf,UAAA,iBAAQ,KAAK;AACX,QAAI,OAAO,IAAI;AACf,aAAS,MAAM,MAAM,KAAK,MAAM,IAAI,QAAM;AAAE,UAAI,OAAO,MAAI;AAAE,eAAO;;;;qBAGtE,aAAA,oBAAW,KAAK,SAAQ,MAAM;AAC5B,aAAS,OAAO,KAAK,MAAM,OAAO,KAAK,YAAY;AACjD,UAAI,OAAO,KAAK,QAAQ;AACxB,UAAI,MAAI;AAAE,eAAO,KAAK,gBAAgB,KAAK,SAAQ;;;AAErD,WAAO;;qBAMT,SAAA,gBAAO,KAAK;AACV,aAAS,IAAI,GAAG,UAAS,GAAG,IAAI,KAAK,SAAS,QAAQ,KAAK;AACzD,UAAI,SAAQ,KAAK,SAAS,IAAI,OAAM,UAAS,OAAM;AACnD,UAAI,WAAU,OAAO,QAAO,SAAQ;AAClC,eAAO,CAAC,OAAM,UAAU,OAAM,SAAS,QAAM;AAAE,mBAAQ,OAAM,SAAS;;AACtE,eAAO;;AAET,UAAI,MAAM,MAAG;AAAE,eAAO,OAAM,OAAO,MAAM,UAAS,OAAM;;AACxD,gBAAS;;;qBAKb,aAAA,oBAAW,KAAK,MAAM;AACpB,QAAI,CAAC,KAAK,YAAU;AAAE,aAAO,EAAC,MAAM,KAAK,KAAK,QAAQ;;AAEtD,QAAI,IAAI,GAAG,UAAS;AACpB,aAAS,SAAS,GAAG,IAAI,KAAK,SAAS,QAAQ,KAAK;AAClD,UAAI,SAAQ,KAAK,SAAS,IAAI,OAAM,SAAS,OAAM;AACnD,UAAI,OAAM,OAAO,kBAAiB,sBAAsB;AAAE,kBAAS,MAAM;AAAQ;;AACjF,eAAS;;AAGX,QAAI,SAAM;AAAE,aAAO,KAAK,SAAS,GAAG,WAAW,UAAS,KAAK,SAAS,GAAG,QAAQ;;AAEjF,aAAS,OAAA,QAAM,KAAK,CAAE,QAAO,KAAK,SAAS,IAAI,IAAI,QAAQ,gBAAgB,kBAAkB,KAAK,OAAO,KAAK,QAAQ,GAAG,KAAK;;AAE9H,QAAI,QAAQ,GAAG;AACb,UAAI,QAAM,SAAQ;AAClB,eAAQ,KAAK,SAAQ,OAAO;AAC1B,iBAAO,IAAI,KAAK,SAAS,IAAI,KAAK;AAClC,YAAI,CAAC,UAAQ,OAAK,IAAI,cAAc,KAAK,YAAU;AAAE;;;AAEvD,UAAI,UAAQ,QAAQ,UAAS,CAAC,OAAK,UAAU,CAAC,OAAK,SAAO;AAAE,eAAO,OAAK,WAAW,OAAK,MAAM;;AAC9F,aAAO,EAAC,MAAM,KAAK,YAAY,QAAQ,SAAO,SAAS,OAAK,OAAO,IAAI;WAClE;AACL,UAAI,MAAM,UAAQ;AAClB,eAAQ,KAAK,UAAQ,OAAO;AAC1B,eAAO,IAAI,KAAK,SAAS,SAAS,KAAK,SAAS,KAAK;AACrD,YAAI,CAAC,QAAQ,KAAK,IAAI,cAAc,KAAK,YAAU;AAAE;;;AAEvD,UAAI,QAAQ,WAAS,CAAC,KAAK,UAAU,CAAC,KAAK,SAAO;AAAE,eAAO,KAAK,WAAW,GAAG;;AAC9E,aAAO,EAAC,MAAM,KAAK,YAAY,QAAQ,OAAO,SAAS,KAAK,OAAO,KAAK,WAAW,WAAW;;;qBAMlG,aAAA,oBAAW,OAAM,IAAI,OAAU;;cAAH;AAC1B,QAAI,KAAK,SAAS,UAAU,GAChC;AAAM,aAAO,EAAC,MAAM,KAAK,YAAU,MAAE,OAAI,IAAM,YAAY,GAAG,UAAU,KAAK,WAAW,WAAW;;AAE/F,QAAI,aAAa,IAAI,WAAW;AAChC,aAAS,UAAS,OAAM,IAAI,KAAI,KAAK;AACnC,UAAI,SAAQ,KAAK,SAAS,IAAI,OAAM,UAAS,OAAM;AACnD,UAAI,cAAc,MAAM,SAAQ,MAAK;AACnC,YAAI,YAAY,UAAS,OAAM;AAE/B,YAAI,SAAQ,aAAa,MAAM,OAAM,OAAM,UAAU,OAAM,QACvD,OAAM,cAAc,KAAK,WAAW,SAAS,OAAM,aAC/D;AAAU,iBAAO,OAAM,WAAW,OAAM,IAAI;;AAEpC,gBAAO;AACP,iBAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,cAAI,OAAO,KAAK,SAAS,IAAI;AAC7B,cAAI,KAAK,QAAQ,KAAK,IAAI,cAAc,KAAK,cAAc,CAAC,KAAK,aAAa,IAAI;AAChF,yBAAa,SAAS,KAAK,OAAO;AAClC;;AAEF,mBAAQ,KAAK;;AAEf,YAAI,cAAc,IAAE;AAAE,uBAAa;;;AAErC,UAAI,aAAa,MAAO,QAAM,MAAM,KAAK,KAAK,SAAS,SAAS,IAAI;AAClE,aAAK;AACL,iBAAS,MAAI,IAAI,GAAG,MAAI,KAAK,SAAS,QAAQ,OAAK;AACjD,cAAI,OAAO,KAAK,SAAS;AACzB,cAAI,KAAK,QAAQ,KAAK,IAAI,cAAc,KAAK,cAAc,CAAC,KAAK,aAAa,KAAK;AACjF,uBAAW,SAAS,KAAK;AACzB;;AAEF,gBAAM,KAAK;;AAEb,YAAI,YAAY,IAAE;AAAE,qBAAW,KAAK,WAAW,WAAW;;AAC1D;;AAEF,gBAAS;;AAEX,WAAO,EAAC,MAAM,KAAK,YAAU,MAAE,OAAI,IAAI,YAAY;;qBAGrD,eAAA,sBAAa,MAAM;AACjB,QAAI,KAAK,UAAU,CAAC,KAAK,cAAc,CAAC,KAAK,SAAS,QAAM;AAAE,aAAO;;AACrE,QAAI,SAAQ,KAAK,SAAS,OAAO,IAAI,IAAI,KAAK,SAAS,SAAS;AAChE,WAAO,OAAM,QAAQ,KAAK,OAAM,aAAa;;qBAI/C,cAAA,qBAAY,KAAK;AACnB,QAAA,MAAyB,KAAK,WAAW,KAAK;AAArC,QAAA,QAAA,IAAA;AAAM,QAAA,UAAA,IAAA;AACX,QAAI,MAAK,YAAY,KAAK,WAAU,MAAK,WAAW,QACxD;AAAM,YAAM,IAAI,WAAW,uBAAuB;;AAC9C,WAAO,MAAK,WAAW;;qBASzB,eAAA,sBAAa,QAAQ,MAAM,MAAM,OAAO;AAEtC,QAAI,QAAO,KAAK,IAAI,QAAQ,OAAO,KAAK,KAAK,IAAI,QAAQ;AACzD,aAAS,IAAI,GAAG,UAAS,GAAG,IAAI,KAAK,SAAS,QAAQ,KAAK;AACzD,UAAI,SAAQ,KAAK,SAAS,IAAI,OAAM,UAAS,OAAM;AACnD,UAAI,QAAO,WAAU,KAAK,MAChC;AAAQ,eAAO,OAAM,aAAa,SAAS,UAAS,OAAM,QAAQ,OAAO,UAAS,OAAM,QAAQ,MAAM;;AAChG,gBAAS;;AAGX,QAAI,YAAY,KAAK,WAAW,QAAQ,SAAS,KAAK;AACtD,QAAI,UAAU,QAAQ,SAAS,YAAY,KAAK,WAAW,MAAM,OAAO,KAAK;AAC7E,QAAI,SAAS,KAAK;AAElB,QAAI,WAAW;AAKf,QAAK,QAAQ,SAAS,OAAQ,WAAW,UAAU,MAAM;AAClD,UAAA,QAAA,UAAA;AAAM,UAAA,WAAA,UAAA;AACX,UAAI,MAAK,YAAY,GAAG;AACtB,mBAAW,YAAU,MAAK,UAAU,WAAS,MAAM;AAEnD,YAAI,YAAY,YAAU,MAAK,UAAU,QAAQ;AAC/C,mBAAS,OAAO,OAAM,SAAA,QAAO,MAAM,OAAO,KAAK,YAAY;AACzD,gBAAI,SAAQ,KAAK,aAAa;AAC5B,kBAAI,OAAM,YAAY,MACpC;AAAgB,4BAAY,UAAU,EAAC,MAAM,OAAM,YAAY,QAAQ,SAAS,UAAS;;AAC3E;;AAEF,gBAAI,OAAO,KAAK;AAChB,gBAAI,QAAQ,KAAK,QAAQ,KAAK,KAAK,SAAO;AAAE;;;;aAG3C;AACL,YAAI,OAAO,MAAK,WAAW,WAAS;AACpC,mBAAW,QAAS,MAAK,YAAY,QAAQ,KAAK,mBAAmB;;;AAKzE,QAAI,OAAQ,SAAS,OAAO,aAAa,OAAO,aAAa,QAAQ,QAAQ,OAAO,UAAU,YAAY,GAAG;AAC3G,UAAI,UAAQ,OAAO,UAAU,WAAW,OAAO;AAC/C,UAAI,WAAS,QAAM,mBAAmB,SAAO;AAAE,gBAAQ;;;AAGzD,QAAI,CAAE,UAAS,YAAY,OAAQ,WAC/B,qBAAqB,UAAU,MAAM,UAAU,QAAQ,OAAO,YAAY,OAAO,iBACjF,qBAAqB,QAAQ,MAAM,QAAQ,QAAQ,OAAO,WAAW,OAAO,cACpF;AAAM;;AAKF,QAAI,iBAAiB;AACrB,QAAK,QAAO,UAAU,UAAU,SAAS,CAAC,UAAU;AAClD,aAAO,SAAS,UAAU,MAAM,UAAU;AAC1C,UAAI;AACF,YAAI,UAAU,MAAI;AAAE,iBAAO,OAAO,QAAQ,MAAM,QAAQ;;AACxD,yBAAiB;eACV,MAAP;AAKA,YAAI,CAAE,iBAAe,eAAa;AAAE,gBAAM;;;;AAI9C,QAAI,CAAC,gBAAgB;AACnB,UAAI,SAAS,MAAM;AAAE,YAAI,MAAM;AAAW,oBAAY;AAAS,kBAAU;;AACzE,UAAI,QAAQ,SAAS;AACrB,YAAM,OAAO,QAAQ,MAAM,QAAQ;AACnC,YAAM,SAAS,UAAU,MAAM,UAAU;AACzC,aAAO;AACP,aAAO,SAAS;;;qBAKpB,iBAAA,wBAAe,UAAU;AACvB,WAAO,CAAC,KAAK,cAAc,SAAS,QAAQ;;AAG9C,sBAAI,YAAA,MAAA,WAAc;AAChB,WAAO,KAAK,cAAc,KAAK,cAAc,KAAK,OAAO,CAAC,KAAK,IAAI,SAAS,KAAK;;qBAKnF,YAAA,mBAAU,OAAM,IAAI;AAClB,aAAS,UAAS,GAAG,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,KAAK;AACzD,UAAI,SAAQ,KAAK,SAAS,IAAI,OAAM,UAAS,OAAM;AACnD,UAAI,WAAU,OAAM,SAAQ,QAAO,MAAM,UAAS,QAAO,QAAO,KAAK,SAAQ;AAC3E,YAAI,cAAc,UAAS,OAAM,QAAQ,YAAY,OAAM,OAAM;AACjE,YAAI,SAAQ,eAAe,MAAM,WAAW;AAC1C,eAAK,QAAQ,SAAQ,WAAU,MAAM,OAAM,gBAAgB;AAC3D,cAAI,SAAQ,eAAe,MAAM,aAC5B,QAAM,eAAe,OAAM,IAAI,cAAc,KAAK,aAAW;AAAE,mBAAM,QAAQ;iBAC5F;AAAe,mBAAM,UAAU,QAAO,aAAa,KAAK;;AAC9C;eACK;AACL,iBAAM,QAAQ,OAAM,OAAO,OAAM,cAAc,OAAM,IAAI,cAAc,KAAK,aAAa,gBAAgB;;;AAG7G,gBAAS;;AAEX,SAAK,QAAQ;;qBAGf,mBAAA,4BAAmB;AACjB,QAAI,QAAQ;AACZ,aAAS,QAAO,KAAK,QAAQ,OAAM,QAAO,MAAK,QAAQ,SAAS;AAC9D,UAAI,QAAQ,SAAS,IAAI,gBAAgB;AACzC,UAAI,MAAK,QAAQ,OAAK;AAAE,cAAK,QAAQ;;;;AAIzC,sBAAI,QAAA,MAAA,WAAU;AAAE,WAAO;;AAEvB,sBAAI,gBAAA,MAAA,WAAkB;AAAE,WAAO;;;AAKjC,MAAM,UAAU;AAIhB,MAAM,iBAAc,yBAAA,WAAA;AAElB,6BAAY,QAAQ,SAAQ,OAAM,KAAK;AACrC,UAAI,MAAM,MAAM,QAAO,KAAK;AAC5B,UAAI,OAAO,OAAO,YAAU;AAAE,cAAM,IAAI,OAAI,WAAQ;AAClD,cAAI,CAAC,MAAI;AAAE,mBAAO;;AAClB,cAAI,KAAK,QAAM;AAAE,mBAAO,KAAK,OAAO,eAAe;;;;AAErD,UAAI,CAAC,QAAO,KAAK,KAAK,KAAK;AACzB,YAAI,IAAI,YAAY,GAAG;AACrB,cAAI,OAAO,SAAS,cAAc;AAClC,eAAK,YAAY;AACjB,gBAAM;;AAER,YAAI,kBAAkB;AACtB,YAAI,UAAU,IAAI;;AAEpB,gBAAA,KAAK,MAAC,QAAQ,SAAS,KAAK;AAC5B,WAAK,SAAS;AACd,aAAO;;;;;;;AAGX,oBAAA,UAAE,gBAAA,wBAAc,SAAQ;AACpB,aAAO,KAAK,SAAS,aAAa,QAAO,KAAK,GAAG,KAAK,OAAO;;AAGjE,oBAAA,UAAE,YAAA,sBAAY;AAAE,aAAO,EAAC,QAAQ;;AAEhC,oBAAA,UAAE,YAAA,oBAAU,OAAO;AACf,UAAI,QAAO,KAAK,OAAO,KAAK;AAC5B,aAAO,QAAO,MAAK,SAAS;;AAGhC,oBAAA,UAAE,iBAAA,yBAAe,UAAU;AACvB,aAAO,SAAS,QAAQ,eAAe,KAAK,OAAO,KAAK;;AAG5D,oBAAA,UAAE,UAAA,oBAAU;AACR,WAAK,OAAO,KAAK,QAAQ,KAAK;AAC9B,gBAAA,UAAM,QAAA,KAAO;;AAGf,0BAAI,QAAA,MAAA,WAAU;AAAE,aAAO;;;;IA1CI;AA6C7B,MAAM,sBAAmB,yBAAA,WAAA;AACvB,kCAAY,QAAQ,KAAK,SAAS,OAAM;AACtC,gBAAA,KAAK,MAAC,QAAQ,SAAS,KAAK;AAC5B,WAAK,UAAU;AACf,WAAK,OAAO;;;;;;;AAGd,0BAAI,KAAA,MAAA,WAAO;AAAE,aAAO,KAAK,KAAK;;AAEhC,yBAAA,UAAE,kBAAA,0BAAgB,KAAK,SAAQ;AAC3B,UAAI,OAAO,KAAK,SAAO;AAAE,eAAO,KAAK,aAAc,WAAS,KAAK,OAAO;;AACxE,aAAO,KAAK,aAAa;;AAG7B,yBAAA,UAAE,aAAA,qBAAW,KAAK;AACd,aAAO,EAAC,MAAM,KAAK,SAAS,QAAQ;;AAGxC,yBAAA,UAAE,iBAAA,yBAAe,KAAK;AAClB,aAAO,IAAI,SAAS,mBAAmB,IAAI,OAAO,aAAa,IAAI;;;;IAnBrC;AA4BlC,MAAM,eAAY,yBAAA,WAAA;AAEhB,2BAAY,QAAQ,OAAM,KAAK,YAAY;AACzC,gBAAA,KAAK,MAAC,QAAQ,IAAI,KAAK;AACvB,WAAK,OAAO;;;;;;AAGd,kBAAO,SAAA,iBAAO,QAAQ,OAAM,SAAQ,OAAM;AACxC,UAAI,SAAS,MAAK,UAAU,MAAK,KAAK;AACtC,UAAI,OAAO,UAAU,OAAO,OAAM,OAAM;AACxC,UAAI,CAAC,QAAQ,CAAC,KAAK,KACvB;AAAM,eAAO,cAAc,WAAW,UAAU,MAAK,KAAK,KAAK,MAAM,OAAM;;AACvE,aAAO,IAAI,cAAa,QAAQ,OAAM,KAAK,KAAK,KAAK,cAAc,KAAK;;AAG5E,kBAAA,UAAE,YAAA,sBAAY;AAAE,aAAO,EAAC,MAAM,KAAK,KAAK,KAAK,MAAM,OAAO,KAAK,KAAK,OAAO,gBAAgB,KAAK;;AAEhG,kBAAA,UAAE,cAAA,sBAAY,OAAM;AAAE,aAAO,KAAK,SAAS,cAAc,KAAK,KAAK,GAAG;;AAEtE,kBAAA,UAAE,YAAA,oBAAU,OAAM,IAAI;AAClB,gBAAA,UAAM,UAAA,KAAS,MAAC,OAAM;AAEtB,UAAI,KAAK,SAAS,WAAW;AAC3B,YAAI,SAAS,KAAK;AAClB,eAAO,CAAC,OAAO,MAAI;AAAE,mBAAS,OAAO;;AACrC,YAAI,OAAO,QAAQ,KAAK,OAAK;AAAE,iBAAO,QAAQ,KAAK;;AACnD,aAAK,QAAQ;;;AAInB,kBAAA,UAAE,QAAA,gBAAM,OAAM,IAAI,OAAM;AACpB,UAAI,QAAO,cAAa,OAAO,KAAK,QAAQ,KAAK,MAAM,MAAM;AAC7D,UAAI,SAAQ,KAAK,UAAU,OAAO,KAAK;AACvC,UAAI,KAAK,MAAI;AAAE,iBAAQ,aAAa,QAAO,IAAI,MAAM;;AACrD,UAAI,QAAO,GAAC;AAAE,iBAAQ,aAAa,QAAO,GAAG,OAAM;;AACnD,eAAS,IAAI,GAAG,IAAI,OAAM,QAAQ,KAAG;AAAE,eAAM,GAAG,SAAS;;AACzD,YAAK,WAAW;AAChB,aAAO;;;IArCgB;AA4C3B,MAAM,eAAY,yBAAA,WAAA;AAEhB,2BAAY,QAAQ,OAAM,WAAW,WAAW,KAAK,YAAY,UAAS,OAAM,KAAK;AACnF,gBAAA,KAAK,MAAC,QAAQ,MAAK,SAAS,UAAU,IAAI,KAAK;AAC/C,WAAK,UAAU;AACf,WAAK,OAAO;AACZ,WAAK,YAAY;AACjB,WAAK,YAAY;AACjB,UAAI,YAAU;AAAE,aAAK,eAAe,OAAM;;;;;;;;AAY5C,kBAAO,SAAA,iBAAO,QAAQ,OAAM,WAAW,WAAW,OAAM,KAAK;;AAC3D,UAAI,SAAS,MAAK,UAAU,MAAK,KAAK,OAAO;AAC7C,UAAI,OAAO,UAAU,OAAO,OAAM,OAAI,WAAQ;AAG5C,YAAI,CAAC,SAAO;AAAE,iBAAO;;AACrB,YAAI,QAAQ,QAAM;AAAE,iBAAO,QAAQ,OAAO,eAAe;;SACxD,WAAW;AAEd,UAAI,MAAM,QAAQ,KAAK,KAAK,aAAa,QAAQ,KAAK;AACtD,UAAI,MAAK,QAAQ;AACf,YAAI,CAAC,KAAG;AAAE,gBAAM,SAAS,eAAe,MAAK;mBACpC,IAAI,YAAY,GAAC;AAAE,gBAAM,IAAI,WAAW;;iBACxC,CAAC,KAAK;AACd,QAAA,SAAqB,cAAc,WAAW,UAAU,MAAK,KAAK,KAAK,MAAM,SAA3E,MAAA,OAAA,KAAK,aAAA,OAAA;;AAEV,UAAI,CAAC,cAAc,CAAC,MAAK,UAAU,IAAI,YAAY,MAAM;AACvD,YAAI,CAAC,IAAI,aAAa,oBAAkB;AAAE,cAAI,kBAAkB;;AAChE,YAAI,MAAK,KAAK,KAAK,WAAS;AAAE,cAAI,YAAY;;;AAGhD,UAAI,WAAU;AACd,YAAM,eAAe,KAAK,WAAW;AAErC,UAAI,MACR;AAAM,eAAO,UAAU,IAAI,mBAAmB,QAAQ,OAAM,WAAW,WAAW,KAAK,YAAY,UACrD,MAAM,OAAM,MAAM;iBACnD,MAAK,QAClB;AAAM,eAAO,IAAI,aAAa,QAAQ,OAAM,WAAW,WAAW,KAAK,UAAS;aAEhF;AAAM,eAAO,IAAI,cAAa,QAAQ,OAAM,WAAW,WAAW,KAAK,YAAY,UAAS,OAAM,MAAM;;;AAGxG,kBAAA,UAAE,YAAA,sBAAY;;AAEV,UAAI,KAAK,KAAK,KAAK,KAAK,eAAa;AAAE,eAAO;;AAK9C,UAAI,OAAO,EAAC,MAAM,KAAK,KAAK,KAAK,MAAM,OAAO,KAAK,KAAK;AACxD,UAAI,KAAK,KAAK,KAAK,KAAK,MAAI;AAAE,aAAK,qBAAqB;;AACxD,UAAI,KAAK,cAAc,CAAC,KAAK,aAAW;AAAE,aAAK,iBAAiB,KAAK;aACzE;AAAS,aAAK,aAAU,WAAA;AAAA,iBAAS,OAAK,aAAa,SAAS,QAAQ,OAAK,KAAK;;;AAC1E,aAAO;;AAGX,kBAAA,UAAE,cAAA,sBAAY,OAAM,WAAW,WAAW;AACtC,aAAO,KAAK,SAAS,aAAa,MAAK,GAAG,KAAK,SAC7C,cAAc,WAAW,KAAK,cAAc,UAAU,GAAG,KAAK;;AAGlE,0BAAI,KAAA,MAAA,WAAO;AAAE,aAAO,KAAK,KAAK;;AAE9B,0BAAI,OAAA,MAAA,WAAS;AAAE,aAAO,KAAK,KAAK,SAAS,IAAI;;AAM/C,kBAAA,UAAE,iBAAA,wBAAe,OAAM,KAAK;;AACxB,UAAI,UAAS,KAAK,KAAK,eAAe,MAAM;AAC5C,UAAI,cAAc,MAAK,aAAa,KAAK,qBAAqB,OAAM;AACpE,UAAI,mBAAmB,eAAe,YAAY,MAAM,KAAK,cAAc;AAC3E,UAAI,qBAAqB,eAAe,YAAY,MAAM;AAC1D,UAAI,UAAU,IAAI,gBAAgB,MAAM,oBAAoB,iBAAiB;AAC7E,eAAS,KAAK,MAAM,KAAK,WAAS,SAAG,SAAQ,GAAG,YAAe;AAC7D,YAAI,QAAO,KAAK,OACtB;AAAQ,kBAAQ,YAAY,QAAO,KAAK,OAAO,SAAQ;mBACxC,QAAO,KAAK,QAAQ,KAAK,CAAC,YACzC;AAAQ,kBAAQ,YAAY,KAAK,OAAK,KAAK,aAAa,KAAK,OAAO,OAAK,KAAK,MAAM,GAAG,OAAO,SAAQ;;AAGhG,gBAAQ,YAAY,SAAQ,OAAM;SACnC,SAAG,QAAO,WAAW,WAAW,GAAM;AAErC,gBAAQ,YAAY,OAAM,OAAO,SAAQ;AAEzC,YAAI;AACJ,YAAI,QAAQ,cAAc,QAAO,WAAW,WAAW;AAAI;iBAEhD,sBAAsB,MAAK,MAAM,UAAU,OAAO,OAClD,MAAK,MAAM,UAAU,KAAK,MAAM,OAAM,YACrC,aAAY,QAAQ,mBAAmB,YAAY,SAAS,MAC7D,QAAQ,aAAa,QAAO,WAAW,WAAW,WAAW;AAAO;iBAEpE,QAAQ,eAAe,QAAO,WAAW,WAAW,OAAM;AAAI;aAElE;AAEL,kBAAQ,QAAQ,QAAO,WAAW,WAAW,OAAM;;AAErD,eAAO,OAAM;;AAGf,cAAQ,YAAY,SAAS,SAAQ;AACrC,UAAI,KAAK,KAAK,aAAW;AAAE,gBAAQ;;AACnC,cAAQ;AAGR,UAAI,QAAQ,WAAW,KAAK,SAAS,eAAe;AAElD,YAAI,kBAAgB;AAAE,eAAK,wBAAwB,OAAM;;AACzD,oBAAY,KAAK,YAAY,KAAK,UAAU;AAC5C,YAAI,OAAQ,KAAG;AAAE,mBAAS,KAAK;;;;AAIrC,kBAAA,UAAE,uBAAA,8BAAqB,OAAM,KAAK;AAGlC,UAAA,MAAqB,MAAK,MAAM;AAAvB,UAAA,QAAA,IAAA;AAAM,UAAA,KAAA,IAAA;AACX,UAAI,CAAE,OAAK,MAAM,qBAAqB,kBAAkB,QAAO,OAAO,KAAK,MAAM,KAAK,KAAK,QAAQ,MAAI;AAAE;;AACzG,UAAI,MAAM,MAAK,KAAK;AACpB,UAAI,WAAW,eAAe,IAAI,WAAW,IAAI;AACjD,UAAI,CAAC,YAAY,CAAC,KAAK,IAAI,SAAS,SAAS,aAAW;AAAE;;AAE1D,UAAI,KAAK,KAAK,eAAe;AAI3B,YAAI,QAAO,SAAS;AACpB,YAAI,UAAU,mBAAmB,KAAK,KAAK,SAAS,OAAM,QAAO,KAAK,KAAK;AAC3E,eAAO,UAAU,IAAI,OAAO,EAAC,MAAM,UAAU,KAAK,SAAO,MAAE;aACtD;AACL,eAAO,EAAC,MAAM,UAAU,KAAK;;;AAInC,kBAAA,UAAE,0BAAA,iCAAwB,OAAI,KAAqB;;;;AAE/C,UAAI,KAAK,QAAQ,QAAK;AAAE;;AAGxB,UAAI,UAAU;AACd,eAAQ,UAAU,QAAQ,YAAY;AACpC,YAAI,QAAQ,cAAc,KAAK,YAAU;AAAE;;AAC3C,eAAO,QAAQ,iBAAe;AAAE,kBAAQ,WAAW,YAAY,QAAQ;;AACvE,eAAO,QAAQ,aAAW;AAAE,kBAAQ,WAAW,YAAY,QAAQ;;AACnE,YAAI,QAAQ,YAAU;AAAE,kBAAQ,aAAa;;;AAE/C,UAAI,OAAO,IAAI,oBAAoB,MAAM,SAAS,OAAM;AACxD,YAAK,iBAAiB,KAAK;AAG3B,WAAK,WAAW,aAAa,KAAK,UAAU,KAAK,MAAM,MAAK,QAAQ,OAAM;;AAM9E,kBAAA,UAAE,SAAA,iBAAO,OAAM,WAAW,WAAW,OAAM;AACvC,UAAI,KAAK,SAAS,cACd,CAAC,MAAK,WAAW,KAAK,OAAK;AAAE,eAAO;;AACxC,WAAK,YAAY,OAAM,WAAW,WAAW;AAC7C,aAAO;;AAGX,kBAAA,UAAE,cAAA,qBAAY,OAAM,WAAW,WAAW,OAAM;AAC5C,WAAK,gBAAgB;AACrB,WAAK,OAAO;AACZ,WAAK,YAAY;AACjB,UAAI,KAAK,YAAU;AAAE,aAAK,eAAe,OAAM,KAAK;;AACpD,WAAK,QAAQ;;AAGjB,kBAAA,UAAE,kBAAA,yBAAgB,WAAW;AACzB,UAAI,cAAc,WAAW,KAAK,YAAU;AAAE;;AAC9C,UAAI,YAAY,KAAK,QAAQ,YAAY;AACzC,UAAI,SAAS,KAAK;AAClB,WAAK,MAAM,eAAe,KAAK,KAAK,KAAK,SACf,iBAAiB,KAAK,WAAW,KAAK,MAAM,YAC5C,iBAAiB,WAAW,KAAK,MAAM;AACjE,UAAI,KAAK,OAAO,QAAQ;AACtB,eAAO,aAAa;AACpB,aAAK,IAAI,aAAa;;AAExB,WAAK,YAAY;;AAIrB,kBAAA,UAAE,aAAA,sBAAa;AACX,WAAK,QAAQ,UAAU,IAAI;AAC3B,UAAI,KAAK,cAAc,CAAC,KAAK,KAAK,KAAK,KAAK,WAAS;AAAE,aAAK,IAAI,YAAY;;;AAIhF,kBAAA,UAAE,eAAA,wBAAe;AACb,WAAK,QAAQ,UAAU,OAAO;AAC9B,UAAI,KAAK,cAAc,CAAC,KAAK,KAAK,KAAK,KAAK,WAAS;AAAE,aAAK,IAAI,gBAAgB;;;AAGlF,0BAAI,QAAA,MAAA,WAAU;AAAE,aAAO,KAAK,KAAK;;;;IApNR;AAyNpB,uBAAqB,MAAK,WAAW,WAAW,KAAK,OAAM;AAChE,mBAAe,KAAK,WAAW;AAC/B,WAAO,IAAI,aAAa,MAAM,MAAK,WAAW,WAAW,KAAK,KAAK,KAAK,OAAM;;AAGhF,MAAM,eAAY,yBAAA,eAAA;AAChB,2BAAY,QAAQ,OAAM,WAAW,WAAW,KAAK,UAAS,OAAM;AAClE,oBAAA,KAAK,MAAC,QAAQ,OAAM,WAAW,WAAW,KAAK,MAAM,UAAS;;;;;;;AAGlE,kBAAA,UAAE,YAAA,sBAAY;AACV,UAAI,OAAO,KAAK,QAAQ;AACxB,aAAO,QAAQ,QAAQ,KAAK,OAAO,CAAC,KAAK,UAAQ;AAAE,eAAO,KAAK;;AAC/D,aAAO,EAAC,MAAM,QAAQ;;AAG1B,kBAAA,UAAE,SAAA,iBAAO,OAAM,WAAW,GAAG,OAAM;AAC/B,UAAI,KAAK,SAAS,cAAe,KAAK,SAAS,aAAa,CAAC,KAAK,cAC9D,CAAC,MAAK,WAAW,KAAK,OAAK;AAAE,eAAO;;AACxC,WAAK,gBAAgB;AACrB,UAAK,MAAK,SAAS,aAAa,MAAK,QAAQ,KAAK,KAAK,SAAS,MAAK,QAAQ,KAAK,QAAQ,WAAW;AACnG,aAAK,QAAQ,YAAY,MAAK;AAC9B,YAAI,MAAK,eAAe,KAAK,SAAO;AAAE,gBAAK,cAAc;;;AAE3D,WAAK,OAAO;AACZ,WAAK,QAAQ;AACb,aAAO;;AAGX,kBAAA,UAAE,WAAA,oBAAW;AACT,UAAI,YAAY,KAAK,OAAO;AAC5B,eAAS,IAAI,KAAK,SAAS,GAAG,IAAI,EAAE,YAAU;AAAE,YAAI,KAAK,WAAS;AAAE,iBAAO;;;AAC3E,aAAO;;AAGX,kBAAA,UAAE,aAAA,qBAAW,KAAK;AACd,aAAO,EAAC,MAAM,KAAK,SAAS,QAAQ;;AAGxC,kBAAA,UAAE,kBAAA,0BAAgB,KAAK,SAAQ,MAAM;AACjC,UAAI,OAAO,KAAK,SAAO;AAAE,eAAO,KAAK,aAAa,KAAK,IAAI,SAAQ,KAAK,KAAK,KAAK;;AAClF,aAAO,cAAA,UAAM,gBAAA,KAAe,MAAC,KAAK,SAAQ;;AAG9C,kBAAA,UAAE,iBAAA,yBAAe,UAAU;AACvB,aAAO,SAAS,QAAQ,mBAAmB,SAAS,QAAQ;;AAGhE,kBAAA,UAAE,QAAA,gBAAM,OAAM,IAAI,OAAM;AACpB,UAAI,QAAO,KAAK,KAAK,IAAI,OAAM,KAAK,MAAM,SAAS,eAAe,MAAK;AACvE,aAAO,IAAI,cAAa,KAAK,QAAQ,OAAM,KAAK,WAAW,KAAK,WAAW,KAAK,KAAK;;AAGzF,kBAAA,UAAE,YAAA,oBAAU,OAAM,IAAI;AAClB,oBAAA,UAAM,UAAA,KAAS,MAAC,OAAM;AACtB,UAAI,KAAK,OAAO,KAAK,WAAY,UAAQ,KAAK,MAAM,KAAK,QAAQ,UAAU,SAC/E;AAAM,aAAK,QAAQ;;;AAGjB,0BAAI,QAAA,MAAA,WAAU;AAAE,aAAO;;;;IAtDE;AA2D3B,MAAM,uBAAoB,yBAAA,WAAA;;;;;;;;;oCACxB,YAAA,sBAAY;AAAE,aAAO,EAAC,QAAQ;;AAChC,0BAAA,UAAE,cAAA,sBAAY,UAAU;AAAE,aAAO,KAAK,SAAS,aAAa,KAAK,IAAI,YAAY;;AAC/E,0BAAI,QAAA,MAAA,WAAU;AAAE,aAAO;;AACvB,0BAAI,gBAAA,MAAA,WAAkB;AAAE,aAAO,KAAK,IAAI,YAAY;;;;IAJnB;AAUnC,MAAM,qBAAkB,yBAAA,eAAA;AAEtB,iCAAY,QAAQ,OAAM,WAAW,WAAW,KAAK,YAAY,UAAS,MAAM,OAAM,KAAK;AACzF,oBAAA,KAAK,MAAC,QAAQ,OAAM,WAAW,WAAW,KAAK,YAAY,UAAS,OAAM;AAC1E,WAAK,OAAO;;;;;;AAMhB,wBAAA,UAAE,SAAA,iBAAO,OAAM,WAAW,WAAW,OAAM;AACvC,UAAI,KAAK,SAAS,YAAU;AAAE,eAAO;;AACrC,UAAI,KAAK,KAAK,QAAQ;AACpB,YAAI,UAAS,KAAK,KAAK,OAAO,OAAM,WAAW;AAC/C,YAAI,SAAM;AAAE,eAAK,YAAY,OAAM,WAAW,WAAW;;AACzD,eAAO;iBACE,CAAC,KAAK,cAAc,CAAC,MAAK,QAAQ;AAC3C,eAAO;aACF;AACL,eAAO,cAAA,UAAM,OAAA,KAAM,MAAC,OAAM,WAAW,WAAW;;;AAItD,wBAAA,UAAE,aAAA,sBAAa;AACX,WAAK,KAAK,aAAa,KAAK,KAAK,eAAe,cAAA,UAAM,WAAA,KAAU;;AAGpE,wBAAA,UAAE,eAAA,wBAAe;AACb,WAAK,KAAK,eAAe,KAAK,KAAK,iBAAiB,cAAA,UAAM,aAAA,KAAY;;AAG1E,wBAAA,UAAE,eAAA,uBAAa,QAAQ,MAAM,MAAM,OAAO;AACtC,WAAK,KAAK,eAAe,KAAK,KAAK,aAAa,QAAQ,MAAM,QAC1D,cAAA,UAAM,aAAA,KAAY,MAAC,QAAQ,MAAM,MAAM;;AAG/C,wBAAA,UAAE,UAAA,oBAAU;AACR,UAAI,KAAK,KAAK,SAAO;AAAE,aAAK,KAAK;;AACjC,oBAAA,UAAM,QAAA,KAAO;;AAGjB,wBAAA,UAAE,YAAA,oBAAU,OAAO;AACf,aAAO,KAAK,KAAK,YAAY,KAAK,KAAK,UAAU,SAAS;;AAG9D,wBAAA,UAAE,iBAAA,yBAAe,UAAU;AACvB,aAAO,KAAK,KAAK,iBAAiB,KAAK,KAAK,eAAe,YAAY,cAAA,UAAM,eAAA,KAAc,MAAC;;;IA9C/D;AAsDjC,uBAAqB,WAAW,OAAO,OAAM;AAC3C,QAAI,MAAM,UAAU,YAAY,UAAU;AAC1C,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,UAAI,OAAO,MAAM,IAAI,WAAW,KAAK;AACrC,UAAI,SAAS,cAAc,WAAW;AACpC,eAAO,YAAY,KAAK;AAAE,gBAAM,GAAG;AAAM,oBAAU;;AACnD,cAAM,IAAI;aACL;AACL,kBAAU;AACV,kBAAU,aAAa,UAAU;;AAEnC,UAAI,gBAAgB,cAAc;AAChC,YAAI,MAAM,MAAM,IAAI,kBAAkB,UAAU;AAChD,oBAAY,KAAK,YAAY,KAAK,UAAU;AAC5C,cAAM,MAAM,IAAI,cAAc,UAAU;;;AAG5C,WAAO,KAAK;AAAE,YAAM,GAAG;AAAM,gBAAU;;AACvC,QAAI,WAAW,MAAK,eAAe,WAAS;AAAE,YAAK,cAAc;;;AAGnE,0BAAwB,UAAU;AAChC,QAAI,UAAQ;AAAE,WAAK,WAAW;;;AAEhC,iBAAe,YAAY,OAAO,OAAO;AAEzC,MAAM,SAAS,CAAC,IAAI;AAEpB,4BAA0B,WAAW,OAAM,WAAW;AACpD,QAAI,UAAU,UAAU,GAAC;AAAE,aAAO;;AAElC,QAAI,MAAM,YAAY,OAAO,KAAK,IAAI,kBAAgB,UAAS,CAAC;AAEhE,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACzC,UAAI,QAAQ,UAAU,GAAG,KAAK;AAC9B,UAAI,CAAC,OAAK;AAAE;;AACZ,UAAI,MAAM,UACd;AAAM,gBAAO,KAAK,MAAM,IAAI,eAAe,MAAM;;AAE7C,eAAS,QAAQ,OAAO;AACtB,YAAI,MAAM,MAAM;AAChB,YAAI,OAAO,MAAI;AAAE;;AACjB,YAAI,aAAa,QAAO,UAAU,GACxC;AAAQ,kBAAO,KAAK,MAAM,IAAI,eAAe,MAAK,WAAW,SAAS;;AAChE,YAAI,QAAQ,SAAO;AAAE,cAAI,QAAS,KAAI,QAAQ,IAAI,QAAQ,MAAM,MAAM;mBAC7D,QAAQ,SAAO;AAAE,cAAI,QAAS,KAAI,QAAQ,IAAI,QAAQ,MAAM,MAAM;mBAClE,QAAQ,YAAU;AAAE,cAAI,QAAQ;;;;AAI7C,WAAO;;AAGT,0BAAwB,UAAU,UAAS,cAAc,aAAa;AAEpE,QAAI,gBAAgB,UAAU,eAAe,QAAM;AAAE,aAAO;;AAE5D,QAAI,SAAS;AACb,aAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK;AAC3C,UAAI,OAAO,YAAY,IAAI,OAAO,aAAa;AAC/C,UAAI,GAAG;AACL,YAAI,SAAA;AACJ,YAAI,QAAQ,KAAK,YAAY,KAAK,YAAY,UAAU,YACnD,UAAS,OAAO,eAAe,OAAO,QAAQ,iBAAiB,KAAK,UAAU;AACjF,mBAAS;eACJ;AACL,mBAAS,SAAS,cAAc,KAAK;AACrC,iBAAO,WAAW;AAClB,iBAAO,YAAY;AACnB,iBAAO,OAAO;AACd,mBAAS;;;AAGb,sBAAgB,QAAQ,QAAQ,OAAO,IAAI;;AAE7C,WAAO;;AAGT,2BAAyB,KAAK,MAAM,KAAK;AACvC,aAAS,QAAQ,MACnB;AAAI,UAAI,QAAQ,WAAW,QAAQ,WAAW,QAAQ,cAAc,CAAE,SAAQ,MAC9E;AAAM,YAAI,gBAAgB;;;AACxB,aAAS,UAAQ,KACnB;AAAI,UAAI,UAAQ,WAAW,UAAQ,WAAW,UAAQ,cAAc,IAAI,WAAS,KAAK,SACtF;AAAM,YAAI,aAAa,QAAM,IAAI;;;AAC/B,QAAI,KAAK,SAAS,IAAI,OAAO;AAC3B,UAAI,WAAW,KAAK,QAAQ,KAAK,MAAM,MAAM,KAAK,OAAO,WAAW;AACpE,UAAI,UAAU,IAAI,QAAQ,IAAI,MAAM,MAAM,KAAK,OAAO,WAAW;AACjE,eAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAG;AAAE,YAAI,QAAQ,QAAQ,SAAS,OAAO,IAClF;AAAM,cAAI,UAAU,OAAO,SAAS;;;AAChC,eAAS,MAAI,GAAG,MAAI,QAAQ,QAAQ,OAAG;AAAE,YAAI,SAAS,QAAQ,QAAQ,SAAO,IACjF;AAAM,cAAI,UAAU,IAAI,QAAQ;;;AAC5B,UAAI,IAAI,UAAU,UAAU,GAChC;AAAM,YAAI,gBAAgB;;;AAExB,QAAI,KAAK,SAAS,IAAI,OAAO;AAC3B,UAAI,KAAK,OAAO;AACd,YAAI,OAAO,iFAAiF;AAC5F,eAAO,IAAI,KAAK,KAAK,KAAK,QAChC;AAAQ,cAAI,MAAM,eAAe,EAAE;;;AAE/B,UAAI,IAAI,OACZ;AAAM,YAAI,MAAM,WAAW,IAAI;;;;AAI/B,0BAAwB,KAAK,MAAM,OAAM;AACvC,WAAO,eAAe,KAAK,KAAK,QAAQ,iBAAiB,MAAM,OAAM,IAAI,YAAY;;AAIvF,yBAAuB,GAAG,GAAG;AAC3B,QAAI,EAAE,UAAU,EAAE,QAAM;AAAE,aAAO;;AACjC,aAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAG;AAAE,UAAI,CAAC,EAAE,GAAG,KAAK,GAAG,EAAE,GAAG,OAAK;AAAE,eAAO;;;AACxE,WAAO;;AAIT,cAAY,KAAK;AACf,QAAI,OAAO,IAAI;AACf,QAAI,WAAW,YAAY;AAC3B,WAAO;;AAKT,MAAM,kBAEJ,0BAAY,KAAK,YAAY;AAC3B,SAAK,MAAM;AACX,SAAK,OAAO;AAGZ,SAAK,QAAQ;AAGb,SAAK,QAAQ;AAEb,SAAK,UAAU;AAEf,SAAK,WAAW,SAAS,IAAI,KAAK,SAAS;;4BAK7C,iBAAA,wBAAe,QAAO,MAAK;AACzB,QAAI,UAAS,MAAG;AAAE;;AAClB,aAAS,IAAI,QAAO,IAAI,MAAK,KAAG;AAAE,WAAK,IAAI,SAAS,GAAG;;AACvD,SAAK,IAAI,SAAS,OAAO,QAAO,OAAM;AACtC,SAAK,UAAU;;4BAIjB,cAAA,uBAAc;AACZ,SAAK,eAAe,KAAK,OAAO,KAAK,IAAI,SAAS;;4BAMpD,cAAA,qBAAY,QAAO,SAAQ,OAAM;AAC/B,QAAI,OAAO,GAAG,QAAQ,KAAK,MAAM,UAAU;AAC3C,QAAI,UAAU,KAAK,IAAI,OAAO,OAAM;AACpC,WAAO,OAAO,WACN,SAAQ,QAAQ,IAAI,KAAK,MAAM,KAAK,MAAO,OAAO,KAAM,IAAI,YAAY,OAAM,UAAU,OAAM,MAAM,KAAK,KAAK,aAAa,OACvI;AAAM;;AAEF,WAAO,OAAO,OAAO;AACnB,WAAK;AACL,WAAK,IAAI,QAAQ;AACjB,WAAK,QAAQ,KAAK,MAAM;AACxB,WAAK,MAAM,KAAK,MAAM;AACtB;;AAEF,WAAO,QAAQ,OAAM,QAAQ;AAC3B,WAAK,MAAM,KAAK,KAAK,KAAK,KAAK,QAAQ;AACvC,UAAI,SAAQ;AACZ,eAAS,IAAI,KAAK,OAAO,IAAI,KAAK,IAAI,KAAK,QAAQ,GAAG,KAAK,IAAI,SAAS,SAAS,KAAK;AACpF,YAAI,KAAK,IAAI,SAAS,GAAG,YAAY,OAAM,SAAS;AAAE,mBAAQ;AAAG;;;AAEnE,UAAI,SAAQ,IAAI;AACd,YAAI,SAAQ,KAAK,OAAO;AACtB,eAAK,UAAU;AACf,eAAK,eAAe,KAAK,OAAO;;AAElC,aAAK,MAAM,KAAK,IAAI,SAAS,KAAK;aAC7B;AACL,YAAI,WAAW,aAAa,OAAO,KAAK,KAAK,OAAM,QAAQ,SAAQ;AACnE,aAAK,IAAI,SAAS,OAAO,KAAK,OAAO,GAAG;AACxC,aAAK,MAAM;AACX,aAAK,UAAU;;AAEjB,WAAK,QAAQ;AACb;;;4BAOJ,gBAAA,uBAAc,OAAM,WAAW,WAAW,QAAO;AAC/C,QAAI,SAAQ,IAAI;AAChB,QAAI,UAAS,KAAK,SAAS,SACtB,cAAa,KAAK,SAAS,QAAQ,SAAQ,KAAK,SAAS,QAAQ,UAAU,KAAK,OACjF,WAAW,YAAY,OAAM,WAAW,YAAY;AACtD,eAAQ,KAAK,IAAI,SAAS,QAAQ,YAAY,KAAK;WAC9C;AACL,eAAS,IAAI,KAAK,OAAO,IAAI,KAAK,IAAI,KAAK,IAAI,SAAS,QAAQ,IAAI,IAAI,IAAI,GAAG,KAAK;AAClF,YAAI,SAAQ,KAAK,IAAI,SAAS;AAC9B,YAAI,OAAM,YAAY,OAAM,WAAW,cAAc,CAAC,KAAK,SAAS,QAAQ,IAAI,SAAQ;AACtF,mBAAQ;AACR;;;;AAIN,QAAI,SAAQ,GAAC;AAAE,aAAO;;AACtB,SAAK,eAAe,KAAK,OAAO;AAChC,SAAK;AACL,WAAO;;4BAGT,eAAA,sBAAa,OAAM,WAAW,WAAW,QAAO,OAAM;AACpD,QAAI,SAAQ,KAAK,IAAI,SAAS;AAC9B,QAAI,CAAC,OAAM,OAAO,OAAM,WAAW,WAAW,QAAK;AAAE,aAAO;;AAC5D,SAAK,eAAe,KAAK,OAAO;AAChC,SAAK,QAAQ,SAAQ;AACrB,WAAO;;4BAGT,qBAAA,4BAAmB,SAAS;AAC1B,eAAS;AACP,UAAI,SAAS,QAAQ;AACrB,UAAI,CAAC,QAAM;AAAE,eAAO;;AACpB,UAAI,UAAU,KAAK,IAAI,YAAY;AACjC,YAAI,OAAO,QAAQ;AACnB,YAAI,MAAI;AAAE,mBAAS,IAAI,KAAK,OAAO,IAAI,KAAK,IAAI,SAAS,QAAQ,KAAK;AACpE,gBAAI,KAAK,IAAI,SAAS,MAAM,MAAI;AAAE,qBAAO;;;;AAE3C,eAAO;;AAET,gBAAU;;;4BAOd,iBAAA,wBAAe,OAAM,WAAW,WAAW,OAAM,QAAO;AACtD,aAAS,IAAI,KAAK,OAAO,IAAI,KAAK,IAAI,SAAS,QAAQ,KAAK;AAC1D,UAAI,OAAO,KAAK,IAAI,SAAS;AAC7B,UAAI,gBAAgB,cAAc;AAChC,YAAI,YAAW,KAAK,SAAS,QAAQ,IAAI;AACzC,YAAI,aAAY,QAAQ,aAAY,QAAK;AAAE,iBAAO;;AAClD,YAAI,UAAU,KAAK;AAKnB,YAAI,SAAS,KAAK,QAAS,YAAW,KAAK,QAAQ,QAAQ,YAAY,KAAK,QAAQ,SAAS,KAAK,KAAK,gBACnG,CAAE,OAAK,UAAU,KAAK,QAAQ,KAAK,KAAK,UAAU,KAAK,QAAQ,aAAa,MAAK,QAC/E,KAAK,SAAS,cAAc,cAAc,WAAW,KAAK;AAChE,YAAI,CAAC,UAAU,KAAK,OAAO,OAAM,WAAW,WAAW,QAAO;AAC5D,eAAK,eAAe,KAAK,OAAO;AAChC,cAAI,KAAK,OAAO,SAAO;AAAE,iBAAK,UAAU;;AACxC,eAAK;AACL,iBAAO;;AAET;;;AAGJ,WAAO;;4BAKT,UAAA,kBAAQ,OAAM,WAAW,WAAW,OAAM,KAAK;AAC7C,SAAK,IAAI,SAAS,OAAO,KAAK,SAAS,GAAG,aAAa,OAAO,KAAK,KAAK,OAAM,WAAW,WAAW,OAAM;AAC1G,SAAK,UAAU;;4BAGjB,cAAA,qBAAY,SAAQ,OAAM,KAAK;AAC7B,QAAI,OAAO,KAAK,QAAQ,KAAK,IAAI,SAAS,SAAS,KAAK,IAAI,SAAS,KAAK,SAAS;AACnF,QAAI,QAAQ,KAAK,cAAc,YAAY,YAAU,KAAK,UAAU,CAAC,KAAK,OAAO,KAAK,MAAM,aAAa;AACvG,WAAK;WACA;AACL,UAAI,OAAO,IAAI,eAAe,KAAK,KAAK,SAAQ,OAAM;AACtD,WAAK,IAAI,SAAS,OAAO,KAAK,SAAS,GAAG;AAC1C,WAAK,UAAU;;;4BAMnB,oBAAA,6BAAoB;AAClB,QAAI,YAAY,KAAK,IAAI,SAAS,KAAK,QAAQ;AAC/C,WAAO,qBAAqB,cAAY;AAAE,kBAAY,UAAU,SAAS,UAAU,SAAS,SAAS;;AAErG,QAAI,CAAC,aACD,CAAE,sBAAqB,iBACvB,MAAM,KAAK,UAAU,KAAK,OAAO;AAEnC,UAAK,QAAQ,UAAU,OAAQ,WAAW,aAAa,UAAU,IAAI,mBAAmB,SAC9F;AAAQ,aAAK,YAAY;;AACnB,WAAK,YAAY;;;4BAIrB,cAAA,qBAAY,UAAU;AACpB,QAAI,KAAK,QAAQ,KAAK,IAAI,SAAS,UAAU,KAAK,IAAI,SAAS,KAAK,OAAO,YAAY,WAAW;AAChG,WAAK;WACA;AACL,UAAI,MAAM,SAAS,cAAc;AACjC,UAAI,YAAY,OAAK;AAAE,YAAI,YAAY;;AACvC,UAAI,YAAY,MAAI;AAAE,YAAI,YAAY;;AACtC,WAAK,IAAI,SAAS,OAAO,KAAK,SAAS,GAAG,IAAI,qBAAqB,KAAK,KAAK,SAAS,KAAK;AAC3F,WAAK,UAAU;;;AAWrB,oBAAkB,MAAM,YAAY;AAClC,QAAI,UAAU,YAAY,QAAQ,QAAQ,SAAS;AACnD,QAAI,KAAK,KAAK,YAAY,UAAU,IAAI,OAAK,WAAU;AACvD;AAAO,aAAO,KAAK,GAAG;AACpB,YAAI,OAAA;AACJ,mBAAS;AACP,cAAI,OAAO;AACT,gBAAI,OAAO,QAAQ,SAAS,QAAQ;AACpC,gBAAI,gBAAgB,cAAc;AAChC,wBAAU;AACV,sBAAQ,KAAK,SAAS;mBACjB;AACL,qBAAO;AACP;AACA;;qBAEO,WAAW,YAAY;AAChC;iBACK;AAEL,oBAAQ,QAAQ,OAAO,SAAS,QAAQ;AACxC,sBAAU,QAAQ;;;AAGtB,YAAI,QAAO,KAAK;AAChB,YAAI,CAAC,OAAI;AAAE;;AACX,YAAI,SAAQ,KAAK,MAAM,KAAK,IAAE;AAAE;;AAChC,UAAE;AACF,gBAAQ,IAAI,MAAM;AAClB,iBAAQ,KAAK;;AAEf,WAAO,EAAC,OAAO,IAAE,SAAW,SAAS,SAAQ;;AAG/C,uBAAqB,GAAG,GAAG;AAAE,WAAO,EAAE,KAAK,OAAO,EAAE,KAAK;;AAOzD,oBAAkB,QAAQ,MAAM,UAAU,QAAQ;AAChD,QAAI,UAAS,KAAK,OAAO,SAAS,UAAS;AAE3C,QAAI,QAAO,UAAU,GAAG;AACtB,eAAS,IAAI,GAAG,IAAI,OAAO,YAAY,KAAK;AAC1C,YAAI,SAAQ,OAAO,MAAM;AACzB,eAAO,QAAO,SAAQ,KAAK,SAAS,SAAQ,SAAQ;AACpD,mBAAU,OAAM;;AAElB;;AAGF,QAAI,YAAY,GAAG,SAAS,IAAI,WAAW;AAC3C,aAAS,cAAc,OAAK;AAC1B,UAAI,YAAY,QAAO,UAAU,QAAO,WAAW,MAAM,SAAQ;AAC/D,YAAI,UAAS,QAAO,cAAc,UAAA;AAClC,eAAO,YAAY,QAAO,UAAU,QAAO,WAAW,MAAM,SAClE;AAAQ,UAAC,YAAY,WAAU,CAAC,WAAU,KAAK,QAAO;;AAChD,YAAI,SAAS;AACX,kBAAQ,KAAK;AACb,mBAAS,MAAI,GAAG,MAAI,QAAQ,QAAQ,OAAG;AAAE,qBAAS,QAAQ,MAAI,aAAa,CAAC,CAAC;;eACxE;AACL,mBAAS,SAAQ,aAAa,CAAC,CAAC;;;AAIpC,UAAI,UAAA,QAAO,SAAA;AACX,UAAI,UAAU;AACZ,iBAAQ;AACR,kBAAQ;AACR,mBAAW;iBACF,cAAc,OAAO,YAAY;AAC1C,iBAAQ;AACR,kBAAQ,OAAO,MAAM;aAChB;AACL;;AAGF,eAAS,MAAI,GAAG,MAAI,OAAO,QAAQ,OAAG;AAAE,YAAI,OAAO,KAAG,MAAM,SAAM;AAAE,iBAAO,OAAO,OAAK;;;AACvF,aAAO,YAAY,QAAO,UAAU,QAAO,WAAW,QAAQ,WAAU,QAAO,WAAW,KAAK,SACnG;AAAM,eAAO,KAAK,QAAO;;AAErB,UAAI,OAAM,UAAS,QAAM;AACzB,UAAI,QAAM,QAAQ;AAChB,YAAI,QAAQ;AACZ,YAAI,YAAY,QAAO,UAAU,QAAO,WAAW,OAAO,OAAK;AAAE,kBAAQ,QAAO,WAAW;;AAC3F,iBAAS,MAAI,GAAG,MAAI,OAAO,QAAQ,OAAG;AAAE,cAAI,OAAO,KAAG,KAAK,OAAK;AAAE,oBAAQ,OAAO,KAAG;;;AACpF,YAAI,QAAQ,MAAK;AACf,qBAAW,QAAM,IAAI,QAAQ;AAC7B,oBAAQ,QAAM,IAAI,GAAG,QAAQ;AAC7B,iBAAM;AACN,mBAAQ;;;AAIZ,UAAI,YAAY,CAAC,OAAO,SAAS,UAC3B,QAAM,YAAY,CAAC,QAAM,SAAS,OAAO,OAAM,SAAC,GAAA;AAAA,eAAK,CAAC,EAAE;WACxD,OAAO;AACb,aAAO,SAAO,WAAW,KAAK,SAAS,SAAQ,UAAQ;AACvD,gBAAS;;;AAMb,oBAAkB,KAAK;AACrB,QAAI,IAAI,YAAY,QAAQ,IAAI,YAAY,MAAM;AAChD,UAAI,SAAS,IAAI,MAAM;AACvB,UAAI,MAAM,UAAU,SAAS;AAC7B,aAAO,iBAAiB,KAAK;AAC7B,UAAI,MAAM,UAAU;;;AAIxB,0BAAwB,OAAM,SAAQ;AACpC,eAAS;AACP,UAAI,MAAK,YAAY,GAAC;AAAE,eAAO;;AAC/B,UAAI,MAAK,YAAY,KAAK,UAAS,GAAG;AACpC,YAAI,MAAK,WAAW,SAAS,WAAU,MAAK,WAAW,SAAQ,YAAY,GACjF;AAAQ,iBAAO,MAAK,WAAW;;AACzB,gBAAO,MAAK,WAAW,UAAS;AAChC,kBAAS,SAAS;iBACT,MAAK,YAAY,KAAK,UAAS,MAAK,WAAW,QAAQ;AAChE,gBAAO,MAAK,WAAW;AACvB,kBAAS;aACJ;AACL,eAAO;;;;AAMb,8BAA4B,MAAM,OAAM,OAAM,IAAI;AAChD,aAAS,IAAI,GAAG,MAAM,GAAG,IAAI,KAAK,cAAc,OAAO,MAAK;AAC1D,UAAI,SAAQ,KAAK,MAAM,MAAM,aAAa;AAC1C,aAAO,OAAM;AACb,UAAI,CAAC,OAAM,QAAM;AAAE;;AACnB,UAAI,MAAM,OAAM;AAChB,aAAO,IAAI,KAAK,YAAY;AAC1B,YAAI,OAAO,KAAK,MAAM;AACtB,eAAO,KAAK;AACZ,YAAI,CAAC,KAAK,QAAM;AAAE;;AAClB,eAAO,KAAK;;AAEd,UAAI,OAAO,OAAM;AACf,YAAI,SAAQ,IAAI,YAAY,OAAM,KAAK;AACvC,YAAI,UAAS,KAAK,SAAQ,MAAK,SAAS,cAAc,OAC5D;AAAQ,iBAAO,aAAa;;;;AAG1B,WAAO;;AAQT,wBAAsB,QAAO,OAAM,IAAI,OAAM,aAAa;AACxD,QAAI,UAAS;AACb,aAAS,IAAI,GAAG,MAAM,GAAG,IAAI,OAAM,QAAQ,KAAK;AAC9C,UAAI,SAAQ,OAAM,IAAI,SAAQ,KAAK,OAAM,OAAO,OAAM;AACtD,UAAI,UAAS,MAAM,QAAO,OAAM;AAC9B,gBAAO,KAAK;aACP;AACL,YAAI,SAAQ,OAAI;AAAE,kBAAO,KAAK,OAAM,MAAM,GAAG,QAAO,QAAO;;AAC3D,YAAI,aAAa;AACf,kBAAO,KAAK;AACZ,wBAAc;;AAEhB,YAAI,OAAM,IAAE;AAAE,kBAAO,KAAK,OAAM,MAAM,KAAK,QAAO,OAAM,MAAM;;;;AAGlE,WAAO;;ACx6CF,4BAA0B,OAAM,QAAQ;AAC7C,QAAI,SAAS,MAAK,KAAK,gBAAgB,OAAM,MAAK,MAAM;AACxD,QAAI,CAAC,OAAO,WAAS;AAAE,aAAO;;AAC9B,QAAI,eAAc,MAAK,QAAQ,YAAY,OAAO,YAAY,WAAW,gBAAe,aAAY,QAAQ;AAC5G,QAAI,OAAO,MAAK,QAAQ,WAAW,OAAO,WAAW,OAAO;AAC5D,QAAI,OAAO,GAAC;AAAE,aAAO;;AACrB,QAAI,QAAQ,KAAI,QAAQ,OAAO,SAAS;AACxC,QAAI,mBAAmB,SAAS;AAC9B,gBAAU;AACV,aAAO,gBAAe,CAAC,aAAY,MAAI;AAAE,uBAAc,aAAY;;AACnE,UAAI,gBAAe,aAAY,KAAK,UAAU,cAAc,aAAa,aAAY,SAAS,aAAY,UACnG,CAAE,cAAY,KAAK,YAAY,SAAS,OAAO,WAAW,OAAO,aAAa,aAAY,OAAO;AACtG,YAAI,MAAM,aAAY;AACtB,oBAAY,IAAI,cAAc,QAAQ,MAAM,QAAQ,KAAI,QAAQ;;WAE7D;AACL,UAAI,SAAS,MAAK,QAAQ,WAAW,OAAO,YAAY,OAAO;AAC/D,UAAI,SAAS,GAAC;AAAE,eAAO;;AACvB,gBAAU,KAAI,QAAQ;;AAGxB,QAAI,CAAC,WAAW;AACd,UAAI,OAAO,UAAU,aAAc,MAAK,MAAM,UAAU,OAAO,MAAM,OAAO,CAAC,WAAY,IAAI;AAC7F,kBAAY,iBAAiB,OAAM,SAAS,OAAO;;AAErD,WAAO;;AAGT,+BAA6B,OAAM;AACjC,WAAO,MAAK,WAAW,MAAK,aAC1B,aAAa,UAAS,SAAS,iBAAiB,SAAS,cAAc,SAAS,MAAK;;AAGlF,0BAAwB,OAAM,OAAO;AAC1C,QAAI,MAAM,MAAK,MAAM;AACrB,sBAAkB,OAAM;AAExB,QAAI,CAAC,oBAAoB,QAAK;AAAE;;AAEhC,QAAI,CAAC,SAAS,MAAK,aAAa,MAAK,UAAU,cAAc;AAC3D,YAAK,UAAU,uBAAuB;AACtC,YAAK,YAAY;AACjB;;AAGF,UAAK,YAAY;AAEjB,QAAI,MAAK,eAAe;AACtB,0BAAoB;WACf;AACA,UAAA,SAAA,IAAA;AAAQ,UAAA,OAAA,IAAA;AAAW,UAAE,mBAAmB;AAC7C,UAAI,iCAAiC,CAAE,gBAAe,gBAAgB;AACpE,YAAI,CAAC,IAAI,MAAM,OAAO,eAC5B;AAAQ,8BAAoB,wBAAwB,OAAM,IAAI;;AACxD,YAAI,CAAC,IAAI,SAAS,CAAC,IAAI,MAAM,OAAO,eAC1C;AAAQ,4BAAkB,wBAAwB,OAAM,IAAI;;;AAExD,YAAK,QAAQ,aAAa,QAAQ,MAAM,MAAK,MAAM;AACnD,UAAI,+BAA+B;AACjC,YAAI,mBAAiB;AAAE,wBAAc;;AACrC,YAAI,iBAAe;AAAE,wBAAc;;;AAErC,UAAI,IAAI,SAAS;AACf,cAAK,IAAI,UAAU,OAAO;aACrB;AACL,cAAK,IAAI,UAAU,IAAI;AACvB,YAAI,uBAAuB,UAAQ;AAAE,uCAA6B;;;;AAItE,UAAK,YAAY;AACjB,UAAK,YAAY;;AAOnB,MAAM,gCAAgC,OAAQ,UAAU,OAAQ,UAAU,OAAQ,iBAAiB;AAEnG,mCAAiC,OAAM,KAAK;AAC5C,QAAA,MAAuB,MAAK,QAAQ,WAAW,KAAK;AAA7C,QAAA,QAAA,IAAA;AAAM,QAAA,UAAA,IAAA;AACX,QAAI,SAAQ,UAAS,MAAK,WAAW,SAAS,MAAK,WAAW,WAAU;AACxE,QAAI,UAAS,UAAS,MAAK,WAAW,UAAS,KAAK;AACpD,QAAI,OAAQ,UAAU,UAAS,OAAM,mBAAmB,SAAO;AAAE,aAAO,YAAY;;AACpF,QAAK,EAAC,UAAS,OAAM,mBAAmB,YAAa,EAAC,WAAU,QAAO,mBAAmB,UAAU;AAClG,UAAI,QAAK;AAAE,eAAO,YAAY;iBACrB,SAAM;AAAE,eAAO,YAAY;;;;AAIxC,uBAAqB,SAAS;AAC5B,YAAQ,kBAAkB;AAC1B,QAAI,OAAQ,UAAU,QAAQ,WAAW;AAAE,cAAQ,YAAY;AAAO,cAAQ,eAAe;;AAC7F,WAAO;;AAGT,yBAAuB,SAAS;AAC9B,YAAQ,kBAAkB;AAC1B,QAAI,QAAQ,cAAc;AAAE,cAAQ,YAAY;AAAM,cAAQ,eAAe;;;AAG/E,wCAAsC,OAAM;AAC1C,QAAI,OAAM,MAAK,IAAI;AACnB,SAAI,oBAAoB,mBAAmB,MAAK;AAChD,QAAI,SAAS,MAAK,KAAK;AACvB,QAAI,QAAO,OAAO,YAAY,UAAS,OAAO;AAC9C,SAAI,iBAAiB,mBAAmB,MAAK,qBAAkB,WAAS;AACtE,UAAI,OAAO,cAAc,SAAQ,OAAO,gBAAgB,SAAQ;AAC9D,aAAI,oBAAoB,mBAAmB,MAAK;AAChD,mBAAU,WAAO;AACf,cAAI,CAAC,oBAAoB,UAAS,MAAK,MAAM,UAAU,SAC/D;AAAU,kBAAK,IAAI,UAAU,OAAO;;WAC3B;;;;AAKT,+BAA6B,OAAM;AACjC,QAAI,SAAS,MAAK,KAAK,gBAAgB,QAAQ,SAAS;AACxD,QAAI,QAAO,MAAK,cAAc,KAAK,MAAM,MAAK,YAAY;AAC1D,QAAI,KAAG;AAAE,YAAM,OAAO,MAAK,YAAY,SAAS,SAAQ;WAC1D;AAAO,YAAM,OAAO,OAAM;;AACxB,UAAM,SAAS;AACf,WAAO;AACP,WAAO,SAAS;AAMhB,QAAI,CAAC,OAAO,CAAC,MAAK,MAAM,UAAU,WAAW,OAAQ,MAAM,OAAQ,cAAc,IAAI;AACnF,YAAK,WAAW;AAChB,YAAK,WAAW;;;AAIb,6BAA2B,OAAM,KAAK;AAC3C,QAAI,eAAe,eAAe;AAChC,UAAI,OAAO,MAAK,QAAQ,OAAO,IAAI;AACnC,UAAI,QAAQ,MAAK,sBAAsB;AACrC,2BAAmB;AACnB,YAAI,MAAI;AAAE,eAAK;;AACf,cAAK,uBAAuB;;WAEzB;AACL,yBAAmB;;;AAKvB,8BAA4B,OAAM;AAChC,QAAI,MAAK,sBAAsB;AAC7B,UAAI,MAAK,qBAAqB,QAClC;AAAM,cAAK,qBAAqB;;AAC5B,YAAK,uBAAuB;;;AAIzB,4BAA0B,OAAM,SAAS,OAAO,MAAM;AAC3D,WAAO,MAAK,SAAS,0BAAwB,SAAE,GAAA;AAAA,aAAK,EAAE,OAAM,SAAS;UAChE,cAAc,QAAQ,SAAS,OAAO;;AAGtC,gCAA8B,OAAM;AACzC,QAAI,MAAK,YAAY,MAAK,KAAK,iBAAiB,MAAK,KAAG;AAAE,aAAO;;AACjE,WAAO,aAAa;;AAGf,wBAAsB,OAAM;AACjC,QAAI,MAAM,MAAK,KAAK;AACpB,QAAI,CAAC,IAAI,YAAU;AAAE,aAAO;;AAC5B,QAAI;AAIF,aAAO,MAAK,IAAI,SAAS,IAAI,WAAW,YAAY,IAAI,IAAI,WAAW,aAAa,IAAI,eACrF,OAAK,YAAY,MAAK,IAAI,SAAS,IAAI,UAAU,YAAY,IAAI,IAAI,UAAU,aAAa,IAAI;aAC7F,GAAN;AACA,aAAO;;;AAIJ,8BAA4B,OAAM;AACvC,QAAI,YAAY,MAAK,QAAQ,WAAW,MAAK,MAAM,UAAU,QAAQ;AACrE,QAAI,SAAS,MAAK,KAAK;AACvB,WAAO,qBAAqB,UAAU,MAAM,UAAU,QAAQ,OAAO,YAAY,OAAO;;AC1L1F,8BAA4B,QAAO,KAAK;AACxC,QAAA,MAAyB,OAAM;AAAxB,QAAA,UAAA,IAAA;AAAS,QAAA,QAAA,IAAA;AACd,QAAI,QAAQ,MAAM,IAAI,QAAQ,IAAI,SAAS,QAAQ,IAAI;AACvD,QAAI,SAAS,CAAC,MAAM,OAAO,gBAAgB,QAAQ,MAAM,QAAQ,OAAM,IAAI,QAAQ,MAAM,IAAI,MAAM,UAAU,MAAM,YAAY;AAC/H,WAAO,UAAU,UAAU,SAAS,QAAQ;;AAG9C,kBAAe,OAAM,KAAK;AACxB,UAAK,SAAS,MAAK,MAAM,GAAG,aAAa,KAAK;AAC9C,WAAO;;AAGT,8BAA4B,OAAM,KAAK,MAAM;AAC3C,QAAI,MAAM,MAAK,MAAM;AACrB,QAAI,eAAe,eAAe;AAChC,UAAI,CAAC,IAAI,SAAS,KAAK,QAAQ,OAAO,IAAI;AACxC,eAAO;iBACE,MAAK,eAAe,MAAM,IAAI,UAAU,SAAS;AAC1D,YAAI,OAAO,mBAAmB,MAAK,OAAO;AAC1C,YAAI,QAAS,gBAAgB,eAAc;AAAE,iBAAO,OAAM,OAAM;;AAChE,eAAO;iBACE,CAAE,QAAQ,OAAO,KAAK,QAAQ,OAAO,KAAK;AACnD,YAAI,QAAQ,IAAI,OAAO,QAAO,MAAM,aAAa,OAAO,MAAM,IAAI,MAAM,aAAa,MAAM,WAAW;AACtG,YAAI,CAAC,SAAQ,MAAK,QAAM;AAAE,iBAAO;;AACjC,YAAI,UAAU,MAAM,IAAI,MAAM,MAAM,MAAK,WAAW,MAAM;AAC1D,YAAI,CAAE,OAAK,UAAW,QAAO,MAAK,QAAQ,OAAO,aAAa,CAAC,KAAK,aAAW;AAAE,iBAAO;;AACxF,YAAI,cAAc,aAAa,QAAO;AACpC,iBAAO,OAAM,OAAM,IAAI,cAAc,MAAM,IAAI,MAAK,MAAM,IAAI,QAAQ,MAAM,MAAM,MAAK,YAAY;mBAC1F,OAAQ,QAAQ;AAIzB,iBAAO,OAAM,OAAM,IAAI,cAAc,MAAK,MAAM,IAAI,QAAQ,MAAM,IAAI,UAAU,UAAU,MAAK;eAC1F;AACL,iBAAO;;;eAGF,eAAe,iBAAiB,IAAI,KAAK,UAAU;AAC5D,aAAO,OAAM,OAAM,IAAI,cAAc,MAAM,IAAI,IAAI,MAAM,IAAI;WACxD;AACL,UAAI,SAAO,mBAAmB,MAAK,OAAO;AAC1C,UAAI,QAAI;AAAE,eAAO,OAAM,OAAM;;AAC7B,aAAO;;;AAIX,mBAAiB,OAAM;AACrB,WAAO,MAAK,YAAY,IAAI,MAAK,UAAU,SAAS,MAAK,WAAW;;AAGtE,uBAAqB,KAAK;AACxB,QAAI,OAAO,IAAI;AACf,WAAO,QAAQ,KAAK,QAAQ,KAAM,KAAI,eAAe,IAAI,YAAY;;AAKvE,gCAA8B,OAAM;AAClC,QAAI,MAAM,MAAK,KAAK;AACpB,QAAI,QAAO,IAAI,WAAW,UAAS,IAAI;AACvC,QAAI,CAAC,OAAI;AAAE;;AACX,QAAI,UAAU,YAAY,QAAQ;AAIlC,QAAI,OAAQ,SAAS,MAAK,YAAY,KAAK,UAAS,QAAQ,UAAS,YAAY,MAAK,WAAW,WAAQ;AAAE,cAAQ;;AACnH,eAAS;AACP,UAAI,UAAS,GAAG;AACd,YAAI,MAAK,YAAY,GAAG;AACtB;eACK;AACL,cAAI,UAAS,MAAK,WAAW,UAAS;AACtC,cAAI,YAAY,UAAS;AACvB,uBAAW;AACX,yBAAa,EAAE;qBACN,QAAO,YAAY,GAAG;AAC/B,oBAAO;AACP,sBAAS,MAAK,UAAU;iBACzB;AAAM;;;iBAEA,YAAY,QAAO;AAC5B;aACK;AACL,YAAI,OAAO,MAAK;AAChB,eAAO,QAAQ,YAAY,OAAO;AAChC,qBAAW,MAAK;AAChB,uBAAa,SAAS;AACtB,iBAAO,KAAK;;AAEd,YAAI,CAAC,MAAM;AACT,kBAAO,MAAK;AACZ,cAAI,SAAQ,MAAK,KAAG;AAAE;;AACtB,oBAAS;eACJ;AACL,kBAAO;AACP,oBAAS,QAAQ;;;;AAIvB,QAAI,OAAK;AAAE,kBAAY,OAAM,KAAK,OAAM;eAC/B,UAAQ;AAAE,kBAAY,OAAM,KAAK,UAAU;;;AAKtD,iCAA+B,OAAM;AACnC,QAAI,MAAM,MAAK,KAAK;AACpB,QAAI,QAAO,IAAI,WAAW,UAAS,IAAI;AACvC,QAAI,CAAC,OAAI;AAAE;;AACX,QAAI,MAAM,QAAQ;AAClB,QAAI,UAAU;AACd,eAAS;AACP,UAAI,UAAS,KAAK;AAChB,YAAI,MAAK,YAAY,GAAC;AAAE;;AACxB,YAAI,SAAQ,MAAK,WAAW;AAC5B,YAAI,YAAY,SAAQ;AACtB,qBAAW;AACX,uBAAa,EAAE;eAEvB;AAAW;;iBACI,YAAY,QAAO;AAC5B;aACK;AACL,YAAI,OAAO,MAAK;AAChB,eAAO,QAAQ,YAAY,OAAO;AAChC,qBAAW,KAAK;AAChB,uBAAa,SAAS,QAAQ;AAC9B,iBAAO,KAAK;;AAEd,YAAI,CAAC,MAAM;AACT,kBAAO,MAAK;AACZ,cAAI,SAAQ,MAAK,KAAG;AAAE;;AACtB,oBAAS,MAAM;eACV;AACL,kBAAO;AACP,oBAAS;AACT,gBAAM,QAAQ;;;;AAIpB,QAAI,UAAQ;AAAE,kBAAY,OAAM,KAAK,UAAU;;;AAGjD,uBAAqB,KAAK;AACxB,QAAI,OAAO,IAAI;AACf,WAAO,QAAQ,KAAK,QAAQ,KAAK,KAAK;;AAGxC,uBAAqB,OAAM,KAAK,OAAM,SAAQ;AAC5C,QAAI,mBAAmB,MAAM;AAC3B,UAAI,QAAQ,SAAS;AACrB,YAAM,OAAO,OAAM;AACnB,YAAM,SAAS,OAAM;AACrB,UAAI;AACJ,UAAI,SAAS;eACJ,IAAI,QAAQ;AACrB,UAAI,OAAO,OAAM;;AAEnB,UAAK,YAAY;AACZ,QAAA,SAAA,MAAA;AAEL,eAAU,WAAO;AACf,UAAI,MAAK,SAAS,QAAK;AAAE,uBAAe;;OACvC;;AAOL,4BAA0B,OAAM,KAAK,MAAM;AACzC,QAAI,MAAM,MAAK,MAAM;AACrB,QAAI,eAAe,iBAAiB,CAAC,IAAI,SAAS,KAAK,QAAQ,OAAO,IAAE;AAAE,aAAO;;AACjF,QAAI,OAAQ,OAAO,KAAK,QAAQ,OAAO,IAAE;AAAE,aAAO;;AAC7C,QAAA,QAAA,IAAA;AAAO,QAAA,MAAA,IAAA;AAEZ,QAAI,CAAC,MAAM,OAAO,iBAAiB,MAAK,eAAe,MAAM,IAAI,OAAO,SAAS;AAC/E,UAAI,OAAO,mBAAmB,MAAK,OAAO;AAC1C,UAAI,QAAS,gBAAgB,eACjC;AAAM,eAAO,OAAM,OAAM;;;AAEvB,QAAI,CAAC,MAAM,OAAO,eAAe;AAC/B,UAAI,OAAO,MAAM,IAAI,QAAQ;AAC7B,UAAI,SAAS,eAAe,eAAe,UAAU,KAAK,MAAM,OAAO,UAAU,SAAS,MAAM;AAChG,aAAO,SAAS,OAAM,OAAM,UAAU;;AAExC,WAAO;;AAGT,sCAAoC,OAAM,KAAK;AAC7C,QAAI,CAAE,OAAK,MAAM,qBAAqB,gBAAc;AAAE,aAAO;;AAC/D,QAAA,MAAgC,MAAK,MAAM;AAApC,QAAA,QAAA,IAAA;AAAO,QAAA,UAAA,IAAA;AAAS,QAAA,SAAA,IAAA;AACrB,QAAI,CAAC,MAAM,WAAW,UAAQ;AAAE,aAAO;;AACvC,QAAI,CAAC,QAAK;AAAE,aAAO;;AACnB,QAAI,MAAK,eAAe,MAAM,IAAI,YAAY,aAAW;AAAE,aAAO;;AAClE,QAAI,WAAW,CAAC,MAAM,cAAe,OAAM,IAAI,MAAM,aAAa,MAAM;AACxE,QAAI,YAAY,CAAC,SAAS,QAAQ;AAChC,UAAI,KAAK,MAAK,MAAM;AACpB,UAAI,MAAM,GAAC;AAAE,WAAG,OAAO,MAAM,MAAM,SAAS,UAAU,MAAM;aAChE;AAAS,WAAG,OAAO,MAAM,KAAK,MAAM,MAAM,SAAS;;AAC/C,YAAK,SAAS;AACd,aAAO;;AAET,WAAO;;AAGT,0BAAwB,OAAM,OAAM,QAAO;AACzC,UAAK,YAAY;AACjB,UAAK,kBAAkB;AACvB,UAAK,YAAY;;AAQnB,8BAA4B,OAAM;AAChC,QAAI,CAAC,OAAQ,UAAU,MAAK,MAAM,UAAU,MAAM,eAAe,GAAC;AAAE;;AACtE,QAAA,MAAiC,MAAK,KAAK;AAApC,QAAA,YAAA,IAAA;AAAW,QAAA,cAAA,IAAA;AAChB,QAAI,aAAa,UAAU,YAAY,KAAK,eAAe,KACvD,UAAU,cAAc,UAAU,WAAW,mBAAmB,SAAS;AAC3E,UAAI,SAAQ,UAAU;AACtB,qBAAe,OAAM,QAAO;AAC5B,iBAAU,WAAA;AAAA,eAAO,eAAe,OAAM,QAAO;SAAQ;;;AAWzD,mBAAiB,OAAO;AACtB,QAAI,UAAS;AACb,QAAI,MAAM,SAAO;AAAE,iBAAU;;AAC7B,QAAI,MAAM,SAAO;AAAE,iBAAU;;AAC7B,QAAI,MAAM,QAAM;AAAE,iBAAU;;AAC5B,QAAI,MAAM,UAAQ;AAAE,iBAAU;;AAC9B,WAAO;;AAGF,0BAAwB,OAAM,OAAO;AAC1C,QAAI,OAAO,MAAM,SAAS,OAAO,QAAQ;AACzC,QAAI,QAAQ,KAAM,OAAQ,OAAO,QAAQ,MAAM,QAAQ,KAAM;AAC3D,aAAO,2BAA2B,OAAM,OAAO,qBAAqB;eAC3D,QAAQ,MAAO,OAAQ,OAAO,QAAQ,MAAM,QAAQ,KAAM;AACnE,aAAO,2BAA2B,OAAM,MAAM,sBAAsB;eAC3D,QAAQ,MAAM,QAAQ,IAAI;AACnC,aAAO;eACE,QAAQ,IAAI;AACrB,aAAO,mBAAmB,OAAM,IAAI,SAAS,qBAAqB;eACzD,QAAQ,IAAI;AACrB,aAAO,mBAAmB,OAAM,GAAG,SAAS,sBAAsB;eACzD,QAAQ,IAAI;AACrB,aAAO,iBAAiB,OAAM,IAAI,SAAS,qBAAqB;eACvD,QAAQ,IAAI;AACrB,aAAO,mBAAmB,UAAS,iBAAiB,OAAM,GAAG,SAAS,sBAAsB;eACnF,QAAS,QAAQ,MAAM,MAAM,QAC5B,SAAQ,MAAM,QAAQ,MAAM,QAAQ,MAAM,QAAQ,KAAK;AACjE,aAAO;;AAET,WAAO;;AChQT,wBAAsB,OAAM,OAAO,KAAK;AACxC,QAAA,MAAuD,MAAK,QAAQ,WAAW,OAAO;AAAzE,QAAA,SAAA,IAAA;AAAQ,QAAA,aAAA,IAAA;AAAY,QAAA,WAAA,IAAA;AAAU,QAAA,QAAA,IAAA;AAAM,QAAA,KAAA,IAAA;AAE/C,QAAI,SAAS,MAAK,KAAK,gBAAgB,QAAO,MAAM,SAAS,OAAO;AACpE,QAAI,UAAU,MAAK,IAAI,SAAS,OAAO,YAAY,IAAI,SAAS,OAAO,aAAa;AAClF,cAAO,CAAC,EAAC,MAAM,QAAQ,QAAQ,OAAO;AACtC,UAAI,CAAC,mBAAmB,SAC5B;AAAM,cAAK,KAAK,EAAC,MAAM,OAAO,WAAW,QAAQ,OAAO;;;AAItD,QAAI,OAAQ,UAAU,MAAK,gBAAgB,GAAG;AAC5C,eAAS,MAAM,UAAU,MAAM,YAAY,OAAO;AAChD,YAAI,QAAO,OAAO,WAAW,MAAM,IAAI,OAAO,MAAK;AACnD,YAAI,MAAK,YAAY,QAAQ,CAAC,MAAM;AAAE,qBAAW;AAAK;;AACtD,YAAI,CAAC,QAAQ,KAAK,MAAI;AAAE;;;;AAG5B,QAAI,WAAW,MAAK,MAAM;AAC1B,QAAI,SAAS,MAAK,SAAS,gBAAgB,UAAU,WAAW,MAAK,MAAM;AAC3E,QAAI,QAAQ,SAAS,QAAQ;AAE7B,QAAI,MAAM,MAAM,OAAM,OAAO,MAAM,QAAQ;MACzC,SAAS,MAAM;MACf,UAAU,MAAM,OAAO,eAAe,MAAM;MAC5C,SAAS;MACT,MAAM;MACN,IAAI;MACJ,oBAAoB,MAAM,OAAO,KAAK,KAAK,OAAO,SAAS;MAC3D,iBAAiB;MACjB,eAAe;MACnB;MACI,SAAS;;AAEX,QAAI,SAAQ,MAAK,GAAG,OAAO,MAAM;AAC/B,UAAI,WAAS,MAAK,GAAG,KAAK,OAAO,MAAK,MAAM,MAAK,GAAG;AACpD,UAAI,QAAQ,MAAI;AAAE,eAAO;;AACzB,YAAM,EAAC,QAAQ,WAAS,OAAM,MAAM,OAAO;;AAE7C,WAAO,EAAA,KAAC,MAAG,KAAK,MAAE,OAAI;;AAGxB,wBAAsB,KAAK;AACzB,QAAI,OAAO,IAAI;AACf,QAAI,MAAM;AACR,aAAO,KAAK;eACH,IAAI,YAAY,QAAQ,IAAI,YAAY;AAIjD,UAAI,OAAQ,UAAU,aAAa,KAAK,IAAI,WAAW,WAAW;AAChE,YAAI,OAAO,SAAS,cAAc;AAClC,aAAK,YAAY,SAAS,cAAc;AACxC,eAAO,EAAA;iBACE,IAAI,WAAW,aAAa,OAAO,OAAQ,UAAU,gBAAgB,KAAK,IAAI,WAAW,WAAW;AAC7G,eAAO,EAAC,QAAQ;;eAET,IAAI,YAAY,SAAS,IAAI,aAAa,qBAAqB;AACxE,aAAO,EAAC,QAAQ;;;AAIb,yBAAuB,OAAM,OAAM,IAAI,UAAU,YAAY;AAClE,QAAI,QAAO,GAAG;AACZ,UAAI,SAAS,MAAK,oBAAoB,KAAK,QAAQ,KAAK,MAAK,sBAAsB;AACnF,UAAI,SAAS,iBAAiB,OAAM;AACpC,UAAI,UAAU,CAAC,MAAK,MAAM,UAAU,GAAG,SAAS;AAC9C,YAAI,OAAK,MAAK,MAAM,GAAG,aAAa;AACpC,YAAI,UAAU,WAAS;AAAE,eAAG,QAAQ,WAAW;mBACtC,UAAU,OAAK;AAAE,eAAG;;AAC7B,cAAK,SAAS;;AAEhB;;AAGF,QAAI,UAAU,MAAK,MAAM,IAAI,QAAQ;AACrC,QAAI,SAAS,QAAQ,YAAY;AACjC,YAAO,QAAQ,OAAO,SAAS;AAC/B,SAAK,MAAK,MAAM,IAAI,QAAQ,IAAI,MAAM,SAAS;AAE/C,QAAI,MAAM,MAAK,MAAM;AACrB,QAAI,SAAQ,aAAa,OAAM,OAAM;AAGrC,QAAI,OAAQ,UAAU,MAAK,iBAAiB,OAAM,OAAO,OAAM,IAAI,UAAU,MAAK,cAAc,KAAK,MAAM;AACzG,UAAI,QAAO,MAAK,cAAc,KAAK,KAAK,MAAM;AAC9C,UAAI,OAAO,SAAQ,MAAK,YAAY,MAAK,UAAU,SAAS;AAC5D,aAAM,MAAM,EAAC,QAAQ,OAAM,IAAI,SAAS,MAAM,MAAM,OAAM,IAAI,SAAS;;AAGzE,QAAI,OAAM,MAAK,MAAM,KAAK,UAAU,KAAI,MAAM,OAAM,MAAM,OAAM;AAChE,QAAI,cAAc;AAElB,QAAI,MAAK,gBAAgB,KAAK,KAAK,QAAQ,MAAM,MAAK,iBAAiB;AACrE,qBAAe,MAAK,MAAM,UAAU;AACpC,sBAAgB;WACX;AACL,qBAAe,MAAK,MAAM,UAAU;AACpC,sBAAgB;;AAElB,UAAK,cAAc;AAEnB,QAAI,SAAS,SAAS,QAAQ,SAAS,OAAM,IAAI,SAAS,OAAM,MAAM,cAAc;AACpF,QAAI,CAAC,QAAQ;AACX,UAAI,YAAY,eAAe,iBAAiB,CAAC,IAAI,SAAS,IAAI,MAAM,WAAW,IAAI,YACnF,CAAC,MAAK,aAAa,CAAE,QAAM,OAAO,OAAM,IAAI,UAAU,OAAM,IAAI,OAAO;AACzE,iBAAS,EAAC,OAAO,IAAI,MAAM,MAAM,IAAI,IAAI,MAAM,IAAI;iBACzC,QAAQ,OAAO,MAAK,eAAe,KAAK,QAAQ,OAAO,OAAQ,YAChE,WAAW,KAAI,SAAC,GAAA;AAAA,eAAK,EAAE,YAAY,SAAS,EAAE,YAAY;YAC1D,MAAK,SAAS,iBAAe,SAAE,GAAA;AAAA,eAAK,EAAE,OAAM,SAAS,IAAI;UAAY;AAC9E,cAAK,eAAe;AACpB;aACK;AACL,YAAI,OAAM,KAAK;AACb,cAAI,QAAM,iBAAiB,OAAM,MAAK,MAAM,KAAK,OAAM;AACvD,cAAI,SAAO,CAAC,MAAI,GAAG,MAAK,MAAM,YAAU;AAAE,kBAAK,SAAS,MAAK,MAAM,GAAG,aAAa;;;AAErF;;;AAGJ,UAAK;AAIL,QAAI,MAAK,MAAM,UAAU,OAAO,MAAK,MAAM,UAAU,MACjD,OAAO,SAAS,OAAO,QACvB,MAAK,MAAM,qBAAqB,eAAe;AACjD,UAAI,OAAO,QAAQ,MAAK,MAAM,UAAU,QAAQ,OAAO,SAAS,MAAK,MAAM,UAAU,OAAO,GAAG;AAC7F,eAAO,QAAQ,MAAK,MAAM,UAAU;iBAC3B,OAAO,OAAO,MAAK,MAAM,UAAU,MAAM,OAAO,QAAQ,MAAK,MAAM,UAAU,KAAK,GAAG;AAC9F,eAAO,QAAS,MAAK,MAAM,UAAU,KAAK,OAAO;AACjD,eAAO,OAAO,MAAK,MAAM,UAAU;;;AAOvC,QAAI,OAAQ,MAAM,OAAQ,cAAc,MAAM,OAAO,QAAQ,OAAO,QAAQ,KACxE,OAAO,QAAQ,OAAO,SAAS,OAAO,QAAQ,OAAM,QACpD,OAAM,IAAI,YAAY,OAAO,QAAQ,OAAM,OAAO,GAAG,OAAO,QAAQ,OAAM,OAAO,MAAM,SAAW;AACpG,aAAO;AACP,aAAO;AACP,aAAO;;AAGT,QAAI,QAAQ,OAAM,IAAI,eAAe,OAAO,QAAQ,OAAM;AAC1D,QAAI,MAAM,OAAM,IAAI,eAAe,OAAO,OAAO,OAAM;AACvD,QAAI,eAAe,MAAM,WAAW,QAAQ,MAAM,OAAO;AACzD,QAAI;AAGJ,QAAM,QAAQ,OAAO,MAAK,eAAe,KAAK,QAAQ,OAC/C,EAAC,gBAAgB,WAAW,KAAI,SAAC,GAAA;AAAA,aAAK,EAAE,YAAY,SAAS,EAAE,YAAY;WAC5E,CAAC,gBAAgB,MAAM,MAAM,OAAM,IAAI,QAAQ,QAC9C,WAAU,UAAU,SAAS,OAAM,IAAI,QAAQ,MAAM,MAAM,IAAI,GAAG,UACnE,QAAQ,QAAQ,IAAI,QACtB,MAAK,SAAS,iBAAe,SAAE,GAAA;AAAA,aAAK,EAAE,OAAM,SAAS,IAAI;QAAY;AACvE,YAAK,eAAe;AACpB;;AAGF,QAAI,MAAK,MAAM,UAAU,SAAS,OAAO,SACrC,cAAc,MAAK,OAAO,OAAO,OAAO,MAAM,OAAO,QACrD,MAAK,SAAS,iBAAe,SAAE,GAAA;AAAA,aAAK,EAAE,OAAM,SAAS,GAAG;QAAgB;AAC1E,UAAI,OAAQ,WAAW,OAAQ,QAAM;AAAE,cAAK,YAAY;;AACxD;;AAMF,QAAI,OAAQ,UAAU,OAAQ,WAAW,OAAO,OAAO,OAAO,MAChE;AAAI,YAAK,oBAAoB,KAAK;;AAUhC,QAAI,OAAQ,WAAW,CAAC,gBAAgB,MAAM,WAAW,IAAI,WAAW,IAAI,gBAAgB,KAAK,MAAM,SAAS,IAAI,SAChH,OAAM,OAAO,OAAM,IAAI,UAAU,OAAM,IAAI,QAAQ,OAAM,IAAI,QAAQ,OAAO,MAAM;AACpF,aAAO,QAAQ;AACf,YAAM,OAAM,IAAI,eAAe,OAAO,OAAO,OAAM;AACnD,iBAAU,WAAO;AACf,cAAK,SAAS,iBAAiB,SAAU,GAAG;AAAE,iBAAO,EAAE,OAAM,SAAS,IAAI;;SACzE;;AAGL,QAAI,SAAS,OAAO,OAAO,OAAO,OAAO;AAEzC,QAAI,IAAI,aAAa,YAAY;AACjC,QAAI,cAAc;AAChB,UAAI,MAAM,OAAO,IAAI,KAAK;AAGxB,YAAI,OAAQ,MAAM,OAAQ,cAAc,MAAM,MAAM,gBAAgB,GAAG;AACrE,gBAAK,YAAY;AACjB,qBAAU,WAAA;AAAA,mBAAO,eAAe;aAAO;;AAEzC,aAAK,MAAK,MAAM,GAAG,OAAO,QAAQ;AAClC,sBAAc,KAAI,QAAQ,OAAO,OAAO,YAAY,KAAI,QAAQ,OAAO;iBAEvE,OAAO,QAAQ,OAAO,QAAS,UAAS,KAAI,QAAQ,OAAO,WAC1D,cAAa,aAAa,MAAM,OAAO,QAAQ,IAAI,MAAM,cAAc,IAAI,eACjD,OAAO,OAAO,QAAQ,IAAI,OAAO,cAAc,OAAO,OAAO,OAAO,YAC/F;AACA,aAAK,MAAK,MAAM;AAChB,YAAI,WAAW,QAAQ,OAAK;AAAE,aAAG,QAAQ,QAAQ,MAAM,WAAW;eACxE;AAAW,aAAG,WAAW,QAAQ,MAAM,WAAW;;iBACnC,MAAM,OAAO,MAAM,MAAM,SAAS,UAAU,MAAM,WAAW,IAAI,UAAW,KAAI,aAAa,IAAI,IAAI;AAE9G,YAAI,SAAO,MAAM,OAAO,YAAY,MAAM,cAAc,IAAI;AAC5D,YAAI,MAAK,SAAS,mBAAiB,SAAE,GAAA;AAAA,iBAAK,EAAE,OAAM,QAAQ,MAAM;YAAM;AAAE;;AACxE,aAAK,MAAK,MAAM,GAAG,WAAW,QAAM,QAAQ;;;AAIhD,QAAI,CAAC,IACP;AAAI,WAAK,MAAK,MAAM,GAAG,QAAQ,QAAQ,MAAM,OAAM,IAAI,MAAM,OAAO,QAAQ,OAAM,MAAM,OAAO,OAAO,OAAM;;AAC1G,QAAI,OAAM,KAAK;AACb,UAAI,QAAM,iBAAiB,OAAM,GAAG,KAAK,OAAM;AAM/C,UAAI,SAAO,CAAE,QAAQ,UAAU,OAAQ,WAAW,MAAK,aAAa,MAAI,SAC1D,QAAO,SAAS,OAAO,QAAQ,MAAK,oBAAoB,KAAK,QAAQ,QACrE,OAAI,QAAQ,UAAU,MAAI,QAAQ,GAAG,QAAQ,IAAI,QAAQ,MAC1D,OAAQ,MAAM,MAAI,SAAS,MAAI,QAAQ,SACxD;AAAM,WAAG,aAAa;;;AAEpB,QAAI,aAAW;AAAE,SAAG,YAAY;;AAChC,UAAK,SAAS,GAAG;;AAGnB,4BAA0B,OAAM,MAAK,WAAW;AAC9C,QAAI,KAAK,IAAI,UAAU,QAAQ,UAAU,QAAQ,KAAI,QAAQ,MAAI;AAAE,aAAO;;AAC1E,WAAO,iBAAiB,OAAM,KAAI,QAAQ,UAAU,SAAS,KAAI,QAAQ,UAAU;;AAOrF,wBAAsB,KAAK,MAAM;AAC/B,QAAI,WAAW,IAAI,WAAW,OAAO,YAAY,KAAK,WAAW;AACjE,QAAI,QAAQ,UAAU,UAAU,WAAW,MAAM,OAAM;AACvD,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAG;AAAE,cAAQ,UAAU,GAAG,cAAc;;AAC9E,aAAS,MAAI,GAAG,MAAI,SAAS,QAAQ,OAAG;AAAE,gBAAU,SAAS,KAAG,cAAc;;AAC9E,QAAI,MAAM,UAAU,KAAK,QAAQ,UAAU,GAAG;AAC5C,cAAO,MAAM;AACb,aAAO;AACP,gBAAM,SAAG,OAAA;AAAA,eAAQ,MAAK,KAAK,MAAK,SAAS,MAAK;;eACrC,MAAM,UAAU,KAAK,QAAQ,UAAU,GAAG;AACnD,cAAO,QAAQ;AACf,aAAO;AACP,gBAAM,SAAG,OAAA;AAAA,eAAQ,MAAK,KAAK,MAAK,cAAc,MAAK;;WAC9C;AACL,aAAO;;AAET,QAAI,UAAU;AACd,aAAS,MAAI,GAAG,MAAI,KAAK,YAAY,OAAG;AAAE,cAAQ,KAAK,QAAO,KAAK,MAAM;;AACzE,QAAI,SAAS,KAAK,SAAS,GAAG,MAAI;AAAE,aAAO,EAAA,MAAC,OAAI;;;AAGlD,yBAAuB,KAAK,QAAO,MAAK,WAAW,SAAS;AAC1D,QAAI,CAAC,UAAU,OAAO,eAElB,OAAM,UAAS,QAAQ,MAAM,UAAU,OAEvC,sBAAsB,WAAW,MAAM,SAAS,QAAQ,KAC9D;AAAI,aAAO;;AAET,QAAI,SAAS,IAAI,QAAQ;AAEzB,QAAI,OAAO,eAAe,OAAO,OAAO,QAAQ,QAAQ,CAAC,OAAO,OAAO,aACzE;AAAI,aAAO;;AACT,QAAI,QAAQ,IAAI,QAAQ,sBAAsB,QAAQ,MAAM;AAE5D,QAAI,CAAC,MAAM,OAAO,eAAe,MAAM,MAAM,QACzC,sBAAsB,OAAO,MAAM,SAAS,MAClD;AAAI,aAAO;;AAGT,WAAO,UAAU,OAAO,QAAQ,IAAI,UAAU,cAAc,GAAG,MAAM,OAAO;;AAG9E,iCAA+B,MAAM,SAAS,SAAS;AACrD,QAAI,QAAQ,KAAK,OAAO,OAAM,UAAU,KAAK,QAAQ,KAAK;AAC1D,WAAO,QAAQ,KAAM,YAAW,KAAK,WAAW,UAAU,KAAK,KAAK,OAAO,aAAa;AACtF;AACA;AACA,gBAAU;;AAEZ,QAAI,SAAS;AACX,UAAI,OAAO,KAAK,KAAK,OAAO,WAAW,KAAK,WAAW;AACvD,aAAO,QAAQ,CAAC,KAAK,QAAQ;AAC3B,eAAO,KAAK;AACZ;;;AAGJ,WAAO;;AAGT,oBAAkB,GAAG,GAAG,KAAK,cAAc,eAAe;AACxD,QAAI,SAAQ,EAAE,cAAc,GAAG;AAC/B,QAAI,UAAS,MAAI;AAAE,aAAO;;AAC5B,QAAA,MAA2B,EAAE,YAAY,GAAG,MAAM,EAAE,MAAM,MAAM,EAAE;AAAxD,QAAA,OAAA,IAAA;AAAS,QAAA,OAAA,IAAA;AACjB,QAAI,iBAAiB,OAAO;AAC1B,UAAI,SAAS,KAAK,IAAI,GAAG,SAAQ,KAAK,IAAI,MAAM;AAChD,sBAAgB,OAAO,SAAS;;AAElC,QAAI,OAAO,UAAS,EAAE,OAAO,EAAE,MAAM;AACnC,UAAI,QAAO,gBAAgB,UAAS,gBAAgB,OAAO,SAAQ,eAAe;AAClF,gBAAS;AACT,aAAO,SAAS,QAAO;AACvB,aAAO;eACE,OAAO,QAAO;AACvB,UAAI,SAAO,gBAAgB,UAAS,gBAAgB,OAAO,SAAQ,eAAe;AAClF,gBAAS;AACT,aAAO,SAAS,QAAO;AACvB,aAAO;;AAET,WAAO,EAAA,OAAC,QAAK,MAAM;;AClVd,iCAA+B,OAAM,QAAO;AACjD,QAAI,UAAU;AAAK,QAAA,WAAA,OAAA;AAAS,QAAA,YAAA,OAAA;AAAW,QAAA,UAAA,OAAA;AACvC,WAAO,YAAY,KAAK,UAAU,KAAK,SAAQ,cAAc,KAAK,SAAQ,WAAW,cAAc,GAAG;AACpG;AACA;AACA,UAAI,QAAO,SAAQ;AACnB,cAAQ,KAAK,MAAK,KAAK,MAAM,MAAK,SAAS,MAAK,KAAK,eAAe,MAAK,QAAQ;AACjF,iBAAU,MAAK;;AAGjB,QAAI,aAAa,MAAK,SAAS,0BAA0B,cAAc,WAAW,MAAK,MAAM;AAC7F,QAAI,OAAM,eAAe,OAAO,KAAI,cAAc;AAClD,SAAK,YAAY,WAAW,kBAAkB,UAAS,EAAC,UAAU;AAElE,QAAI,aAAa,KAAK,YAAY;AAClC,WAAO,cAAc,WAAW,YAAY,KAAM,aAAY,QAAQ,WAAW,SAAS,iBAAiB;AACzG,eAAS,IAAI,UAAU,SAAS,GAAG,KAAK,GAAG,KAAK;AAC9C,YAAI,UAAU,KAAI,cAAc,UAAU;AAC1C,eAAO,KAAK,YAAU;AAAE,kBAAQ,YAAY,KAAK;;AACjD,aAAK,YAAY;AACjB,YAAI,UAAU,MAAM,SAAS;AAC3B;AACA;;;AAGJ,mBAAa,KAAK;;AAGpB,QAAI,cAAc,WAAW,YAAY,GAC3C;AAAI,iBAAW,aAAa,iBAAoB,YAAS,MAAI,UAAO,MAAI,KAAK,UAAU;;AAErF,QAAI,QAAO,MAAK,SAAS,2BAAyB,SAAE,GAAA;AAAA,aAAK,EAAE;UACvD,OAAM,QAAQ,YAAY,GAAG,OAAM,QAAQ,MAAM;AAErD,WAAO,EAAC,KAAK,MAAI,MAAE;;AAKd,8BAA4B,OAAM,OAAM,MAAM,WAAW,UAAU;AACxE,QAAI,KAAK,SAAS,SAAS,OAAO,KAAK,KAAK,MAAM;AAClD,QAAI,CAAC,QAAQ,CAAC,OAAI;AAAE,aAAO;;AAC3B,QAAI,SAAS,SAAS,cAAa,UAAU,CAAC;AAC9C,QAAI,QAAQ;AACV,YAAK,SAAS,uBAAqB,SAAE,GAAK;AAAE,gBAAO,EAAE,OAAM,UAAU;;AACrE,UAAI,QAAM;AAAE,eAAO,QAAO,IAAI,MAAM,SAAS,KAAK,MAAK,MAAM,OAAO,KAAK,MAAK,QAAQ,UAAU,SAAS,GAAG,KAAK,MAAM;;AACvH,UAAI,SAAS,MAAK,SAAS,uBAAqB,SAAE,GAAA;AAAA,eAAK,EAAE,OAAM,UAAU;;AACzE,UAAI,QAAQ;AACV,iBAAQ;aACH;AACL,YAAI,SAAQ,SAAS;AAC3B,YAAA,MAAqB,MAAK;AAAf,YAAA,UAAA,IAAA;AAAoB,YAAE,aAAa,cAAc,WAAW;AACjE,cAAM,SAAS,cAAc;AAC7B,cAAK,MAAM,iBAAiB,QAAO,SAAC,OAAS;AAC3C,cAAI,IAAI,IAAI,YAAY,SAAS,cAAc;AAC/C,cAAI,OAAK;AAAE,cAAE,YAAY,WAAW,cAAc,QAAO,KAAK,OAAO;;;;WAGpE;AACL,YAAK,SAAS,uBAAqB,SAAE,GAAK;AAAE,eAAO,EAAE;;AACrD,YAAM,SAAS;AACf,UAAI,OAAQ,QAAM;AAAE,8BAAsB;;;AAG5C,QAAI,cAAc,OAAO,IAAI,cAAc;AAC3C,QAAI,YAAY,eAAe,oBAAoB,KAAK,YAAY,aAAa;AACjF,QAAI,CAAC,QAAO;AACV,UAAI,SAAS,MAAK,SAAS,sBAAsB,MAAK,SAAS,gBAAgB,UAAU,WAAW,MAAK,MAAM;AAC/G,eAAQ,OAAO,WAAW,KAAK;QAC7B,oBAAoB,CAAC,CAAE,WAAU;QACjC,SAAS;QACT,cAAA,uBAAa,MAAK;AAChB,cAAI,KAAI,YAAY,QAAQ,CAAC,KAAI,aAAW;AAAE,mBAAO,EAAC,QAAQ;;;;;AAIpE,QAAI,WAAW;AACb,eAAQ,WAAW,WAAW,QAAO,CAAC,UAAU,IAAI,CAAC,UAAU,KAAK,UAAU;WACzE;AACL,eAAQ,MAAM,QAAQ,kBAAkB,OAAM,SAAS,WAAW;AAClE,UAAI,OAAM,aAAa,OAAM,SAAS;AACpC,YAAI,YAAY,GAAG,UAAU;AAC7B,iBAAS,QAAO,OAAM,QAAQ,YAAY,YAAY,OAAM,aAAa,CAAC,MAAK,KAAK,KAAK,WACpF,aAAa,QAAO,MAAK,YAAY;;AAC1C,iBAAS,SAAO,OAAM,QAAQ,WAAW,UAAU,OAAM,WAAW,CAAC,OAAK,KAAK,KAAK,WAC/E,WAAW,SAAO,OAAK,WAAW;;AACvC,iBAAQ,WAAW,QAAO,WAAW;;;AAIzC,UAAK,SAAS,mBAAiB,SAAE,GAAK;AAAE,eAAQ,EAAE;;AAClD,WAAO;;AAWT,6BAA2B,UAAU,UAAU;AAC7C,QAAI,SAAS,aAAa,GAAC;AAAE,aAAO;;AACtC,QAAA,OAAA,SAAA,IAA4C;AACxC,UAAI,SAAS,SAAS,KAAK;AAC3B,UAAI,QAAQ,OAAO,eAAe,SAAS,MAAM;AACjD,UAAI,WAAA,QAAU,UAAS;AACvB,eAAS,QAAO,SAAC,OAAQ;AACvB,YAAI,CAAC,SAAM;AAAE;;AACb,YAAI,OAAO,MAAM,aAAa,MAAK,OAAO;AAC1C,YAAI,CAAC,MAAI;AAAE,iBAAO,UAAS;;AAC3B,YAAI,SAAS,QAAO,UAAU,SAAS,UAAU,aAAa,MAAM,UAAU,OAAM,QAAO,QAAO,SAAS,IAAI,IAAI;AACjH,kBAAO,QAAO,SAAS,KAAK;eACvB;AACL,cAAI,QAAO,QAAM;AAAE,oBAAO,QAAO,SAAS,KAAK,WAAW,QAAO,QAAO,SAAS,IAAI,SAAS;;AAC9F,cAAI,UAAU,aAAa,OAAM;AACjC,kBAAO,KAAK;AACZ,kBAAQ,MAAM,UAAU,QAAQ,MAAM,QAAQ;AAC9C,qBAAW;;;AAGf,UAAI,SAAM;AAAE,eAAA,EAAA,GAAO,SAAS,KAAK;;;AAlBnC,aAAS,IAAI,SAAS,OAAO,KAAK,GAAG,KAAG;;;;;AAoBxC,WAAO;;AAGT,wBAAsB,OAAM,MAAM,OAAU;;cAAH;AACvC,aAAS,IAAI,KAAK,SAAS,GAAG,KAAK,OAAM,KAC3C;AAAI,cAAO,KAAK,GAAG,OAAO,MAAM,SAAS,KAAK;;AAC5C,WAAO;;AAKT,wBAAsB,MAAM,UAAU,OAAM,SAAS,OAAO;AAC1D,QAAI,QAAQ,KAAK,UAAU,QAAQ,SAAS,UAAU,KAAK,UAAU,SAAS,QAAQ;AACpF,UAAI,QAAQ,aAAa,MAAM,UAAU,OAAM,QAAQ,WAAW,QAAQ;AAC1E,UAAI,OAAK;AAAE,eAAO,QAAQ,KAAK,QAAQ,QAAQ,aAAa,QAAQ,aAAa,GAAG;;AACpF,UAAI,QAAQ,QAAQ,eAAe,QAAQ;AAC3C,UAAI,MAAM,UAAU,SAAS,KAAK,SAAS,IAAI,MAAK,OAAO,KAAK,QAAQ,KAC5E;AAAM,eAAO,QAAQ,KAAK,QAAQ,QAAQ,OAAO,SAAS,KAAK,aAAa,OAAM,MAAM,QAAQ;;;;AAIhG,sBAAoB,OAAM,OAAO;AAC/B,QAAI,SAAS,GAAC;AAAE,aAAO;;AACvB,QAAI,WAAW,MAAK,QAAQ,aAAa,MAAK,aAAa,GAAG,WAAW,MAAK,WAAW,QAAQ;AACjG,QAAI,OAAO,MAAK,eAAe,MAAK,YAAY,WAAW,SAAS,OAAO;AAC3E,WAAO,MAAK,KAAK,SAAS,OAAO;;AAGnC,sBAAoB,UAAU,MAAM,OAAM,IAAI,OAAO,SAAS;AAC5D,QAAI,QAAO,OAAO,IAAI,SAAS,aAAa,SAAS,WAAW,QAAQ,MAAK;AAC7E,QAAI,QAAQ,KAAK,GAAC;AAAE,cAAQ,WAAW,OAAO,MAAM,OAAM,IAAI,QAAQ,GAAG;;AACzE,QAAI,SAAS,OACf;AAAI,cAAQ,OAAO,IAAI,MAAK,eAAe,GAAG,WAAW,OAAO,SAAS,aAAa,KAAK,WAAW,OAAO,OAAO,SAC5G,MAAM,OAAO,MAAK,eAAe,MAAK,YAAY,WAAW,SAAS,OAAO;;AACnF,WAAO,SAAS,aAAa,OAAO,IAAI,IAAI,SAAS,aAAa,GAAG,MAAK,KAAK;;AAGjF,sBAAoB,QAAO,WAAW,SAAS;AAC7C,QAAI,YAAY,OAAM,WACxB;AAAI,eAAQ,IAAI,MAAM,WAAW,OAAM,SAAS,IAAI,WAAW,OAAM,WAAW,GAAG,OAAM,UAAU,WAAW,OAAM;;AAClH,QAAI,UAAU,OAAM,SACtB;AAAI,eAAQ,IAAI,MAAM,WAAW,OAAM,SAAS,GAAG,SAAS,OAAM,SAAS,GAAG,IAAI,OAAM,WAAW;;AACjG,WAAO;;AAMT,MAAM,UAAU;IACd,OAAO,CAAC;IACR,OAAO,CAAC;IACR,OAAO,CAAC;IACR,SAAS,CAAC;IACV,UAAU,CAAC;IACX,KAAK,CAAC,SAAS;IACf,IAAI,CAAC,SAAS;IACd,IAAI,CAAC,SAAS,SAAS;IACvB,IAAI,CAAC,SAAS,SAAS;;AAGzB,MAAI,eAAe;AACnB,yBAAuB;AACrB,WAAO,gBAAiB,gBAAe,SAAS,eAAe,mBAAmB;;AAGpF,oBAAkB,MAAM;AACtB,QAAI,QAAQ,sBAAsB,KAAK;AACvC,QAAI,OAAK;AAAE,aAAO,KAAK,MAAM,MAAM,GAAG;;AACtC,QAAI,MAAM,cAAc,cAAc;AACtC,QAAI,WAAW,mBAAmB,KAAK,OAAO;AAC9C,QAAI,OAAO,YAAY,QAAQ,SAAS,GAAG,gBAC7C;AAAI,aAAO,KAAK,IAAG,SAAC,GAAA;AAAA,eAAK,MAAM,IAAI;SAAK,KAAK,MAAM,OAAO,KAAK,IAAG,SAAC,GAAA;AAAA,eAAK,OAAO,IAAI;SAAK,UAAU,KAAK;;AACrG,QAAI,YAAY;AAChB,QAAI,MAAI;AAAE,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAG;AAAE,cAAM,IAAI,cAAc,KAAK,OAAO;;;AACpF,WAAO;;AAQT,iCAA+B,KAAK;AAClC,QAAI,SAAQ,IAAI,iBAAiB,OAAQ,SAAS,mCAAmC;AACrF,aAAS,IAAI,GAAG,IAAI,OAAM,QAAQ,KAAK;AACrC,UAAI,QAAO,OAAM;AACjB,UAAI,MAAK,WAAW,UAAU,KAAK,MAAK,eAAe,UAAY,MAAK,YAC5E;AAAM,cAAK,WAAW,aAAa,IAAI,cAAc,eAAe,MAAM;;;;AAI1E,sBAAoB,QAAO,SAAS;AAClC,QAAI,CAAC,OAAM,MAAI;AAAE,aAAO;;AACxB,QAAI,UAAS,OAAM,QAAQ,WAAW,KAAK,QAAQ;AACnD,QAAI;AAAE,cAAQ,KAAK,MAAM;aACnB,GAAN;AAAW,aAAO;;AACb,QAAA,WAAA,OAAA;AAAS,QAAA,YAAA,OAAA;AAAW,QAAA,UAAA,OAAA;AACzB,aAAS,IAAI,MAAM,SAAS,GAAG,KAAK,GAAG,KAAK,GAAG;AAC7C,UAAI,OAAO,QAAO,MAAM,MAAM;AAC9B,UAAI,CAAC,QAAQ,KAAK,oBAAkB;AAAE;;AACtC,iBAAU,SAAS,KAAK,KAAK,OAAO,MAAM,IAAI,IAAI;AAClD;AAAa;;AAEf,WAAO,IAAI,MAAM,UAAS,WAAW;;AClOvC,MAAM,iBAAiB;IACrB,WAAW;IACX,eAAe;IACf,uBAAuB;IACvB,YAAY;IACZ,mBAAmB;IACnB,SAAS;;AAGX,MAAM,cAAc,OAAQ,MAAM,OAAQ,cAAc;AAExD,MAAM,iBACJ,2BAAc;AACZ,SAAK,aAAa,KAAK,eAAe,KAAK,YAAY,KAAK,cAAc;;2BAG5E,MAAA,aAAI,KAAK;AACP,SAAK,aAAa,IAAI;AAAY,SAAK,eAAe,IAAI;AAC1D,SAAK,YAAY,IAAI;AAAW,SAAK,cAAc,IAAI;;2BAGzD,KAAA,aAAG,KAAK;AACN,WAAO,IAAI,cAAc,KAAK,cAAc,IAAI,gBAAgB,KAAK,gBACnE,IAAI,aAAa,KAAK,aAAa,IAAI,eAAe,KAAK;;AAI1D,MAAM,cACX,sBAAY,OAAM,iBAAiB;;AACjC,SAAK,OAAO;AACZ,SAAK,kBAAkB;AACvB,SAAK,QAAQ;AACb,SAAK,eAAe;AACpB,SAAK,WAAW,OAAO,oBACrB,IAAI,OAAO,iBAAgB,SAAC,WAAa;AACvC,eAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAG;AAAE,eAAK,MAAM,KAAK,UAAU;;AAKrE,UAAI,OAAQ,MAAM,OAAQ,cAAc,MAAM,UAAU,KAChE,SAAU,GAAA;AAAA,eAAK,EAAE,QAAQ,eAAe,EAAE,aAAa,UACxC,EAAE,QAAQ,mBAAmB,EAAE,SAAS,SAAS,EAAE,OAAO,UAAU;UACnF;AAAU,eAAK;aAEf;AAAU,eAAK;;;AAEX,SAAK,mBAAmB,IAAI;AAC5B,QAAI,aAAa;AACf,WAAK,aAAU,SAAG,GAAK;AACrB,eAAK,MAAM,KAAK,EAAC,QAAQ,EAAE,QAAQ,MAAM,iBAAiB,UAAU,EAAE;AACtE,eAAK;;;AAGT,SAAK,oBAAoB,KAAK,kBAAkB,KAAK;AACrD,SAAK,8BAA8B;;wBAGrC,YAAA,qBAAY;;AACV,QAAI,KAAK,eAAe,GAC5B;AAAM,WAAK,eAAe,OAAO,WAAU,WAAO;AAAE,eAAK,eAAe;AAAI,eAAK;SAAW;;;wBAG1F,aAAA,sBAAa;AACX,QAAI,KAAK,eAAe,IAAI;AAC1B,aAAO,aAAa,KAAK;AACzB,WAAK,eAAe;AACpB,WAAK;;;wBAIT,QAAA,kBAAQ;AACN,QAAI,KAAK,UACb;AAAM,WAAK,SAAS,QAAQ,KAAK,KAAK,KAAK;;AACvC,QAAI,aACR;AAAM,WAAK,KAAK,IAAI,iBAAiB,4BAA4B,KAAK;;AAClE,SAAK;;wBAGP,OAAA,gBAAO;;AACL,QAAI,KAAK,UAAU;AACjB,UAAI,OAAO,KAAK,SAAS;AACzB,UAAI,KAAK,QAAQ;AACf,iBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAG;AAAE,eAAK,MAAM,KAAK,KAAK;;AAC3D,eAAO,WAAU,WAAA;AAAA,iBAAO,OAAK;WAAS;;AAExC,WAAK,SAAS;;AAEhB,QAAI,aAAW;AAAE,WAAK,KAAK,IAAI,oBAAoB,4BAA4B,KAAK;;AACpF,SAAK;;wBAGP,mBAAA,4BAAmB;AACjB,SAAK,KAAK,IAAI,cAAc,iBAAiB,mBAAmB,KAAK;;wBAGvE,sBAAA,+BAAsB;AACpB,SAAK,KAAK,IAAI,cAAc,oBAAoB,mBAAmB,KAAK;;wBAG1E,2BAAA,oCAA2B;;AACzB,SAAK,8BAA8B;AACnC,eAAU,WAAA;AAAA,aAAO,OAAK,8BAA8B;OAAO;;wBAG7D,oBAAA,6BAAoB;AAClB,QAAI,CAAC,qBAAqB,KAAK,OAAK;AAAE;;AACtC,QAAI,KAAK,6BAA2B;AAAE,aAAO,eAAe,KAAK;;AAIjE,QAAI,OAAQ,MAAM,OAAQ,cAAc,MAAM,CAAC,KAAK,KAAK,MAAM,UAAU,OAAO;AAC9E,UAAI,MAAM,KAAK,KAAK,KAAK;AAEzB,UAAI,IAAI,aAAa,qBAAqB,IAAI,WAAW,IAAI,aAAa,IAAI,YAAY,IAAI,eACpG;AAAQ,eAAO,KAAK;;;AAEhB,SAAK;;wBAGP,kBAAA,2BAAkB;AAChB,SAAK,iBAAiB,IAAI,KAAK,KAAK,KAAK;;wBAG3C,wBAAA,+BAAsB,KAAK;AACzB,QAAI,IAAI,cAAc,GAAC;AAAE,aAAO;;AAChC,QAAI,YAAY,IAAI,WAAW,GAAG;AAClC,QAAI,OAAO,KAAK,KAAK,QAAQ,YAAY;AACzC,QAAI,QAAQ,KAAK,eAAe,EAAC,MAAM,aAAa,QAAQ,UAAU,YAAY,IAAI,UAAU,aAAa,cAAa;AACxH,WAAK;AACL,aAAO;;;wBAIX,QAAA,iBAAQ;AACN,QAAI,CAAC,KAAK,KAAK,WAAW,KAAK,eAAe,IAAE;AAAE;;AAClD,QAAI,YAAY,KAAK,WAAW,KAAK,SAAS,gBAAgB;AAC9D,QAAI,KAAK,MAAM,QAAQ;AACrB,kBAAY,KAAK,MAAM,OAAO;AAC9B,WAAK,MAAM,SAAS;;AAGtB,QAAI,MAAM,KAAK,KAAK,KAAK;AACzB,QAAI,SAAS,CAAC,KAAK,+BAA+B,CAAC,KAAK,iBAAiB,GAAG,QAAQ,aAAa,KAAK,SAAS,CAAC,KAAK,sBAAsB;AAE3I,QAAI,QAAO,IAAI,KAAK,IAAI,WAAW,OAAO,QAAQ;AAClD,QAAI,KAAK,KAAK,UAAU;AACtB,eAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACzC,YAAI,WAAS,KAAK,iBAAiB,UAAU,IAAI;AACjD,YAAI,UAAQ;AACV,kBAAO,QAAO,IAAI,SAAO,OAAO,KAAK,IAAI,SAAO,MAAM;AACtD,eAAK,KAAK,IAAI,SAAO,KAAK,KAAK,IAAI,SAAO,IAAI;AAC9C,cAAI,SAAO,UAAQ;AAAE,uBAAW;;;;;AAKtC,QAAI,OAAQ,SAAS,MAAM,SAAS,GAAG;AACrC,UAAI,MAAM,MAAM,OAAM,SAAC,GAAA;AAAA,eAAK,EAAE,YAAY;;AAC1C,UAAI,IAAI,UAAU,GAAG;AACd,YAAA,IAAA,IAAA;AAAG,YAAA,IAAA,IAAA;AACR,YAAI,EAAE,cAAc,EAAE,WAAW,cAAc,EAAE,YAAU;AAAE,YAAE;eACvE;AAAa,YAAE;;;;AAIX,QAAI,QAAO,MAAM,QAAQ;AACvB,UAAI,QAAO,IAAI;AACb,aAAK,KAAK,QAAQ,UAAU,OAAM;AAClC,iBAAS,KAAK;;AAEhB,WAAK,gBAAgB,OAAM,IAAI,UAAU;AACzC,UAAI,KAAK,KAAK,QAAQ,OAAK;AAAE,aAAK,KAAK,YAAY,KAAK,KAAK;iBACpD,CAAC,KAAK,iBAAiB,GAAG,MAAI;AAAE,uBAAe,KAAK;;AAC7D,WAAK,iBAAiB,IAAI;;;wBAI9B,mBAAA,0BAAiB,KAAK,OAAO;AAE3B,QAAI,MAAM,QAAQ,IAAI,UAAU,IAAE;AAAE,aAAO;;AAC3C,QAAI,OAAO,KAAK,KAAK,QAAQ,YAAY,IAAI;AAC7C,QAAI,IAAI,QAAQ,gBACX,SAAQ,KAAK,KAAK,WAAW,IAAI,iBAAiB,qBAEjD,IAAI,iBAAiB,WAAW,CAAC,IAAI,YAAY,CAAC,IAAI,OAAO,aAAa,WACpF;AAAM,aAAO;;AACT,QAAI,CAAC,QAAQ,KAAK,eAAe,MAAI;AAAE,aAAO;;AAE9C,QAAI,IAAI,QAAQ,aAAa;AAC3B,eAAS,IAAI,GAAG,IAAI,IAAI,WAAW,QAAQ,KAAG;AAAE,cAAM,KAAK,IAAI,WAAW;;AAC1E,UAAI,KAAK,cAAc,KAAK,cAAc,KAAK,OAAO,CAAC,KAAK,WAAW,SAAS,IAAI,SAC1F;AAAQ,eAAO,EAAC,MAAM,KAAK,WAAW,IAAI,KAAK;;AACzC,UAAI,OAAO,IAAI,iBAAiB,OAAO,IAAI;AAC3C,UAAI,OAAQ,MAAM,OAAQ,cAAc,MAAM,IAAI,WAAW,QAAQ;AAGnE,iBAAS,MAAI,GAAG,MAAI,IAAI,WAAW,QAAQ,OAAK;AACxD,cAAA,MAA+C,IAAI,WAAW;AAA/C,cAAA,kBAAA,IAAA;AAAiB,cAAA,cAAA,IAAA;AACtB,cAAI,CAAC,mBAAmB,MAAM,UAAU,QAAQ,KAAK,IAAI,YAAY,mBAAmB,GAAC;AAAE,mBAAO;;AAClG,cAAI,CAAC,eAAe,MAAM,UAAU,QAAQ,KAAK,IAAI,YAAY,eAAe,GAAC;AAAE,mBAAO;;;;AAG9F,UAAI,aAAa,QAAQ,KAAK,cAAc,IAAI,SAC1C,SAAS,QAAQ,IAAI;AAC3B,UAAI,QAAO,KAAK,gBAAgB,IAAI,QAAQ,YAAY;AACxD,UAAI,WAAW,QAAQ,KAAK,cAAc,IAAI,SACxC,SAAS,QAAQ,IAAI,OAAO,WAAW;AAC7C,UAAI,KAAK,KAAK,gBAAgB,IAAI,QAAQ,UAAU;AACpD,aAAO,EAAA,MAAC,OAAI;eACH,IAAI,QAAQ,cAAc;AACnC,aAAO,EAAC,MAAM,KAAK,aAAa,KAAK,QAAQ,IAAI,KAAK,WAAW,KAAK;WACjE;AACL,aAAO;QACL,MAAM,KAAK;QACX,IAAI,KAAK;QAKT,UAAU,IAAI,OAAO,aAAa,IAAI;;;;AAM9C,MAAI,aAAa;AAEjB,oBAAkB,OAAM;AACtB,QAAI,YAAU;AAAE;;AAChB,iBAAa;AACb,QAAI,iBAAiB,MAAK,KAAK,cAAc,UAC/C;AAAI,cAAQ,QAAQ;;;AC9NpB,MAAM,WAAW;AAAjB,MAAqB,eAAe;AAE7B,qBAAmB,OAAM;AAC9B,UAAK,WAAW;AAChB,UAAK,YAAY;AACjB,UAAK,cAAc;AACnB,UAAK,kBAAkB;AACvB,UAAK,YAAY,EAAC,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,MAAM;AAC7C,UAAK,sBAAsB;AAC3B,UAAK,oBAAoB;AAEzB,UAAK,eAAe;AACpB,UAAK,8BAA8B;AACnC,UAAK,oBAAoB;AAEzB,UAAK,YAAY;AACjB,UAAK,mBAAmB;AACxB,UAAK,mBAAmB;AACxB,UAAK,qBAAqB;AAE1B,UAAK,cAAc,IAAI,YAAY,OAAI,SAAG,OAAM,IAAI,UAAU,OAAK;AAAA,aAAK,cAAc,OAAM,OAAM,IAAI,UAAU;;AAChH,UAAK,YAAY;AAEjB,UAAK,iBAAiB;AAEtB,UAAK,gBAAgB,OAAO,OAAO;AACrC,QAAA,OAAA,SAAA,QAA8B;AAC1B,UAAI,UAAU,SAAS;AACvB,YAAK,IAAI,iBAAiB,QAAO,MAAK,cAAc,UAAM,SAAG,QAAS;AACpE,YAAI,mBAAmB,OAAM,WAAU,CAAC,iBAAiB,OAAM,WAC1D,OAAK,YAAY,CAAE,QAAM,QAAQ,gBAC5C;AAAQ,kBAAQ,OAAM;;;;AALpB,aAAS,SAAS;AAAQ,WAAA;AAW1B,QAAI,OAAQ,QAAM;AAAE,YAAK,IAAI,iBAAiB,SAAO,WAAA;AAAA,eAAQ;;;AAE7D,oBAAgB;;AAGlB,8BAA4B,OAAM,QAAQ;AACxC,UAAK,sBAAsB;AAC3B,UAAK,oBAAoB,KAAK;;AAGzB,wBAAsB,OAAM;AACjC,UAAK,YAAY;AACjB,aAAS,QAAQ,MAAK,eACxB;AAAI,YAAK,IAAI,oBAAoB,MAAM,MAAK,cAAc;;AACxD,iBAAa,MAAK;AAClB,iBAAa,MAAK;;AAGb,2BAAyB,OAAM;AACpC,UAAK,SAAS,mBAAiB,SAAE,iBAAmB;AAClD,eAAS,QAAQ,iBAAe;AAAE,YAAI,CAAC,MAAK,cAAc,OAC9D;AAAM,gBAAK,IAAI,iBAAiB,MAAM,MAAK,cAAc,QAAK,SAAG,OAAA;AAAA,mBAAS,iBAAiB,OAAM;;;;;;AAIjG,4BAA0B,OAAM,OAAO;AACrC,WAAO,MAAK,SAAS,mBAAiB,SAAE,WAAY;AAClD,UAAI,UAAU,UAAS,MAAM;AAC7B,aAAO,UAAU,QAAQ,OAAM,UAAU,MAAM,mBAAmB;;;AAItE,8BAA4B,OAAM,OAAO;AACvC,QAAI,CAAC,MAAM,SAAO;AAAE,aAAO;;AAC3B,QAAI,MAAM,kBAAgB;AAAE,aAAO;;AACnC,aAAS,QAAO,MAAM,QAAQ,SAAQ,MAAK,KAAK,QAAO,MAAK,YAC9D;AAAI,UAAI,CAAC,SAAQ,MAAK,YAAY,MACzB,MAAK,cAAc,MAAK,WAAW,UAAU,QACtD;AAAM,eAAO;;;AACX,WAAO;;AAGF,yBAAuB,OAAM,OAAO;AACzC,QAAI,CAAC,iBAAiB,OAAM,UAAU,SAAS,MAAM,SAChD,OAAK,YAAY,CAAE,OAAM,QAAQ,gBACxC;AAAI,eAAS,MAAM,MAAM,OAAM;;;AAG/B,eAAa,UAAO,SAAI,OAAM,OAAU;AACtC,UAAK,WAAW,MAAM,WAAW,MAAM,MAAM;AAC7C,QAAI,oBAAoB,OAAM,QAAM;AAAE;;AACtC,QAAI,MAAM,WAAW,KAAG;AAAE,YAAK,YAAY;;AAC3C,UAAK,cAAc,MAAM;AACzB,UAAK,kBAAkB,KAAK;AAK5B,QAAI,OAAQ,OAAO,MAAM,WAAW,MAAM,CAAC,MAAM,WAAW,CAAC,MAAM,UAAU,CAAC,MAAM,SAAS;AAC3F,UAAI,MAAM,KAAK;AACf,YAAK,eAAe;AACpB,YAAK,8BAA8B,WAAU,WAAO;AAClD,YAAI,MAAK,gBAAgB,KAAK;AAC5B,gBAAK,SAAS,iBAAe,SAAE,GAAA;AAAA,mBAAK,EAAE,OAAM,SAAS,IAAI;;AACzD,gBAAK,eAAe;;SAErB;eACM,MAAK,SAAS,iBAAe,SAAE,GAAA;AAAA,aAAK,EAAE,OAAM;UAAW,eAAe,OAAM,QAAQ;AAC7F,YAAM;WACD;AACL,yBAAmB,OAAM;;;AAI7B,eAAa,QAAK,SAAI,OAAM,GAAM;AAChC,QAAI,EAAE,WAAW,IAAE;AAAE,YAAK,WAAW;;;AAGvC,eAAa,WAAQ,SAAI,OAAM,OAAU;AACvC,QAAI,oBAAoB,OAAM,UAAU,CAAC,MAAM,YAC3C,MAAM,WAAW,CAAC,MAAM,UAAU,OAAQ,OAAO,MAAM,SAAO;AAAE;;AAEpE,QAAI,MAAK,SAAS,kBAAgB,SAAE,GAAA;AAAA,aAAK,EAAE,OAAM;QAAS;AACxD,YAAM;AACN;;AAGF,QAAI,MAAM,MAAK,MAAM;AACrB,QAAI,CAAE,gBAAe,kBAAkB,CAAC,IAAI,MAAM,WAAW,IAAI,MAAM;AACrE,UAAI,QAAO,OAAO,aAAa,MAAM;AACrC,UAAI,CAAC,MAAK,SAAS,mBAAiB,SAAE,GAAA;AAAA,eAAK,EAAE,OAAM,IAAI,MAAM,KAAK,IAAI,IAAI,KAAK;UACnF;AAAM,cAAK,SAAS,MAAK,MAAM,GAAG,WAAW,OAAM;;AAC/C,YAAM;;;AAIV,uBAAqB,OAAO;AAAE,WAAO,EAAC,MAAM,MAAM,SAAS,KAAK,MAAM;;AAEtE,kBAAgB,OAAO,OAAO;AAC5B,QAAI,KAAK,MAAM,IAAI,MAAM,SAAS,KAAK,MAAM,IAAI,MAAM;AACvD,WAAO,KAAK,KAAK,KAAK,KAAK;;AAG7B,+BAA6B,OAAM,UAAU,KAAK,QAAQ,OAAO;AAC/D,QAAI,UAAU,IAAE;AAAE,aAAO;;AACzB,QAAI,OAAO,MAAK,MAAM,IAAI,QAAQ;AACpC,QAAA,OAAA,SAAA,IAA2C;AACvC,UAAI,MAAK,SAAS,UAAQ,SAAE,GAAA;AAAA,eAAK,KAAI,KAAK,QAAQ,EAAE,OAAM,KAAK,KAAK,WAAW,KAAK,OAAO,KAAI,OAAO,QACpD,EAAE,OAAM,KAAK,KAAK,KAAK,KAAI,KAAK,OAAO,KAAI,OAAO;UACxG;AAAM,eAAA,EAAA,GAAO;;;AAHX,aAAS,IAAI,KAAK,QAAQ,GAAG,IAAI,GAAG,KAAG;;;;;AAKvC,WAAO;;AAGT,2BAAyB,OAAM,WAAW,QAAQ;AAChD,QAAI,CAAC,MAAK,SAAO;AAAE,YAAK;;AACxB,QAAI,KAAK,MAAK,MAAM,GAAG,aAAa;AACpC,QAAI,UAAU,WAAS;AAAE,SAAG,QAAQ,WAAW;;AAC/C,UAAK,SAAS;;AAGhB,6BAA2B,OAAM,QAAQ;AACvC,QAAI,UAAU,IAAE;AAAE,aAAO;;AACzB,QAAI,OAAO,MAAK,MAAM,IAAI,QAAQ,SAAS,QAAO,KAAK;AACvD,QAAI,SAAQ,MAAK,UAAU,cAAc,aAAa,QAAO;AAC3D,sBAAgB,OAAM,IAAI,cAAc,OAAO;AAC/C,aAAO;;AAET,WAAO;;AAGT,6BAA2B,OAAM,QAAQ;AACvC,QAAI,UAAU,IAAE;AAAE,aAAO;;AACzB,QAAI,MAAM,MAAK,MAAM,WAAW,cAAc;AAC9C,QAAI,eAAe,eAAa;AAAE,qBAAe,IAAI;;AAErD,QAAI,OAAO,MAAK,MAAM,IAAI,QAAQ;AAClC,aAAS,IAAI,KAAK,QAAQ,GAAG,IAAI,GAAG,KAAK;AACvC,UAAI,QAAO,IAAI,KAAK,QAAQ,KAAK,YAAY,KAAK,KAAK;AACvD,UAAI,cAAc,aAAa,QAAO;AACpC,YAAI,gBAAgB,IAAI,MAAM,QAAQ,KAClC,KAAK,IAAI,MAAM,SAAS,KAAK,OAAO,IAAI,MAAM,QAAQ,MAAM,IAAI,MAAM,KAChF;AAAQ,qBAAW,KAAK,OAAO,IAAI,MAAM;eAEzC;AAAQ,qBAAW,KAAK,OAAO;;AACzB;;;AAIJ,QAAI,YAAY,MAAM;AACpB,sBAAgB,OAAM,cAAc,OAAO,MAAK,MAAM,KAAK,WAAW;AACtE,aAAO;WACF;AACL,aAAO;;;AAIX,6BAA2B,OAAM,KAAK,QAAQ,OAAO,YAAY;AAC/D,WAAO,oBAAoB,OAAM,iBAAiB,KAAK,QAAQ,UAC7D,MAAK,SAAS,eAAa,SAAE,GAAA;AAAA,aAAK,EAAE,OAAM,KAAK;UAC9C,cAAa,kBAAkB,OAAM,UAAU,kBAAkB,OAAM;;AAG5E,6BAA2B,OAAM,KAAK,QAAQ,OAAO;AACnD,WAAO,oBAAoB,OAAM,uBAAuB,KAAK,QAAQ,UACnE,MAAK,SAAS,qBAAmB,SAAE,GAAA;AAAA,aAAK,EAAE,OAAM,KAAK;;;AAGzD,6BAA2B,OAAM,KAAK,QAAQ,OAAO;AACnD,WAAO,oBAAoB,OAAM,uBAAuB,KAAK,QAAQ,UACnE,MAAK,SAAS,qBAAmB,SAAE,GAAA;AAAA,aAAK,EAAE,OAAM,KAAK;UACrD,mBAAmB,OAAM,QAAQ;;AAGrC,8BAA4B,OAAM,QAAQ,OAAO;AAC/C,QAAI,MAAM,UAAU,GAAC;AAAE,aAAO;;AAC9B,QAAI,OAAM,MAAK,MAAM;AACrB,QAAI,UAAU,IAAI;AAChB,UAAI,KAAI,eAAe;AACrB,wBAAgB,OAAM,cAAc,OAAO,MAAK,GAAG,KAAI,QAAQ,OAAO;AACtE,eAAO;;AAET,aAAO;;AAGT,QAAI,OAAO,KAAI,QAAQ;AACvB,aAAS,IAAI,KAAK,QAAQ,GAAG,IAAI,GAAG,KAAK;AACvC,UAAI,QAAO,IAAI,KAAK,QAAQ,KAAK,YAAY,KAAK,KAAK;AACvD,UAAI,UAAU,KAAK,OAAO;AAC1B,UAAI,MAAK,eACb;AAAM,wBAAgB,OAAM,cAAc,OAAO,MAAK,UAAU,GAAG,UAAU,IAAI,MAAK,QAAQ,OAAO;iBACxF,cAAc,aAAa,QACxC;AAAM,wBAAgB,OAAM,cAAc,OAAO,MAAK,UAAU;aAEhE;AAAM;;AACF,aAAO;;;AAIX,yBAAuB,OAAM;AAC3B,WAAO,eAAe;;AAGxB,MAAM,qBAAqB,OAAQ,MAAM,YAAY;AAErD,WAAS,YAAS,SAAI,OAAM,OAAU;AACpC,UAAK,WAAW,MAAM;AACtB,QAAI,UAAU,cAAc;AAC5B,QAAI,MAAM,KAAK,OAAO,OAAO;AAC7B,QAAI,MAAM,MAAK,UAAU,OAAO,OAAO,OAAO,OAAO,MAAK,cAAc,CAAC,MAAM,qBAAqB;AAClG,UAAI,MAAK,UAAU,QAAQ,eAAa;AAAE,eAAO;iBACxC,MAAK,UAAU,QAAQ,eAAa;AAAE,eAAO;;;AAExD,UAAK,YAAY,EAAC,MAAM,KAAK,GAAG,MAAM,SAAS,GAAG,MAAM,SAAO;AAE/D,QAAI,MAAM,MAAK,YAAY,YAAY;AACvC,QAAI,CAAC,KAAG;AAAE;;AAEV,QAAI,QAAQ,eAAe;AACzB,UAAI,MAAK,WAAS;AAAE,cAAK,UAAU;;AACnC,YAAK,YAAY,IAAI,UAAU,OAAM,KAAK,OAAO;eACvC,SAAQ,gBAAgB,oBAAoB,mBAAmB,OAAM,IAAI,KAAK,IAAI,QAAQ,QAAQ;AAC5G,YAAM;WACD;AACL,yBAAmB,OAAM;;;AAI7B,MAAM,YACJ,oBAAY,OAAM,KAAK,OAAO,SAAS;;AACrC,SAAK,OAAO;AACZ,SAAK,WAAW,MAAK,MAAM;AAC3B,SAAK,MAAM;AACX,SAAK,QAAQ;AACb,SAAK,UAAU;AACf,SAAK,aAAa,MAAM;AACxB,SAAK,eAAe,MAAM;AAC1B,SAAK,uBAAuB;AAE5B,QAAI,YAAY;AAChB,QAAI,IAAI,SAAS,IAAI;AACnB,mBAAa,MAAK,MAAM,IAAI,OAAO,IAAI;AACvC,kBAAY,IAAI;WACX;AACL,UAAI,OAAO,MAAK,MAAM,IAAI,QAAQ,IAAI;AACtC,mBAAa,KAAK;AAClB,kBAAY,KAAK,QAAQ,KAAK,WAAW;;AAG3C,SAAK,YAAY;AAEjB,QAAM,SAAS,UAAU,OAAO,MAAM;AACtC,QAAM,aAAa,SAAS,MAAK,QAAQ,YAAY,QAAQ,QAAQ;AACrE,SAAK,SAAS,aAAa,WAAW,MAAM;AAEhD,QAAA,MAAsB,MAAK;AAAlB,QAAA,YAAA,IAAA;AACL,QAAI,MAAM,UAAU,KAChB,WAAW,KAAK,KAAK,aAAa,WAAW,KAAK,KAAK,eAAe,SACtE,qBAAqB,iBAAiB,UAAU,QAAQ,aAAa,UAAU,KAAK,WAC5F;AAAM,WAAK,YAAY;QAAC,MAAM;QACN,KAAK;QACL,SAAS,KAAK,UAAU,CAAC,KAAK,OAAO;QACrC,eAAe,KAAK,UAAU,OAAQ,SAAS,CAAC,KAAK,OAAO,aAAa;;;AAE7F,QAAI,KAAK,UAAU,KAAK,aAAc,MAAK,UAAU,WAAW,KAAK,UAAU,gBAAgB;AAC7F,WAAK,KAAK,YAAY;AACtB,UAAI,KAAK,UAAU,SAAO;AAAE,aAAK,OAAO,YAAY;;AACpD,UAAI,KAAK,UAAU,eACzB;AAAQ,mBAAU,WAAO;AACf,cAAI,OAAK,KAAK,aAAa,QAAI;AAAE,mBAAK,OAAO,aAAa,mBAAmB;;WAC5E;;AACL,WAAK,KAAK,YAAY;;AAGxB,UAAK,KAAK,iBAAiB,WAAW,KAAK,KAAK,KAAK,GAAG,KAAK;AAC7D,UAAK,KAAK,iBAAiB,aAAa,KAAK,OAAO,KAAK,KAAK,KAAK;AACnE,uBAAmB,OAAM;;sBAG3B,OAAA,gBAAO;;AACL,SAAK,KAAK,KAAK,oBAAoB,WAAW,KAAK;AACnD,SAAK,KAAK,KAAK,oBAAoB,aAAa,KAAK;AACrD,QAAI,KAAK,aAAa,KAAK,QAAQ;AACjC,WAAK,KAAK,YAAY;AACtB,UAAI,KAAK,UAAU,SAAO;AAAE,aAAK,OAAO,gBAAgB;;AACxD,UAAI,KAAK,UAAU,eAAa;AAAE,aAAK,OAAO,gBAAgB;;AAC9D,WAAK,KAAK,YAAY;;AAExB,QAAI,KAAK,sBAAoB;AAAE,iBAAU,WAAA;AAAA,eAAO,eAAe,OAAK;;;AACpE,SAAK,KAAK,YAAY;;sBAGxB,KAAA,YAAG,OAAO;AACR,SAAK;AAEL,QAAI,CAAC,KAAK,KAAK,IAAI,SAAS,MAAM,OAAO,YAAY,IAAI,MAAM,OAAO,aAAa,MAAM,SAC7F;AAAM;;AAEF,QAAI,MAAM,KAAK;AACf,QAAI,KAAK,KAAK,MAAM,OAAO,KAAK,UAAQ;AAAE,YAAM,KAAK,KAAK,YAAY,YAAY;;AAElF,QAAI,KAAK,gBAAgB,CAAC,KAAK;AAC7B,yBAAmB,KAAK,MAAM;eACrB,kBAAkB,KAAK,MAAM,IAAI,KAAK,IAAI,QAAQ,OAAO,KAAK,aAAa;AACpF,YAAM;eACG,MAAM,UAAU,KACf,MAAK,WAEJ,OAAQ,UAAU,KAAK,aAAa,CAAC,KAAK,UAAU,KAAK,UAQzD,OAAQ,UAAU,CAAE,MAAK,KAAK,MAAM,qBAAqB,kBACzD,KAAK,IAAI,KAAK,IAAI,IAAI,MAAM,KAAK,KAAK,MAAM,UAAU,OAC7C,KAAK,IAAI,IAAI,MAAM,KAAK,KAAK,MAAM,UAAU,QAAQ,IAAK;AAC9E,sBAAgB,KAAK,MAAM,UAAU,KAAK,KAAK,KAAK,MAAM,IAAI,QAAQ,IAAI,OAAO;AACjF,YAAM;WACD;AACL,yBAAmB,KAAK,MAAM;;;sBAIlC,OAAA,cAAK,OAAO;AACV,QAAI,CAAC,KAAK,gBAAiB,MAAK,IAAI,KAAK,MAAM,IAAI,MAAM,WAAW,KACzC,KAAK,IAAI,KAAK,MAAM,IAAI,MAAM,WAAW,IACxE;AAAM,WAAK,eAAe;;AACtB,uBAAmB,KAAK,MAAM;AAC9B,QAAI,MAAM,WAAW,GAAC;AAAE,WAAK;;;AAIjC,WAAS,YAAS,SAAG,OAAQ;AAC3B,kBAAc;AACd,uBAAmB,OAAM;;AAG3B,WAAS,cAAW,SAAG,OAAA;AAAA,WAAQ,cAAc;;AAE7C,+BAA6B,OAAM,OAAO;AACxC,QAAI,MAAK,WAAS;AAAE,aAAO;;AAW3B,QAAI,OAAQ,UAAU,KAAK,IAAI,MAAM,YAAY,MAAK,sBAAsB,KAAK;AAC/E,YAAK,qBAAqB;AAC1B,aAAO;;AAET,WAAO;;AAIT,MAAM,qBAAqB,OAAQ,UAAU,MAAO;AAEpD,eAAa,mBAAmB,aAAa,oBAAiB,SAAG,OAAQ;AACvE,QAAI,CAAC,MAAK,WAAW;AACnB,YAAK,YAAY;AACZ,UAAA,SAAA,MAAA;AAAa,UAAE,OAAO,OAAM,UAAU;AAC3C,UAAI,OAAM,UAAU,SACf,QAAM,eACL,CAAC,KAAK,cAAc,KAAK,gBAAgB,KAAK,WAAW,MAAM,KAAI,SAAC,GAAA;AAAA,eAAK,EAAE,KAAK,KAAK,cAAc;WAAU;AAEjH,cAAK,aAAa,MAAK,MAAM,eAAe,KAAK;AACjD,uBAAe,OAAM;AACrB,cAAK,aAAa;aACb;AACL,uBAAe;AAIf,YAAI,OAAQ,SAAS,OAAM,UAAU,SAAS,KAAK,gBAAgB,CAAC,KAAK,cAAc,KAAK,WAAW,MAAM,QAAQ;AACnH,cAAI,MAAM,MAAK,KAAK;AACpB,mBAAS,QAAO,IAAI,WAAW,UAAS,IAAI,aAAa,SAAQ,MAAK,YAAY,KAAK,WAAU,KAAI;AACnG,gBAAI,UAAS,UAAS,IAAI,MAAK,YAAY,MAAK,WAAW,UAAS;AACpE,gBAAI,CAAC,SAAM;AAAE;;AACb,gBAAI,QAAO,YAAY,GAAG;AACxB,kBAAI,SAAS,SAAQ,QAAO,UAAU;AACtC;mBACK;AACL,sBAAO;AACP,wBAAS;;;;;AAKjB,YAAK,YAAY;;AAEnB,uBAAmB,OAAM;;AAG3B,eAAa,iBAAc,SAAI,OAAM,OAAU;AAC7C,QAAI,MAAK,WAAW;AAClB,YAAK,YAAY;AACjB,YAAK,qBAAqB,MAAM;AAChC,yBAAmB,OAAM;;;AAI7B,8BAA4B,OAAM,OAAO;AACvC,iBAAa,MAAK;AAClB,QAAI,QAAQ,IAAE;AAAE,YAAK,mBAAmB,WAAU,WAAA;AAAA,eAAO,eAAe;SAAO;;;AAG1E,4BAA0B,OAAM;AACrC,QAAI,MAAK,WAAW;AAClB,YAAK,YAAY;AACjB,YAAK,qBAAqB;;AAE5B,WAAO,MAAK,iBAAiB,SAAS,GAAC;AAAE,YAAK,iBAAiB,MAAM;;;AAGvE,sCAAoC;AAClC,QAAI,QAAQ,SAAS,YAAY;AACjC,UAAM,UAAU,SAAS,MAAM;AAC/B,WAAO,MAAM;;AAGR,0BAAwB,OAAM,aAAa;AAChD,UAAK,YAAY;AACjB,qBAAiB;AACjB,QAAI,eAAe,MAAK,QAAQ,OAAO;AACrC,UAAI,MAAM,iBAAiB;AAC3B,UAAI,OAAO,CAAC,IAAI,GAAG,MAAK,MAAM,YAAU;AAAE,cAAK,SAAS,MAAK,MAAM,GAAG,aAAa;aACvF;AAAS,cAAK,YAAY,MAAK;;AAC3B,aAAO;;AAET,WAAO;;AAGT,uBAAqB,OAAM,KAAK;AAG9B,QAAI,CAAC,MAAK,IAAI,YAAU;AAAE;;AAC1B,QAAI,OAAO,MAAK,IAAI,WAAW,YAAY,SAAS,cAAc;AAClE,SAAK,YAAY;AACjB,SAAK,MAAM,UAAU;AACrB,QAAI,MAAM,gBAAgB,QAAQ,SAAS;AAC3C,UAAM,mBAAmB;AAIzB,UAAK,IAAI;AACT,QAAI;AACJ,QAAI,SAAS;AACb,eAAU,WAAO;AACf,UAAI,KAAK,YAAU;AAAE,aAAK,WAAW,YAAY;;AACjD,YAAK;OACJ;;AAML,MAAM,qBAAsB,OAAQ,MAAM,OAAQ,aAAa,MACxD,OAAQ,OAAO,OAAQ,iBAAiB;AAE/C,WAAS,OAAO,aAAa,MAAG,SAAI,OAAM,GAAM;AAC9C,QAAI,MAAM,MAAK,MAAM,WAAW,OAAM,EAAE,QAAQ;AAChD,QAAI,IAAI,OAAK;AAAE;;AAGf,QAAI,OAAO,qBAAqB,OAAO,EAAE;AACzC,QAAI,SAAQ,IAAI;cAAyB,sBAAsB,OAAM;AAAzC,QAAA,MAAA,IAAA;AAAK,QAAA,QAAA,IAAA;AACjC,QAAI,MAAM;AACR,QAAE;AACF,WAAK;AACL,WAAK,QAAQ,aAAa,IAAI;AAC9B,WAAK,QAAQ,cAAc;WACtB;AACL,kBAAY,OAAM;;AAEpB,QAAI,MAAG;AAAE,YAAK,SAAS,MAAK,MAAM,GAAG,kBAAkB,iBAAiB,QAAQ,WAAW;;;AAG7F,2BAAyB,QAAO;AAC9B,WAAO,OAAM,aAAa,KAAK,OAAM,WAAW,KAAK,OAAM,QAAQ,cAAc,IAAI,OAAM,QAAQ,aAAa;;AAGlH,wBAAsB,OAAM,GAAG;AAC7B,QAAI,CAAC,MAAK,IAAI,YAAU;AAAE;;AAC1B,QAAI,YAAY,MAAK,YAAY,MAAK,MAAM,UAAU,MAAM,OAAO,KAAK,KAAK;AAC7E,QAAI,SAAS,MAAK,IAAI,WAAW,YAAY,SAAS,cAAc,YAAY,aAAa;AAC7F,QAAI,CAAC,WAAS;AAAE,aAAO,kBAAkB;;AACzC,WAAO,MAAM,UAAU;AACvB,WAAO;AACP,eAAU,WAAO;AACf,YAAK;AACL,UAAI,OAAO,YAAU;AAAE,eAAO,WAAW,YAAY;;AACrD,UAAI,WAAS;AAAE,gBAAQ,OAAM,OAAO,OAAO,MAAM;aACrD;AAAS,gBAAQ,OAAM,OAAO,aAAa,OAAO,WAAW;;OACxD;;AAGL,mBAAiB,OAAM,OAAM,MAAM,GAAG;AACpC,QAAI,SAAQ,mBAAmB,OAAM,OAAM,MAAM,MAAK,UAAU,MAAK,MAAM,UAAU;AACrF,QAAI,MAAK,SAAS,eAAa,SAAE,GAAA;AAAA,aAAK,EAAE,OAAM,GAAG,UAAS,MAAM;QAAO;AAAE,aAAO;;AAChF,QAAI,CAAC,QAAK;AAAE,aAAO;;AAEnB,QAAI,aAAa,gBAAgB;AACjC,QAAI,KAAK,aAAa,MAAK,MAAM,GAAG,qBAAqB,YAAY,MAAK,YAAY,MAAK,MAAM,GAAG,iBAAiB;AACrH,UAAK,SAAS,GAAG,iBAAiB,QAAQ,SAAS,MAAM,QAAQ,WAAW;AAC5E,WAAO;;AAGT,eAAa,QAAK,SAAI,OAAM,GAAM;AAChC,QAAI,OAAO,qBAAqB,OAAO,EAAE;AACzC,QAAI,QAAQ,QAAQ,OAAM,KAAK,QAAQ,eAAe,KAAK,QAAQ,cAAc,IAAE;AAAE,QAAE;WACzF;AAAO,mBAAa,OAAM;;;AAG1B,MAAM,WACJ,mBAAY,QAAO,OAAM;AACvB,SAAK,QAAQ;AACb,SAAK,OAAO;;AAIhB,MAAM,mBAAmB,OAAQ,MAAM,WAAW;AAElD,WAAS,YAAS,SAAI,OAAM,GAAM;AAChC,QAAI,YAAY,MAAK;AACrB,QAAI,WAAS;AAAE,gBAAU;;AACzB,QAAI,CAAC,EAAE,cAAY;AAAE;;AAErB,QAAI,MAAM,MAAK,MAAM;AACrB,QAAI,MAAM,IAAI,QAAQ,OAAO,MAAK,YAAY,YAAY;AAC1D,QAAI,OAAO,IAAI,OAAO,IAAI,QAAQ,IAAI,OAAQ,gBAAe,gBAAgB,IAAI,KAAK,IAAG,IAAI;AAAK;aAEvF,aAAa,UAAU,WAAW;AAC3C,YAAK,SAAS,MAAK,MAAM,GAAG,aAAa,cAAc,OAAO,MAAK,MAAM,KAAK,UAAU,UAAU;eACzF,EAAE,UAAU,EAAE,OAAO,YAAY,GAAG;AAC7C,UAAI,OAAO,MAAK,QAAQ,YAAY,EAAE,QAAQ;AAC9C,UAAI,QAAQ,KAAK,KAAK,KAAK,KAAK,aAAa,QAAQ,MAAK,SAC9D;AAAM,cAAK,SAAS,MAAK,MAAM,GAAG,aAAa,cAAc,OAAO,MAAK,MAAM,KAAK,KAAK;;;AAEvF,QAAI,SAAQ,MAAK,MAAM,UAAU;cAAyB,sBAAsB,OAAM;AAAzC,QAAA,MAAA,IAAA;AAAK,QAAA,QAAA,IAAA;AAClD,MAAE,aAAa;AACf,MAAE,aAAa,QAAQ,qBAAqB,SAAS,aAAa,IAAI;AAEtE,MAAE,aAAa,gBAAgB;AAC/B,QAAI,CAAC,oBAAkB;AAAE,QAAE,aAAa,QAAQ,cAAc;;AAC9D,UAAK,WAAW,IAAI,SAAS,QAAO,CAAC,EAAE;;AAGzC,WAAS,UAAO,SAAG,OAAQ;AACzB,QAAI,WAAW,MAAK;AACpB,WAAO,WAAU,WAAO;AACtB,UAAI,MAAK,YAAY,UAAQ;AAAG,cAAK,WAAW;;OAC/C;;AAGL,eAAa,WAAW,aAAa,YAAS,SAAI,GAAG,GAAC;AAAA,WAAK,EAAE;;AAE7D,eAAa,OAAI,SAAI,OAAM,GAAM;AAC/B,QAAI,WAAW,MAAK;AACpB,UAAK,WAAW;AAEhB,QAAI,CAAC,EAAE,cAAY;AAAE;;AAErB,QAAI,WAAW,MAAK,YAAY,YAAY;AAC5C,QAAI,CAAC,UAAQ;AAAE;;AACf,QAAI,SAAS,MAAK,MAAM,IAAI,QAAQ,SAAS;AAC7C,QAAI,CAAC,QAAM;AAAE;;AACb,QAAI,SAAQ,YAAY,SAAS;AACjC,QAAI,QAAO;AACT,YAAK,SAAS,mBAAiB,SAAE,GAAK;AAAE,iBAAQ,EAAE;;WAC7C;AACL,eAAQ,mBAAmB,OAAM,EAAE,aAAa,QAAQ,qBAAqB,SAAS,eAC3D,qBAAqB,OAAO,EAAE,aAAa,QAAQ,cAAc,OAAO;;AAErG,QAAI,QAAO,YAAY,CAAC,EAAE;AAC1B,QAAI,MAAK,SAAS,cAAY,SAAE,GAAA;AAAA,aAAK,EAAE,OAAM,GAAG,UAAS,MAAM,OAAO;QAAQ;AAC5E,QAAE;AACF;;AAEF,QAAI,CAAC,QAAK;AAAE;;AAEZ,MAAE;AACF,QAAI,YAAY,SAAQ,UAAU,MAAK,MAAM,KAAK,OAAO,KAAK,UAAS,OAAO;AAC9E,QAAI,aAAa,MAAI;AAAE,kBAAY,OAAO;;AAE1C,QAAI,KAAK,MAAK,MAAM;AACpB,QAAI,OAAI;AAAE,SAAG;;AAEb,QAAI,MAAM,GAAG,QAAQ,IAAI;AACzB,QAAI,SAAS,OAAM,aAAa,KAAK,OAAM,WAAW,KAAK,OAAM,QAAQ,cAAc;AACvF,QAAI,eAAe,GAAG;AACtB,QAAI,QACN;AAAI,SAAG,iBAAiB,KAAK,KAAK,OAAM,QAAQ;WAEhD;AAAI,SAAG,aAAa,KAAK,KAAK;;AAC5B,QAAI,GAAG,IAAI,GAAG,eAAa;AAAE;;AAE7B,QAAI,OAAO,GAAG,IAAI,QAAQ;AAC1B,QAAI,UAAU,cAAc,aAAa,OAAM,QAAQ,eACnD,KAAK,aAAa,KAAK,UAAU,WAAW,OAAM,QAAQ,aAAa;AACzE,SAAG,aAAa,IAAI,cAAc;WAC7B;AACL,UAAI,OAAM,GAAG,QAAQ,IAAI;AACzB,SAAG,QAAQ,KAAK,GAAG,QAAQ,KAAK,SAAS,GAAG,QAAO,SAAE,OAAO,KAAK,UAAU,OAAK;AAAA,eAAK,OAAM;;AAC3F,SAAG,aAAa,iBAAiB,OAAM,MAAM,GAAG,IAAI,QAAQ;;AAE9D,UAAK;AACL,UAAK,SAAS,GAAG,QAAQ,WAAW;;AAGtC,WAAS,QAAK,SAAG,OAAQ;AACvB,QAAI,CAAC,MAAK,SAAS;AACjB,YAAK,YAAY;AACjB,YAAK,IAAI,UAAU,IAAI;AACvB,YAAK,YAAY;AACjB,YAAK,UAAU;AACf,iBAAU,WAAO;AACf,YAAI,MAAK,WAAW,MAAK,cAAc,CAAC,MAAK,YAAY,iBAAiB,GAAG,MAAK,KAAK,iBAC7F;AAAQ,yBAAe;;SAChB;;;AAIP,WAAS,OAAI,SAAI,OAAM,GAAM;AAC3B,QAAI,MAAK,SAAS;AAChB,YAAK,YAAY;AACjB,YAAK,IAAI,UAAU,OAAO;AAC1B,YAAK,YAAY;AACjB,UAAI,EAAE,iBAAiB,MAAK,IAAI,SAAS,EAAE,gBAC/C;AAAM,cAAK,YAAY,iBAAiB,IAAI;;AACxC,YAAK,UAAU;;;AAInB,WAAS,cAAW,SAAI,OAAM,OAAU;AAMtC,QAAI,OAAQ,UAAU,OAAQ,WAAW,MAAM,aAAa,yBAAyB;AAC9E,UAAA,iBAAA,MAAA;AACL,iBAAU,WAAO;AACf,YAAI,MAAK,kBAAkB,gBAAc;AAAE;;AAE3C,cAAK,IAAI;AACT,cAAK;AACL,YAAI,MAAK,SAAS,iBAAe,SAAE,GAAA;AAAA,iBAAK,EAAE,OAAM,SAAS,GAAG;YAAc;AAAE;;AAClF,YAAA,MAAsB,MAAK,MAAM;AAAtB,YAAA,UAAA,IAAA;AAEL,YAAI,WAAW,QAAQ,MAAM,GAAC;AAAE,gBAAK,SAAS,MAAK,MAAM,GAAG,OAAO,QAAQ,MAAM,GAAG,QAAQ,KAAK;;SAChG;;;AAKP,OAAS,QAAQ,cAAY;AAAE,aAAS,QAAQ,aAAa;;AAApD;ACzsBT,uBAAqB,GAAG,GAAG;AACzB,QAAI,KAAK,GAAC;AAAE,aAAO;;AACnB,aAAS,KAAK,GAAC;AAAE,UAAI,EAAE,OAAO,EAAE,IAAE;AAAE,eAAO;;;AAC3C,aAAS,OAAK,GAAC;AAAE,UAAI,CAAE,QAAK,IAAE;AAAE,eAAO;;;AACvC,WAAO;;AAGT,MAAM,aACJ,qBAAY,OAAO,MAAM;AACvB,SAAK,OAAO,QAAQ;AACpB,SAAK,OAAO,KAAK,KAAK,QAAQ;AAC9B,SAAK,QAAQ;;uBAGf,MAAA,cAAI,SAAS,MAAM,SAAQ,WAAW;AACxC,QAAA,MAAyB,QAAQ,UAAU,KAAK,OAAO,WAAW,KAAK,OAAO,IAAI,KAAK;AAA9E,QAAA,MAAA,IAAA;AAAK,QAAA,UAAA,IAAA;AACV,WAAO,UAAU,OAAO,IAAI,WAAW,MAAM,SAAQ,MAAM,SAAQ;;uBAGrE,QAAA,iBAAQ;AAAE,WAAO;;uBAEjB,KAAA,aAAG,OAAO;AACR,WAAO,QAAQ,SACZ,iBAAiB,cAChB,MAAK,KAAK,OAAO,KAAK,KAAK,OAAO,MAAM,KAAK,OAC7C,KAAK,SAAS,MAAM,SAAS,YAAY,KAAK,MAAM,MAAM;;uBAGhE,UAAA,kBAAQ,OAAM;AACZ,QAAI,KAAK,KAAK,SAAO;AAAE,WAAK,KAAK,QAAQ;;;AAI7C,MAAM,aACJ,qBAAY,OAAO,MAAM;AACvB,SAAK,OAAO,QAAQ;AACpB,SAAK,QAAQ;;uBAGf,MAAA,cAAI,SAAS,MAAM,SAAQ,WAAW;AACpC,QAAI,QAAO,QAAQ,IAAI,KAAK,OAAO,WAAW,KAAK,KAAK,iBAAiB,KAAK,KAAK;AACnF,QAAI,KAAK,QAAQ,IAAI,KAAK,KAAK,WAAW,KAAK,KAAK,eAAe,IAAI,MAAM;AAC7E,WAAO,SAAQ,KAAK,OAAO,IAAI,WAAW,OAAM,IAAI;;uBAGtD,QAAA,gBAAM,GAAG,MAAM;AAAE,WAAO,KAAK,OAAO,KAAK;;uBAEzC,KAAA,aAAG,OAAO;AACR,WAAO,QAAQ,SACZ,iBAAiB,cAAc,YAAY,KAAK,OAAO,MAAM,UAC7D,YAAY,KAAK,MAAM,MAAM;;AAGlC,aAAO,KAAA,YAAG,MAAM;AAAE,WAAO,KAAK,gBAAgB;;AAGhD,MAAM,YACJ,mBAAY,OAAO,MAAM;AACvB,SAAK,OAAO,QAAQ;AACpB,SAAK,QAAQ;;sBAGf,MAAA,cAAI,SAAS,MAAM,SAAQ,WAAW;AACpC,QAAI,QAAO,QAAQ,UAAU,KAAK,OAAO,WAAW;AACpD,QAAI,MAAK,SAAO;AAAE,aAAO;;AACzB,QAAI,KAAK,QAAQ,UAAU,KAAK,KAAK,WAAW;AAChD,QAAI,GAAG,WAAW,GAAG,OAAO,MAAK,KAAG;AAAE,aAAO;;AAC7C,WAAO,IAAI,WAAW,MAAK,MAAM,SAAQ,GAAG,MAAM,SAAQ;;sBAG5D,QAAA,gBAAM,OAAM,MAAM;AACpB,QAAA,MAA0B,MAAK,QAAQ,UAAU,KAAK;AAA7C,QAAA,SAAA,IAAA;AAAO,QAAA,UAAA,IAAA;AAA2C,QAAE;AACzD,WAAO,WAAU,KAAK,QAAQ,CAAE,UAAQ,MAAK,MAAM,SAAQ,UAAU,UAAS,OAAM,YAAY,KAAK;;sBAGvG,KAAA,aAAG,OAAO;AACR,WAAO,QAAQ,SACZ,iBAAiB,aAAY,YAAY,KAAK,OAAO,MAAM,UAC3D,YAAY,KAAK,MAAM,MAAM;;MAOvB,aACX,qBAAY,OAAM,IAAI,MAAM;AAG1B,SAAK,OAAO;AAIZ,SAAK,KAAK;AACV,SAAK,OAAO;;;uBAGd,OAAA,eAAK,OAAM,IAAI;AACb,WAAO,IAAI,WAAW,OAAM,IAAI,KAAK;;uBAGvC,KAAA,aAAG,OAAO,SAAY;;gBAAH;AACjB,WAAO,KAAK,KAAK,GAAG,MAAM,SAAS,KAAK,OAAO,WAAU,MAAM,QAAQ,KAAK,KAAK,WAAU,MAAM;;uBAGnG,MAAA,eAAI,SAAS,SAAQ,WAAW;AAC9B,WAAO,KAAK,KAAK,IAAI,SAAS,MAAM,SAAQ;;AAwD9C,aAAO,SAAA,gBAAO,KAAK,OAAO,MAAM;AAC9B,WAAO,IAAI,WAAW,KAAK,KAAK,IAAI,WAAW,OAAO;;AAoBxD,aAAO,SAAA,gBAAO,OAAM,IAAI,OAAO,MAAM;AACnC,WAAO,IAAI,WAAW,OAAM,IAAI,IAAI,WAAW,OAAO;;AAYxD,aAAO,OAAA,eAAK,OAAM,IAAI,OAAO,MAAM;AACjC,WAAO,IAAI,WAAW,OAAM,IAAI,IAAI,UAAS,OAAO;;AAMtD,wBAAI,KAAA,MAAA,WAAO;AAAE,WAAO,KAAK,KAAK;;AAE9B,wBAAI,OAAA,MAAA,WAAS;AAAE,WAAO,KAAK,gBAAgB;;;AAmB7C,MAAM,OAAO;AAAb,MAAiB,SAAS;MAOb,gBACX,wBAAY,OAAO,UAAU;AAC3B,SAAK,QAAQ,SAAS,MAAM,SAAS,QAAQ;AAC7C,SAAK,WAAW,YAAY,SAAS,SAAS,WAAW;;AAM3D,gBAAO,SAAA,iBAAO,MAAK,aAAa;AAC9B,WAAO,YAAY,SAAS,UAAU,aAAa,MAAK,GAAG,UAAU;;0BAUvE,OAAA,cAAK,QAAO,MAAK,WAAW;AAC1B,QAAI,UAAS;AACb,SAAK,UAAU,UAAS,OAAO,IAAI,QAAO,QAAO,OAAO,MAAM,MAAK,SAAQ,GAAG;AAC9E,WAAO;;0BAGT,YAAA,mBAAU,QAAO,MAAK,SAAQ,SAAQ,WAAW;AAC/C,aAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AAC1C,UAAI,OAAO,KAAK,MAAM;AACtB,UAAI,KAAK,QAAQ,QAAO,KAAK,MAAM,UAAU,EAAC,aAAa,UAAU,KAAK,QAChF;AAAQ,gBAAO,KAAK,KAAK,KAAK,KAAK,OAAO,SAAQ,KAAK,KAAK;;;AAExD,aAAS,MAAI,GAAG,MAAI,KAAK,SAAS,QAAQ,OAAK,GAAG;AAChD,UAAI,KAAK,SAAS,OAAK,QAAO,KAAK,SAAS,MAAI,KAAK,QAAO;AAC1D,YAAI,WAAW,KAAK,SAAS,OAAK;AAClC,aAAK,SAAS,MAAI,GAAG,UAAU,SAAQ,UAAU,OAAM,UAAU,SAAQ,UAAS,UAAU;;;;0BAelG,MAAA,eAAI,SAAS,MAAK,SAAS;AACzB,QAAI,QAAQ,SAAS,QAAQ,KAAK,UAAU,GAAC;AAAE,aAAO;;AACtD,WAAO,KAAK,SAAS,SAAS,MAAK,GAAG,GAAG,WAAW;;0BAGtD,WAAA,kBAAS,SAAS,OAAM,SAAQ,WAAW,SAAS;AAClD,QAAI;AACJ,aAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AAC1C,UAAI,SAAS,KAAK,MAAM,GAAG,IAAI,SAAS,SAAQ;AAChD,UAAI,UAAU,OAAO,KAAK,MAAM,OAAM,SAAO;AAAE,QAAC,aAAa,YAAW,KAAK,KAAK;iBACzE,QAAQ,UAAQ;AAAE,gBAAQ,SAAS,KAAK,MAAM,GAAG;;;AAG5D,QAAI,KAAK,SAAS,QACtB;AAAM,aAAO,YAAY,KAAK,UAAU,UAAU,SAAS,OAAM,SAAQ,WAAW;WAEpF;AAAM,aAAO,WAAW,IAAI,cAAc,SAAS,KAAK,UAAU;;;0BAOhE,MAAA,aAAI,MAAK,aAAa;AACpB,QAAI,CAAC,YAAY,QAAM;AAAE,aAAO;;AAChC,QAAI,QAAQ,OAAK;AAAE,aAAO,cAAc,OAAO,MAAK;;AACpD,WAAO,KAAK,SAAS,MAAK,aAAa;;0BAGzC,WAAA,kBAAS,MAAK,aAAa,SAAQ;;AACjC,QAAI,UAAU,aAAa;AAC3B,SAAI,QAAO,SAAE,WAAW,aAAgB;AACtC,UAAI,aAAa,cAAc,SAAQ;AACvC,UAAI,CAAE,UAAQ,iBAAiB,aAAa,WAAW,cAAY;AAAE;;AAErE,UAAI,CAAC,UAAQ;AAAE,mBAAW,OAAK,SAAS;;AACxC,aAAO,aAAa,SAAS,UAAU,SAAS,cAAc,aAAW;AAAE,sBAAc;;AACzF,UAAI,SAAS,eAAe,aAClC;AAAQ,iBAAS,aAAa,KAAK,SAAS,aAAa,GAAG,SAAS,WAAW,QAAO,aAAa;aAEpG;AAAQ,iBAAS,OAAO,YAAY,GAAG,aAAa,cAAc,UAAU,UAAU,UAAU,QAAO,WAAW,aAAa,GAAG;;AAC5H,oBAAc;;AAGhB,QAAI,QAAQ,UAAU,aAAa,aAAa,eAAe,aAAa,CAAC;AAC7E,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAG;AAAE,UAAI,CAAC,MAAM,GAAG,KAAK,MAAM,MAAK,MAAM,KAAG;AAAE,cAAM,OAAO,KAAK;;;AAElG,WAAO,IAAI,cAAc,MAAM,SAAS,KAAK,MAAM,OAAO,OAAO,KAAK,SAAS,KAAK,OAC3D,YAAY,KAAK;;0BAM5C,SAAA,gBAAO,aAAa;AAClB,QAAI,YAAY,UAAU,KAAK,QAAQ,OAAK;AAAE,aAAO;;AACrD,WAAO,KAAK,YAAY,aAAa;;0BAGvC,cAAA,qBAAY,aAAa,SAAQ;AAC/B,QAAI,WAAW,KAAK,UAAU,QAAQ,KAAK;AAC3C,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK,GAAG;AAC3C,UAAI,SAAA,QAAO,QAAO,SAAS,KAAK,SAAQ,KAAK,SAAS,IAAI,KAAK;AAC/D,eAAS,IAAI,GAAG,OAAA,QAAM,IAAI,YAAY,QAAQ,KAAG;AAAE,YAAI,OAAO,YAAY,IAAI;AAC5E,cAAI,KAAK,OAAO,SAAQ,KAAK,KAAK,IAAI;AACpC,wBAAY,KAAK;AAChB,YAAC,WAAU,UAAQ,KAAK,KAAK;;;;AAGlC,UAAI,CAAC,QAAK;AAAE;;AACZ,UAAI,YAAY,KAAK,UAAQ;AAAE,mBAAW,KAAK,SAAS;;AACxD,UAAI,UAAU,SAAS,IAAI,GAAG,YAAY,QAAO,QAAO;AACxD,UAAI,WAAW,OAAO;AACpB,iBAAS,IAAI,KAAK;aACb;AACL,iBAAS,OAAO,GAAG;AACnB,aAAK;;;AAGT,QAAI,MAAM,QAAM;AAAE,eAAS,MAAI,GAAG,SAAA,QAAM,MAAI,YAAY,QAAQ,OAAG;AAAE,YAAI,SAAO,YAAY,MAAI;AAC9F,mBAAS,MAAI,GAAG,MAAI,MAAM,QAAQ,OAAG;AAAE,gBAAI,MAAM,KAAG,GAAG,QAAM,UAAS;AACpE,kBAAI,SAAS,KAAK,OAAK;AAAE,wBAAQ,KAAK,MAAM;;AAC5C,oBAAM,OAAO,OAAK;;;;;;AAGtB,QAAI,YAAY,KAAK,YAAY,SAAS,KAAK,OAAK;AAAE,aAAO;;AAC7D,WAAO,MAAM,UAAU,SAAS,SAAS,IAAI,cAAc,OAAO,YAAY;;0BAGhF,WAAA,kBAAS,SAAQ,OAAM;AACrB,QAAI,QAAQ,OAAK;AAAE,aAAO;;AAC1B,QAAI,MAAK,QAAM;AAAE,aAAO,cAAc;;AAEtC,QAAI,QAAO;AACX,aAAS,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,KAAK,GAAC;AAAE,UAAI,KAAK,SAAS,MAAM,SAAQ;AAChF,YAAI,KAAK,SAAS,MAAM,SAAM;AAAE,mBAAQ,KAAK,SAAS,IAAI;;AAC1D;;;AAEF,QAAI,SAAQ,UAAS,GAAG,OAAM,SAAQ,MAAK,QAAQ;AACnD,aAAS,MAAI,GAAG,MAAI,KAAK,MAAM,QAAQ,OAAK;AAC1C,UAAI,MAAM,KAAK,MAAM;AACrB,UAAI,IAAI,OAAO,QAAO,IAAI,KAAK,UAAU,IAAI,gBAAgB,YAAa;AACxE,YAAI,QAAO,KAAK,IAAI,QAAO,IAAI,QAAQ,QAAO,KAAK,KAAK,IAAI,MAAK,IAAI,MAAM;AAC3E,YAAI,QAAO,IAAE;AAAE,UAAC,UAAU,SAAQ,KAAK,KAAK,IAAI,KAAK,OAAM;;;;AAG/D,QAAI,OAAO;AACT,UAAI,WAAW,IAAI,cAAc,MAAM,KAAK;AAC5C,aAAO,SAAQ,IAAI,gBAAgB,CAAC,UAAU,WAAU;;AAE1D,WAAO,UAAS;;0BAGlB,KAAA,cAAG,OAAO;AACR,QAAI,QAAQ,OAAK;AAAE,aAAO;;AAC1B,QAAI,CAAE,kBAAiB,kBACnB,KAAK,MAAM,UAAU,MAAM,MAAM,UACjC,KAAK,SAAS,UAAU,MAAM,SAAS,QAAM;AAAE,aAAO;;AAC1D,aAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAC3C;AAAM,UAAI,CAAC,KAAK,MAAM,GAAG,GAAG,MAAM,MAAM,KAAG;AAAE,eAAO;;;AAChD,aAAS,MAAI,GAAG,MAAI,KAAK,SAAS,QAAQ,OAAK,GACnD;AAAM,UAAI,KAAK,SAAS,QAAM,MAAM,SAAS,QACnC,KAAK,SAAS,MAAI,MAAM,MAAM,SAAS,MAAI,MAC3C,CAAC,KAAK,SAAS,MAAI,GAAG,GAAG,MAAM,SAAS,MAAI,KAAG;AAAE,eAAO;;;AAC9D,WAAO;;0BAGT,SAAA,gBAAO,OAAM;AACX,WAAO,cAAc,KAAK,YAAY;;0BAGxC,cAAA,qBAAY,OAAM;AAChB,QAAI,QAAQ,OAAK;AAAE,aAAO;;AAC1B,QAAI,MAAK,iBAAiB,CAAC,KAAK,MAAM,KAAK,WAAW,KAAG;AAAE,aAAO,KAAK;;AACvE,QAAI,UAAS;AACb,aAAS,IAAI,GAAG,IAAI,KAAK,MAAM,QAAQ,KAAK;AAC1C,UAAI,CAAE,MAAK,MAAM,GAAG,gBAAgB,aAC1C;AAAQ,gBAAO,KAAK,KAAK,MAAM;;;AAE3B,WAAO;;AAaX,MAAM,QAAQ,IAAI;AAIlB,gBAAc,QAAQ;AAEtB,gBAAc,gBAAgB;AAK9B,MAAM,kBACJ,0BAAY,SAAS;AACnB,SAAK,UAAU;;4BAGjB,MAAA,eAAI,SAAS,MAAK;AAChB,QAAM,cAAc,KAAK,QAAQ,IACrC,SAAM,QAAA;AAAA,aAAU,OAAO,IAAI,SAAS,MAAK;;AAErC,WAAO,gBAAgB,KAAK;;4BAG9B,WAAA,mBAAS,SAAQ,QAAO;AACtB,QAAI,OAAM,QAAM;AAAE,aAAO,cAAc;;AACvC,QAAI,SAAQ;AACZ,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC5C,UAAI,UAAS,KAAK,QAAQ,GAAG,SAAS,SAAQ;AAC9C,UAAI,WAAU,OAAK;AAAE;;AACrB,UAAI,mBAAkB,iBAAe;AAAE,iBAAQ,OAAM,OAAO,QAAO;aACzE;AAAW,eAAM,KAAK;;;AAElB,WAAO,gBAAgB,KAAK;;4BAG9B,KAAA,cAAG,OAAO;AACR,QAAI,CAAE,kBAAiB,oBACnB,MAAM,QAAQ,UAAU,KAAK,QAAQ,QAAM;AAAE,aAAO;;AACxD,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAC7C;AAAM,UAAI,CAAC,KAAK,QAAQ,GAAG,GAAG,MAAM,QAAQ,KAAG;AAAE,eAAO;;;AACpD,WAAO;;4BAGT,SAAA,iBAAO,OAAM;AACX,QAAI,SAAQ,SAAS;AACrB,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC5C,UAAI,UAAS,KAAK,QAAQ,GAAG,YAAY;AACzC,UAAI,CAAC,QAAO,QAAM;AAAE;;AACpB,UAAI,CAAC,SAAQ;AACX,kBAAS;aACJ;AACL,YAAI,QAAQ;AACV,oBAAS,QAAO;AAChB,mBAAS;;AAEX,iBAAS,IAAI,GAAG,IAAI,QAAO,QAAQ,KAAG;AAAE,kBAAO,KAAK,QAAO;;;;AAG/D,WAAO,UAAS,cAAc,SAAS,UAAS,QAAO,KAAK,UAAU;;AAMxE,kBAAO,OAAA,eAAK,SAAS;AACnB,YAAQ,QAAQ;WACT;AAAG,eAAO;WACV;AAAG,eAAO,QAAQ;;AACd,eAAO,IAAI,gBAAgB;;;AAK1C,uBAAqB,aAAa,UAAU,SAAS,OAAM,SAAQ,WAAW,SAAS;AACrF,QAAI,WAAW,YAAY;AAI3B,QAAI,SAAK,SAAI,UAAU,QAAQ,UAAU,QAAW;AAClD,eAAS,KAAI,GAAG,KAAI,SAAS,QAAQ,MAAK,GAAG;AAC3C,YAAI,OAAM,SAAS,KAAI,IAAI,QAAA;AAC3B,YAAI,QAAO,MAAM,WAAW,OAAM,WAAS;AAAE;;AAC7C,YAAI,UAAU,SAAS,MAAK,WAAW;AACrC,mBAAS,KAAI,KAAK;mBACT,YAAY,WAAW,SAAS,SAAS,WAAa,UAAS,YAAY;AACpF,mBAAS,OAAM;AACf,mBAAS,KAAI,MAAM;;;;AAIzB,aAAS,IAAI,GAAG,IAAI,QAAQ,KAAK,QAAQ,KAAG;AAAE,cAAQ,KAAK,GAAG,QAAQ;;AAItE,QAAI,cAAc;AAClB,aAAS,MAAI,GAAG,MAAI,SAAS,QAAQ,OAAK,GAAC;AAAE,UAAI,SAAS,MAAI,MAAM,IAAI;AACtE,YAAI,QAAO,QAAQ,IAAI,YAAY,OAAK,YAAY,YAAY,QAAO;AACvE,YAAI,YAAY,KAAK,aAAa,MAAK,QAAQ,MAAM;AACnD,wBAAc;AACd;;AAGF,YAAI,KAAK,QAAQ,IAAI,YAAY,MAAI,KAAK,WAAW,KAAK,UAAU,KAAK;AAC7E,YAAA,MAAuC,MAAK,QAAQ,UAAU;AAArD,YAAA,SAAA,IAAA;AAAe,YAAA,cAAA,IAAA;AACpB,YAAI,YAAY,MAAK,WAAW;AAChC,YAAI,aAAa,eAAe,aAAa,cAAc,UAAU,YAAY,SAAS;AACxF,cAAI,SAAS,SAAS,MAAI,GAAG,SAAS,SAAS,WAAW,QAAO,GAAG,YAAY,OAAK,YAAY,GAAG;AACpG,cAAI,UAAU,OAAO;AACnB,qBAAS,OAAK;AACd,qBAAS,MAAI,KAAK;AAClB,qBAAS,MAAI,KAAK;iBACb;AACL,qBAAS,MAAI,KAAK;AAClB,0BAAc;;eAEX;AACL,wBAAc;;;;AAKlB,QAAI,aAAa;AACf,UAAI,cAAc,iCAAiC,UAAU,aAAa,YAAY,IAAI,SACvC,SAAQ,WAAW;AACtE,UAAI,QAAQ,UAAU,aAAa,OAAM,GAAG;AAC5C,iBAAW,MAAM;AACjB,eAAS,MAAI,GAAG,MAAI,SAAS,QAAQ,OAAK,GAAC;AAAE,YAAI,SAAS,MAAI,KAAK,GAAG;AACpE,mBAAS,OAAO,KAAG;AACnB,iBAAK;;;AAEP,eAAS,MAAI,GAAG,IAAI,GAAG,MAAI,MAAM,SAAS,QAAQ,OAAK,GAAG;AACxD,YAAI,SAAO,MAAM,SAAS;AAC1B,eAAO,IAAI,SAAS,UAAU,SAAS,KAAK,QAAI;AAAE,eAAK;;AACvD,iBAAS,OAAO,GAAG,GAAG,MAAM,SAAS,MAAI,MAAM,SAAS,MAAI,IAAI,MAAM,SAAS,MAAI;;;AAIvF,WAAO,IAAI,cAAc,YAAY,SAAS,KAAK,QAAQ;;AAG7D,qBAAmB,OAAO,SAAQ;AAChC,QAAI,CAAC,WAAU,CAAC,MAAM,QAAM;AAAE,aAAO;;AACrC,QAAI,UAAS;AACb,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,UAAI,OAAO,MAAM;AACjB,cAAO,KAAK,IAAI,WAAW,KAAK,OAAO,SAAQ,KAAK,KAAK,SAAQ,KAAK;;AAExE,WAAO;;AAGT,4CAA0C,UAAU,aAAa,aAAa,SAAS,SAAQ,WAAW,SAAS;AAEjH,oBAAgB,MAAK,YAAW;AAC9B,eAAS,KAAI,GAAG,KAAI,KAAI,MAAM,QAAQ,MAAK;AACzC,YAAI,SAAS,KAAI,MAAM,IAAG,IAAI,SAAS,SAAQ;AAC/C,YAAI,QAAM;AAAE,sBAAY,KAAK;mBACpB,QAAQ,UAAQ;AAAE,kBAAQ,SAAS,KAAI,MAAM,IAAG;;;AAE3D,eAAS,MAAI,GAAG,MAAI,KAAI,SAAS,QAAQ,OAAK,GAClD;AAAM,eAAO,KAAI,SAAS,MAAI,IAAI,KAAI,SAAS,OAAK,aAAY;;;AAE9D,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK,GAAC;AAAE,UAAI,SAAS,IAAI,MAAM,IACtE;AAAI,eAAO,SAAS,IAAI,IAAI,YAAY,KAAK,YAAY;;;AAEvD,WAAO;;AAGT,4BAA0B,OAAO,OAAM,SAAQ;AAC7C,QAAI,MAAK,QAAM;AAAE,aAAO;;AACxB,QAAI,OAAM,UAAS,MAAK,UAAU,SAAQ;AAC1C,aAAS,IAAI,GAAG,OAAA,QAAM,IAAI,MAAM,QAAQ,KAAK;AAC3C,UAAK,QAAO,MAAM,OAAO,KAAK,OAAO,WAAU,KAAK,KAAK,MAAK;AAC3D,QAAC,WAAU,UAAQ,KAAK,KAAK;AAC9B,cAAM,KAAK;;;AAGf,WAAO;;AAGT,wBAAsB,OAAO;AAC3B,QAAI,UAAS;AACb,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KACpC;AAAI,UAAI,MAAM,MAAM,MAAI;AAAE,gBAAO,KAAK,MAAM;;;AAC1C,WAAO;;AAQT,qBAAmB,OAAO,OAAM,SAAQ,SAAS;AAC/C,QAAI,WAAW,IAAI,WAAW;AAC9B,UAAK,QAAO,SAAE,WAAW,YAAe;AACtC,UAAI,SAAQ,iBAAiB,OAAO,WAAW,aAAa;AAC5D,UAAI,QAAO;AACT,mBAAW;AACX,YAAI,UAAU,UAAU,QAAO,WAAW,UAAS,aAAa,GAAG;AACnE,YAAI,WAAW,OACrB;AAAQ,mBAAS,KAAK,YAAY,aAAa,UAAU,UAAU;;;;AAGjE,QAAI,UAAS,UAAU,WAAW,aAAa,SAAS,OAAO,CAAC,SAAQ,KAAK;AAC7E,aAAS,IAAI,GAAG,IAAI,QAAO,QAAQ,KAAG;AAAE,UAAI,CAAC,QAAO,GAAG,KAAK,MAAM,OAAM,QAAO,KAAK;AAClF,YAAI,QAAQ,UAAQ;AAAE,kBAAQ,SAAS,QAAO,GAAG;;AACjD,gBAAO,OAAO,KAAK;;;AAErB,WAAO,QAAO,UAAU,SAAS,SAAS,IAAI,cAAc,SAAQ,YAAY;;AAOlF,iBAAe,GAAG,GAAG;AACnB,WAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE;;AAQrC,yBAAuB,OAAO;AAC5B,QAAI,UAAU;AACd,aAAS,IAAI,GAAG,IAAI,QAAQ,SAAS,GAAG,KAAK;AAC3C,UAAI,OAAO,QAAQ;AACnB,UAAI,KAAK,QAAQ,KAAK,IAAE;AAAE,iBAAS,IAAI,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrE,cAAI,OAAO,QAAQ;AACnB,cAAI,KAAK,QAAQ,KAAK,MAAM;AAC1B,gBAAI,KAAK,MAAM,KAAK,IAAI;AACtB,kBAAI,WAAW,OAAK;AAAE,0BAAU,MAAM;;AAGtC,sBAAQ,KAAK,KAAK,KAAK,KAAK,MAAM,KAAK;AACvC,0BAAY,SAAS,IAAI,GAAG,KAAK,KAAK,KAAK,IAAI,KAAK;;AAEtD;iBACK;AACL,gBAAI,KAAK,OAAO,KAAK,IAAI;AACvB,kBAAI,WAAW,OAAK;AAAE,0BAAU,MAAM;;AAGtC,sBAAQ,KAAK,KAAK,KAAK,KAAK,MAAM,KAAK;AACvC,0BAAY,SAAS,GAAG,KAAK,KAAK,KAAK,MAAM,KAAK;;AAEpD;;;;;AAIN,WAAO;;AAGT,uBAAqB,OAAO,GAAG,MAAM;AACnC,WAAO,IAAI,MAAM,UAAU,MAAM,MAAM,MAAM,MAAM,GAAC;AAAE;;AACtD,UAAM,OAAO,GAAG,GAAG;;AAKd,2BAAyB,OAAM;AACpC,QAAI,SAAQ;AACZ,UAAK,SAAS,eAAa,SAAE,GAAK;AAChC,UAAI,UAAS,EAAE,MAAK;AACpB,UAAI,WAAU,WAAU,OAAK;AAAE,eAAM,KAAK;;;AAE5C,QAAI,MAAK,eACX;AAAI,aAAM,KAAK,cAAc,OAAO,MAAK,MAAM,KAAK,CAAC,MAAK,cAAc;;AACtE,WAAO,gBAAgB,KAAK;;MC1qBjB,aAOX,qBAAY,OAAO,OAAO;AACxB,SAAK,SAAS;AAGd,SAAK,QAAQ,MAAM;AAEnB,SAAK,gBAAgB,MAAM,WAAW;AACtC,SAAK,cAAc,QAAQ;AAE3B,SAAK,WAAW,KAAK,SAAS,KAAK;AAEnC,SAAK,QAAQ;AACb,SAAK,UAAU;AAEf,SAAK,cAAc;AAKnB,SAAK,MAAO,SAAS,MAAM,SAAU,SAAS,cAAc;AAC5D,QAAI,OAAO;AACT,UAAI,MAAM,aAAW;AAAE,cAAM,YAAY,KAAK;iBACrC,MAAM,OAAK;AAAE,cAAM,KAAK;iBACxB,MAAM,OAAK;AAAE,aAAK,UAAU;;;AAKvC,SAAK,WAAW,YAAY;AAC5B,SAAK,aAAa;AAClB,SAAK,gBAAgB;AACrB,wBAAoB;AACpB,SAAK,YAAY,eAAe;AAChC,SAAK,UAAU,YAAY,KAAK,MAAM,KAAK,eAAe,OAAO,gBAAgB,OAAO,KAAK,KAAK;AAElG,SAAK,uBAAuB;AAK5B,SAAK,WAAW;AAEhB,cAAU;AAEV,SAAK,oBAAoB;AACzB,SAAK,cAAc;AACnB,SAAK;;;AAUP,wBAAI,MAAA,MAAA,WAAQ;AACV,QAAI,KAAK,OAAO,SAAS,KAAK,OAAO;AACnC,UAAI,OAAO,KAAK;AAChB,WAAK,SAAS;AACd,eAAS,QAAQ,MAAI;AAAE,aAAK,OAAO,QAAQ,KAAK;;AAChD,WAAK,OAAO,QAAQ,KAAK;;AAE3B,WAAO,KAAK;;uBAMd,SAAA,gBAAO,OAAO;AACZ,QAAI,MAAM,mBAAmB,KAAK,OAAO,iBAAe;AAAE,sBAAgB;;AAC1E,SAAK,SAAS;AACd,QAAI,MAAM,SAAS;AACjB,YAAM,QAAQ,QAAQ;AACtB,WAAK,gBAAgB,MAAM;;AAE7B,SAAK,iBAAiB,MAAM,OAAO;;uBAOrC,WAAA,kBAAS,OAAO;AACd,QAAI,UAAU;AACd,aAAS,QAAQ,KAAK,QAAM;AAAE,cAAQ,QAAQ,KAAK,OAAO;;AAC1D,YAAQ,QAAQ,KAAK;AACrB,aAAS,UAAQ,OAAK;AAAE,cAAQ,UAAQ,MAAM;;AAC9C,SAAK,OAAO;;uBAMd,cAAA,qBAAY,QAAO;AACjB,SAAK,iBAAiB,QAAO,KAAK,MAAM,WAAW,OAAM;;uBAG3D,mBAAA,0BAAiB,QAAO,cAAc;;AACpC,QAAI,OAAO,KAAK,OAAO,SAAS,OAAO,YAAY;AAGnD,QAAI,OAAM,eAAe,KAAK,WAAW;AACvC,uBAAiB;AACjB,kBAAY;;AAEd,SAAK,QAAQ;AACb,QAAI,cAAc;AAChB,UAAI,YAAY,eAAe;AAC/B,UAAI,iBAAiB,WAAW,KAAK,YAAY;AAC/C,aAAK,YAAY;AACjB,iBAAS;;AAEX,sBAAgB;;AAGlB,SAAK,WAAW,YAAY;AAC5B,wBAAoB;AACpB,QAAI,YAAY,gBAAgB,OAAO,YAAY,eAAe;AAElE,QAAI,SAAS,eAAe,UACtB,OAAM,oBAAoB,KAAK,oBAAoB,iBAAiB;AAC1E,QAAI,YAAY,UAAU,CAAC,KAAK,QAAQ,YAAY,OAAM,KAAK,WAAW;AAC1E,QAAI,aAAa,CAAC,OAAM,UAAU,GAAG,KAAK,YAAU;AAAE,kBAAY;;AAClE,QAAI,eAAe,UAAU,cAAc,aAAa,KAAK,IAAI,MAAM,kBAAkB,QAAQ,eAAe;AAEhH,QAAI,WAAW;AACb,WAAK,YAAY;AAMjB,UAAI,iBAAiB,aAAc,QAAQ,MAAM,OAAQ,WAAW,CAAC,KAAK,aACtE,CAAC,KAAK,UAAU,SAAS,CAAC,OAAM,UAAU,SAAS,wBAAwB,KAAK,WAAW,OAAM;AACrG,UAAI,WAAW;AAKb,YAAI,eAAe,OAAQ,SAAU,KAAK,cAAc,KAAK,KAAK,eAAe,YAAa;AAC9F,YAAI,UAAU,CAAC,KAAK,QAAQ,OAAO,OAAM,KAAK,WAAW,WAAW,OAAO;AACzE,eAAK,QAAQ,gBAAgB;AAC7B,eAAK,QAAQ;AACb,eAAK,UAAU,YAAY,OAAM,KAAK,WAAW,WAAW,KAAK,KAAK;;AAExE,YAAI,gBAAgB,CAAC,KAAK,aAAW;AAAE,2BAAiB;;;AAM1D,UAAI,kBACA,CAAE,MAAK,aAAa,KAAK,YAAY,iBAAiB,GAAG,KAAK,KAAK,mBAAmB,mBAAmB,QAAQ;AACnH,uBAAe,MAAM;aAChB;AACL,0BAAkB,MAAM,OAAM;AAC9B,aAAK,YAAY;;AAEnB,WAAK,YAAY;;AAGnB,SAAK,kBAAkB;AAEvB,QAAI,UAAU,SAAS;AACrB,WAAK,IAAI,YAAY;eACZ,UAAU,gBAAgB;AACnC,UAAI,WAAW,KAAK,KAAK,eAAe;AACxC,UAAI,KAAK,SAAS,2BAAyB,SAAE,GAAA;AAAA,eAAK,EAAE;;AAClD;eACO,OAAM,qBAAqB,eAC1C;AAAQ,2BAAmB,MAAM,KAAK,QAAQ,YAAY,OAAM,UAAU,MAAM,yBAAyB;aAEzG;AAAQ,2BAAmB,MAAM,KAAK,YAAY,OAAM,UAAU,MAAM,IAAI;;eAC7D,cAAc;AACvB,qBAAe;;;uBAInB,qBAAA,8BAAqB;AACnB,QAAI;AACJ,WAAO,QAAO,KAAK,YAAY,OAAK;AAAE,UAAI,MAAK,SAAO;AAAE,cAAK;;;;uBAG/D,oBAAA,2BAAkB,WAAW;AAC3B,QAAI,CAAC,aAAa,UAAU,WAAW,KAAK,MAAM,WAAW,KAAK,iBAAiB,KAAK,mBAAmB;AACzG,WAAK,oBAAoB,KAAK;AAC9B,WAAK;AACL,eAAS,IAAI,GAAG,IAAI,KAAK,cAAc,QAAQ,KAAK;AAClD,YAAI,SAAS,KAAK,cAAc;AAChC,YAAI,OAAO,KAAK,MAAI;AAAE,eAAK,YAAY,KAAK,OAAO,KAAK,KAAK;;;AAE/D,eAAS,MAAI,GAAG,MAAI,KAAK,MAAM,QAAQ,QAAQ,OAAK;AAClD,YAAI,WAAS,KAAK,MAAM,QAAQ;AAChC,YAAI,SAAO,KAAK,MAAI;AAAE,eAAK,YAAY,KAAK,SAAO,KAAK,KAAK;;;WAE1D;AACL,eAAS,MAAI,GAAG,MAAI,KAAK,YAAY,QAAQ,OAAK;AAChD,YAAI,aAAa,KAAK,YAAY;AAClC,YAAI,WAAW,QAAM;AAAE,qBAAW,OAAO,MAAM;;;;;uBAYrD,WAAA,kBAAS,UAAU,GAAG;AACpB,QAAI,OAAO,KAAK,UAAU,KAAK,OAAO,WAAW;AACjD,QAAI,QAAQ,QAAS,SAAQ,IAAI,EAAE,QAAQ,OAAK;AAAE,aAAO;;AACzD,aAAS,IAAI,GAAG,IAAI,KAAK,cAAc,QAAQ,KAAK;AAClD,UAAI,SAAO,KAAK,cAAc,GAAG,MAAM;AACvC,UAAI,UAAQ,QAAS,SAAQ,IAAI,EAAE,UAAQ,SAAK;AAAE,eAAO;;;AAE3D,QAAI,UAAU,KAAK,MAAM;AACzB,QAAI,SAAO;AAAE,eAAS,MAAI,GAAG,MAAI,QAAQ,QAAQ,OAAK;AACpD,YAAI,SAAO,QAAQ,KAAG,MAAM;AAC5B,YAAI,UAAQ,QAAS,SAAQ,IAAI,EAAE,UAAQ,SAAK;AAAE,iBAAO;;;;;uBAM7D,WAAA,oBAAW;AACT,WAAO,KAAK,KAAK,iBAAiB,KAAK;;uBAKzC,QAAA,iBAAQ;AACN,SAAK,YAAY;AACjB,QAAI,KAAK,UAAQ;AAAE,yBAAmB,KAAK;;AAC3C,mBAAe;AACf,SAAK,YAAY;;AAQnB,wBAAI,KAAA,MAAA,WAAO;AACT,QAAI,SAAS,KAAK;AAClB,QAAI,UAAU,MAAI;AAAE,eAAS,SAAS,KAAK,IAAI,YAAY,QAAQ,SAAS,OAAO,YAAY;AAC7F,YAAI,OAAO,YAAY,KAAM,OAAO,YAAY,MAAM,OAAO,MAAO;AAClE,cAAI,CAAC,OAAO,cAAY;AAAE,mBAAO,eAAe,QAAQ,eAAY,WAAA;AAAA,qBAAS,SAAS;;;AACtF,iBAAO,KAAK,QAAQ;;;;AAGxB,WAAO,UAAU;;uBAWnB,cAAA,uBAAY,SAAQ;AAClB,WAAO,YAAY,MAAM;;uBAU3B,cAAA,uBAAY,KAAK,MAAU;;aAAH;AACtB,WAAO,YAAY,MAAM,KAAK;;uBAYhC,WAAA,kBAAS,KAAK,MAAU;;aAAH;AACnB,WAAO,KAAK,QAAQ,WAAW,KAAK;;uBAYtC,UAAA,iBAAQ,KAAK;AACX,QAAI,OAAO,KAAK,QAAQ,OAAO;AAC/B,WAAO,OAAO,KAAK,UAAU;;uBAY/B,WAAA,kBAAS,OAAM,SAAQ,MAAW;;aAAJ;AAC5B,QAAI,MAAM,KAAK,QAAQ,WAAW,OAAM,SAAQ;AAChD,QAAI,OAAO,MAAI;AAAE,YAAM,IAAI,WAAW;;AACtC,WAAO;;uBAUT,iBAAA,0BAAe,KAAK,QAAO;AACzB,WAAO,eAAe,MAAM,UAAS,KAAK,OAAO;;uBAMnD,UAAA,oBAAU;AACR,QAAI,CAAC,KAAK,SAAO;AAAE;;AACnB,iBAAa;AACb,SAAK;AACL,QAAI,KAAK,SAAS;AAChB,WAAK,QAAQ,OAAO,KAAK,MAAM,KAAK,IAAI,gBAAgB,OAAO;AAC/D,WAAK,IAAI,cAAc;eACd,KAAK,IAAI,YAAY;AAC9B,WAAK,IAAI,WAAW,YAAY,KAAK;;AAEvC,SAAK,QAAQ;AACb,SAAK,UAAU;;AAOjB,wBAAI,YAAA,MAAA,WAAc;AAChB,WAAO,KAAK,WAAW;;uBAIzB,gBAAA,yBAAc,OAAO;AACnB,WAAO,cAAc,MAAM;;uBAW7B,WAAA,kBAAS,IAAI;AACX,QAAI,sBAAsB,KAAK,OAAO;AACtC,QAAI,qBAAmB;AAAE,0BAAoB,KAAK,MAAM;WAC5D;AAAS,WAAK,YAAY,KAAK,MAAM,MAAM;;;;AAI3C,0BAAwB,OAAM;AAC5B,QAAI,QAAQ,OAAO,OAAO;AAC1B,UAAM,QAAQ;AACd,UAAM,kBAAkB,OAAO,MAAK;AACpC,UAAM,YAAY;AAElB,UAAK,SAAS,cAAY,SAAE,OAAS;AACnC,UAAI,OAAO,SAAS,YAAU;AAAE,gBAAQ,MAAM,MAAK;;AACnD,UAAI,OAAK;AAAE,iBAAS,QAAQ,OAAO;AACjC,cAAI,QAAQ,SAClB;AAAQ,kBAAM,SAAS,MAAM,MAAM;;AAC7B,cAAI,QAAQ,SAAS;AACnB,kBAAM,QAAS,OAAM,QAAQ,MAAM,QAAQ,MAAM,MAAM,MAAM;qBAEtD,CAAC,MAAM,SAAS,QAAQ,qBAAqB,QAAQ,YACpE;AAAQ,kBAAM,QAAQ,OAAO,MAAM;;;;;AAIjC,WAAO,CAAC,WAAW,KAAK,GAAG,MAAK,MAAM,IAAI,QAAQ,MAAM;;AAG1D,+BAA6B,OAAM;AACjC,QAAI,MAAK,YAAY;AACnB,UAAI,MAAM,SAAS,cAAc;AACjC,UAAI,YAAY;AAChB,UAAI,aAAa,oBAAoB;AACrC,YAAK,gBAAgB,EAAA,KAAM,MAAM,WAAW,OAAO,MAAK,MAAM,UAAU,MAAM,KAAK,EAAC,KAAK,MAAM,OAAO,MAAK;WACtG;AACL,YAAK,gBAAgB;;;AAIzB,uBAAqB,OAAM;AACzB,WAAO,CAAC,MAAK,SAAS,YAAU,SAAE,OAAA;AAAA,aAAS,MAAM,MAAK,WAAW;;;AAGnE,mCAAiC,MAAM,MAAM;AAC3C,QAAI,QAAQ,KAAK,IAAI,KAAK,QAAQ,YAAY,KAAK,OAAO,KAAK,QAAQ,YAAY,KAAK;AACxF,WAAO,KAAK,QAAQ,MAAM,UAAU,KAAK,QAAQ,MAAM;;AAGzD,0BAAwB,OAAM;AAC5B,QAAI,UAAS;AACb,UAAK,SAAS,aAAW,SAAE,KAAO;AAChC,eAAS,QAAQ,KAAG;AAAE,YAAI,CAAC,OAAO,UAAU,eAAe,KAAK,SAAQ,OAC5E;AAAM,kBAAO,QAAQ,IAAI;;;;AAEvB,WAAO;;AAGT,4BAA0B,GAAG,GAAG;AAC9B,QAAI,KAAK,GAAG,KAAK;AACjB,aAAS,QAAQ,GAAG;AAClB,UAAI,EAAE,SAAS,EAAE,OAAK;AAAE,eAAO;;AAC/B;;AAEF,aAAS,KAAK,GAAC;AAAE;;AACjB,WAAO,MAAM;;AAGf,+BAA6B,QAAQ;AACnC,QAAI,OAAO,KAAK,SAAS,OAAO,KAAK,qBAAqB,OAAO,KAAK,mBACxE;AAAI,YAAM,IAAI,WAAW;;;;;ACldzB,MAAI,iBAAiB;AAKrB,MAAI,eAAe,yBAAyB;AAAA;AAE5C,eAAa,UAAU,SAAS,iBAAiB,OAAO;AACtD,QAAI,CAAC,MAAM,QAAQ;AAAE,aAAO;AAAA;AAC5B,YAAQ,aAAa,KAAK;AAE1B,WAAQ,CAAC,KAAK,UAAU,SACrB,MAAM,SAAS,kBAAkB,KAAK,WAAW,UACjD,KAAK,SAAS,kBAAkB,MAAM,YAAY,SACnD,KAAK,YAAY;AAAA;AAKrB,eAAa,UAAU,UAAU,iBAAkB,OAAO;AACxD,QAAI,CAAC,MAAM,QAAQ;AAAE,aAAO;AAAA;AAC5B,WAAO,aAAa,KAAK,OAAO,OAAO;AAAA;AAGzC,eAAa,UAAU,cAAc,qBAAsB,OAAO;AAChE,WAAO,IAAI,OAAO,MAAM;AAAA;AAK1B,eAAa,UAAU,QAAQ,gBAAgB,OAAM,IAAI;AACrD,QAAK,UAAS;AAAS,cAAO;AAC9B,QAAK,OAAO;AAAS,WAAK,KAAK;AAEjC,QAAI,SAAQ,IAAI;AAAE,aAAO,aAAa;AAAA;AACtC,WAAO,KAAK,WAAW,KAAK,IAAI,GAAG,QAAO,KAAK,IAAI,KAAK,QAAQ;AAAA;AAKlE,eAAa,UAAU,MAAM,cAAc,GAAG;AAC5C,QAAI,IAAI,KAAK,KAAK,KAAK,QAAQ;AAAE,aAAO;AAAA;AACxC,WAAO,KAAK,SAAS;AAAA;AAQvB,eAAa,UAAU,UAAU,kBAAkB,GAAG,OAAM,IAAI;AAC5D,QAAK,UAAS;AAAS,cAAO;AAC9B,QAAK,OAAO;AAAS,WAAK,KAAK;AAEjC,QAAI,SAAQ,IACV;AAAE,WAAK,aAAa,GAAG,OAAM,IAAI;AAAA,WAEjC;AAAE,WAAK,qBAAqB,GAAG,OAAM,IAAI;AAAA;AAAA;AAM7C,eAAa,UAAU,MAAM,eAAc,GAAG,OAAM,IAAI;AACpD,QAAK,UAAS;AAAS,cAAO;AAC9B,QAAK,OAAO;AAAS,WAAK,KAAK;AAEjC,QAAI,UAAS;AACb,SAAK,QAAQ,SAAU,KAAK,GAAG;AAAE,aAAO,QAAO,KAAK,EAAE,KAAK;AAAA,OAAQ,OAAM;AACzE,WAAO;AAAA;AAMT,eAAa,OAAO,eAAe,QAAQ;AACzC,QAAI,kBAAkB,cAAc;AAAE,aAAO;AAAA;AAC7C,WAAO,UAAU,OAAO,SAAS,IAAI,KAAK,UAAU,aAAa;AAAA;AAGnE,MAAI,OAAqB,yBAAU,eAAc;AAC/C,mBAAc,QAAQ;AACpB,oBAAa,KAAK;AAClB,WAAK,SAAS;AAAA;AAGhB,QAAK;AAAe,YAAK,YAAY;AACrC,UAAK,YAAY,OAAO,OAAQ,iBAAgB,cAAa;AAC7D,UAAK,UAAU,cAAc;AAE7B,QAAI,sBAAqB,EAAE,QAAQ,EAAE,cAAc,QAAO,OAAO,EAAE,cAAc;AAEjF,UAAK,UAAU,UAAU,mBAAoB;AAC3C,aAAO,KAAK;AAAA;AAGd,UAAK,UAAU,aAAa,oBAAqB,OAAM,IAAI;AACzD,UAAI,SAAQ,KAAK,MAAM,KAAK,QAAQ;AAAE,eAAO;AAAA;AAC7C,aAAO,IAAI,MAAK,KAAK,OAAO,MAAM,OAAM;AAAA;AAG1C,UAAK,UAAU,WAAW,kBAAmB,GAAG;AAC9C,aAAO,KAAK,OAAO;AAAA;AAGrB,UAAK,UAAU,eAAe,sBAAuB,GAAG,OAAM,IAAI,QAAO;AACvE,eAAS,IAAI,OAAM,IAAI,IAAI,KACzB;AAAE,YAAI,EAAE,KAAK,OAAO,IAAI,SAAQ,OAAO,OAAO;AAAE,iBAAO;AAAA;AAAA;AAAA;AAG3D,UAAK,UAAU,uBAAuB,8BAA+B,GAAG,OAAM,IAAI,QAAO;AACvF,eAAS,IAAI,QAAO,GAAG,KAAK,IAAI,KAC9B;AAAE,YAAI,EAAE,KAAK,OAAO,IAAI,SAAQ,OAAO,OAAO;AAAE,iBAAO;AAAA;AAAA;AAAA;AAG3D,UAAK,UAAU,aAAa,oBAAqB,OAAO;AACtD,UAAI,KAAK,SAAS,MAAM,UAAU,gBAChC;AAAE,eAAO,IAAI,MAAK,KAAK,OAAO,OAAO,MAAM;AAAA;AAAA;AAG/C,UAAK,UAAU,cAAc,qBAAsB,OAAO;AACxD,UAAI,KAAK,SAAS,MAAM,UAAU,gBAChC;AAAE,eAAO,IAAI,MAAK,MAAM,UAAU,OAAO,KAAK;AAAA;AAAA;AAGlD,wBAAmB,OAAO,MAAM,WAAY;AAAE,aAAO,KAAK,OAAO;AAAA;AAEjE,wBAAmB,MAAM,MAAM,WAAY;AAAE,aAAO;AAAA;AAEpD,WAAO,iBAAkB,MAAK,WAAW;AAEzC,WAAO;AAAA,IACP;AAIF,eAAa,QAAQ,IAAI,KAAK;AAE9B,MAAI,SAAuB,yBAAU,eAAc;AACjD,qBAAgB,MAAM,OAAO;AAC3B,oBAAa,KAAK;AAClB,WAAK,OAAO;AACZ,WAAK,QAAQ;AACb,WAAK,SAAS,KAAK,SAAS,MAAM;AAClC,WAAK,QAAQ,KAAK,IAAI,KAAK,OAAO,MAAM,SAAS;AAAA;AAGnD,QAAK;AAAe,cAAO,YAAY;AACvC,YAAO,YAAY,OAAO,OAAQ,iBAAgB,cAAa;AAC/D,YAAO,UAAU,cAAc;AAE/B,YAAO,UAAU,UAAU,mBAAoB;AAC7C,aAAO,KAAK,KAAK,UAAU,OAAO,KAAK,MAAM;AAAA;AAG/C,YAAO,UAAU,WAAW,kBAAmB,GAAG;AAChD,aAAO,IAAI,KAAK,KAAK,SAAS,KAAK,KAAK,IAAI,KAAK,KAAK,MAAM,IAAI,IAAI,KAAK,KAAK;AAAA;AAGhF,YAAO,UAAU,eAAe,sBAAuB,GAAG,OAAM,IAAI,QAAO;AACzE,UAAI,UAAU,KAAK,KAAK;AACxB,UAAI,QAAO,WACP,KAAK,KAAK,aAAa,GAAG,OAAM,KAAK,IAAI,IAAI,UAAU,YAAW,OACpE;AAAE,eAAO;AAAA;AACX,UAAI,KAAK,WACL,KAAK,MAAM,aAAa,GAAG,KAAK,IAAI,QAAO,SAAS,IAAI,KAAK,IAAI,KAAK,QAAQ,MAAM,SAAS,SAAQ,aAAa,OACpH;AAAE,eAAO;AAAA;AAAA;AAGb,YAAO,UAAU,uBAAuB,8BAA+B,GAAG,OAAM,IAAI,QAAO;AACzF,UAAI,UAAU,KAAK,KAAK;AACxB,UAAI,QAAO,WACP,KAAK,MAAM,qBAAqB,GAAG,QAAO,SAAS,KAAK,IAAI,IAAI,WAAW,SAAS,SAAQ,aAAa,OAC3G;AAAE,eAAO;AAAA;AACX,UAAI,KAAK,WACL,KAAK,KAAK,qBAAqB,GAAG,KAAK,IAAI,OAAM,UAAU,IAAI,YAAW,OAC5E;AAAE,eAAO;AAAA;AAAA;AAGb,YAAO,UAAU,aAAa,oBAAqB,OAAM,IAAI;AAC3D,UAAI,SAAQ,KAAK,MAAM,KAAK,QAAQ;AAAE,eAAO;AAAA;AAC7C,UAAI,UAAU,KAAK,KAAK;AACxB,UAAI,MAAM,SAAS;AAAE,eAAO,KAAK,KAAK,MAAM,OAAM;AAAA;AAClD,UAAI,SAAQ,SAAS;AAAE,eAAO,KAAK,MAAM,MAAM,QAAO,SAAS,KAAK;AAAA;AACpE,aAAO,KAAK,KAAK,MAAM,OAAM,SAAS,OAAO,KAAK,MAAM,MAAM,GAAG,KAAK;AAAA;AAGxE,YAAO,UAAU,aAAa,oBAAqB,OAAO;AACxD,UAAI,QAAQ,KAAK,MAAM,WAAW;AAClC,UAAI,OAAO;AAAE,eAAO,IAAI,QAAO,KAAK,MAAM;AAAA;AAAA;AAG5C,YAAO,UAAU,cAAc,qBAAsB,OAAO;AAC1D,UAAI,QAAQ,KAAK,KAAK,YAAY;AAClC,UAAI,OAAO;AAAE,eAAO,IAAI,QAAO,OAAO,KAAK;AAAA;AAAA;AAG7C,YAAO,UAAU,cAAc,sBAAsB,OAAO;AAC1D,UAAI,KAAK,KAAK,SAAS,KAAK,IAAI,KAAK,MAAM,OAAO,MAAM,SAAS,GAC/D;AAAE,eAAO,IAAI,QAAO,KAAK,MAAM,IAAI,QAAO,KAAK,OAAO;AAAA;AACxD,aAAO,IAAI,QAAO,MAAM;AAAA;AAG1B,WAAO;AAAA,IACP;AAEF,MAAI,eAAe;AAEnB,MAAO,oBAAQ;;;AC3Lf,MAAM,kBAAkB;AAExB,MAAM,SACJ,iBAAY,OAAO,YAAY;AAC7B,SAAK,QAAQ;AACb,SAAK,aAAa;;mBAMpB,WAAA,kBAAS,QAAO,eAAe;;AAC7B,QAAI,KAAK,cAAc,GAAC;AAAE,aAAO;;AAEjC,QAAI,OAAM,KAAK,MAAM;AACrB,aAAQ,QAAO;AACb,UAAI,OAAO,KAAK,MAAM,IAAI,OAAM;AAChC,UAAI,KAAK,WAAW;AAAE,UAAE;AAAK;;;AAG/B,QAAI,OAAO;AACX,QAAI,eAAe;AACjB,cAAQ,KAAK,UAAU,MAAK,KAAK,MAAM;AACvC,gBAAU,MAAM,KAAK;;AAEvB,QAAI,YAAY,OAAM;AACtB,QAAI,WAAW;AACf,QAAI,WAAW,IAAI,YAAY;AAE/B,SAAK,MAAM,QAAO,SAAE,MAAM,GAAM;AAC9B,UAAI,CAAC,KAAK,MAAM;AACd,YAAI,CAAC,OAAO;AACV,kBAAQ,OAAK,UAAU,MAAK,IAAI;AAChC,oBAAU,MAAM,KAAK;;AAEvB;AACA,kBAAU,KAAK;AACf;;AAGF,UAAI,OAAO;AACT,kBAAU,KAAK,IAAI,KAAK,KAAK;AAC7B,YAAI,QAAO,KAAK,KAAK,IAAI,MAAM,MAAM,WAAW;AAEhD,YAAI,SAAQ,UAAU,UAAU,OAAM,KAAK;AACzC,kBAAM,UAAU,QAAQ,KAAK,UAAU,QAAQ,KAAK,SAAS;AAC7D,mBAAS,KAAK,IAAI,KAAK,OAAK,MAAM,MAAM,SAAS,SAAS,UAAU;;AAEtE;AACA,YAAI,OAAG;AAAE,gBAAM,UAAU,OAAK;;aACzB;AACL,kBAAU,UAAU,KAAK;;AAG3B,UAAI,KAAK,WAAW;AAClB,oBAAY,QAAQ,KAAK,UAAU,IAAI,MAAM,MAAM,YAAY,KAAK;AACpE,oBAAY,IAAI,OAAO,OAAK,MAAM,MAAM,GAAG,MAAK,OAAO,UAAU,UAAU,OAAO,YAAY,OAAK,aAAa;AAChH,eAAO;;OAER,KAAK,MAAM,QAAQ;AAEtB,WAAO,EAAA,WAAU,WAAW;;mBAK9B,eAAA,sBAAa,WAAW,WAAW,aAAa,eAAe;AAC7D,QAAI,WAAW,IAAI,aAAa,KAAK;AACrC,QAAI,WAAW,KAAK,OAAO,WAAW,CAAC,iBAAiB,SAAS,SAAS,SAAS,IAAI,SAAS,SAAS,KAAK;AAE9G,aAAS,IAAI,GAAG,IAAI,UAAU,MAAM,QAAQ,KAAK;AAC/C,UAAI,QAAO,UAAU,MAAM,GAAG,OAAO,UAAU,KAAK;AACpD,UAAI,OAAO,IAAI,KAAK,UAAU,QAAQ,KAAK,IAAI,OAAM,YAAY,SAAA;AACjE,UAAI,SAAS,YAAY,SAAS,MAAM,OAAO;AAC7C,eAAO;AACP,YAAI,GAAC;AAAE,mBAAS;eACxB;AAAa,qBAAW,SAAS,MAAM,GAAG,SAAS,SAAS;;;AAEtD,eAAS,KAAK;AACd,UAAI,WAAW;AACb;AACA,oBAAY;;AAEd,UAAI,CAAC,eAAa;AAAE,mBAAW;;;AAEjC,QAAI,WAAW,aAAa,YAAY;AACxC,QAAI,WAAW,gBAAgB;AAC7B,iBAAW,aAAa,UAAU;AAClC,oBAAc;;AAEhB,WAAO,IAAI,OAAO,SAAS,OAAO,WAAW;;mBAG/C,YAAA,mBAAU,OAAM,IAAI;AAClB,QAAI,OAAO,IAAI;AACf,SAAK,MAAM,QAAO,SAAE,MAAM,GAAM;AAC9B,UAAI,YAAY,KAAK,gBAAgB,QAAQ,IAAI,KAAK,gBAAgB,QAChE,KAAK,KAAK,SAAS,KAAK,eAAe;AAC7C,WAAK,UAAU,KAAK,KAAK;OACxB,OAAM;AACT,WAAO;;mBAGT,UAAA,iBAAQ,OAAO;AACb,QAAI,KAAK,cAAc,GAAC;AAAE,aAAO;;AACjC,WAAO,IAAI,OAAO,KAAK,MAAM,OAAO,MAAM,IAAG,SAAC,OAAA;AAAA,aAAO,IAAI,KAAK;SAAQ,KAAK;;mBAQ7E,UAAA,iBAAQ,kBAAkB,cAAc;AACtC,QAAI,CAAC,KAAK,YAAU;AAAE,aAAO;;AAE7B,QAAI,eAAe,IAAI,SAAQ,KAAK,IAAI,GAAG,KAAK,MAAM,SAAS;AAE/D,QAAI,UAAU,iBAAiB;AAC/B,QAAI,WAAW,iBAAiB,MAAM;AACtC,QAAI,aAAa,KAAK;AACtB,SAAK,MAAM,QAAO,SAAC,MAAQ;AAAE,UAAI,KAAK,WAAS;AAAE;;OAAgB;AAEjE,QAAI,WAAW;AACf,SAAK,MAAM,QAAO,SAAC,MAAQ;AACzB,UAAI,MAAM,QAAQ,UAAU,EAAE;AAC9B,UAAI,OAAO,MAAI;AAAE;;AACjB,iBAAW,KAAK,IAAI,UAAU;AAC9B,UAAI,QAAM,QAAQ,KAAK;AACvB,UAAI,KAAK,MAAM;AACb,YAAI,QAAO,iBAAiB,MAAM,KAAK,OAAO,iBAAiB,KAAK;AACpE,YAAI,YAAY,KAAK,aAAa,KAAK,UAAU,IAAI,QAAQ,MAAM,WAAW,GAAG;AACjF,YAAI,WAAS;AAAE;;AACf,qBAAa,KAAK,IAAI,KAAK,OAAK,OAAM;aACjC;AACL,qBAAa,KAAK,IAAI,KAAK;;OAE5B;AAEH,QAAI,UAAU;AACd,aAAS,IAAI,cAAc,IAAI,UAAU,KAC7C;AAAM,cAAQ,KAAK,IAAI,KAAK,QAAQ,KAAK;;AACrC,QAAI,QAAQ,KAAK,MAAM,MAAM,GAAG,QAAO,OAAO,SAAS,OAAO;AAC9D,QAAI,SAAS,IAAI,OAAO,OAAO;AAE/B,QAAI,OAAO,mBAAmB,iBAClC;AAAM,eAAS,OAAO,SAAS,KAAK,MAAM,SAAS,aAAa;;AAC5D,WAAO;;mBAGT,iBAAA,0BAAiB;AACf,QAAI,QAAQ;AACZ,SAAK,MAAM,QAAO,SAAC,MAAQ;AAAE,UAAI,CAAC,KAAK,MAAI;AAAE;;;AAC7C,WAAO;;mBAST,WAAA,kBAAS,MAA0B;;aAAnB,KAAK,MAAM;AACzB,QAAI,QAAQ,KAAK,UAAU,GAAG,OAAO,UAAU,MAAM,KAAK;AAC1D,QAAI,QAAQ,IAAI,SAAS;AACzB,SAAK,MAAM,QAAO,SAAE,MAAM,GAAM;AAC9B,UAAI,KAAK,MAAM;AACb,cAAM,KAAK;AACX,YAAI,KAAK,WAAS;AAAE;;iBACX,KAAK,MAAM;AACpB,YAAI,QAAO,KAAK,KAAK,IAAI,MAAM,MAAM,WAAW,QAAM,SAAQ,MAAK;AACnE;AACA,YAAI,OAAG;AAAE,gBAAM,UAAU,OAAK;;AAC9B,YAAI,OAAM;AACR,cAAI,YAAY,KAAK,aAAa,KAAK,UAAU,IAAI,MAAM,MAAM;AACjE,cAAI,WAAS;AAAE;;AACf,cAAI,UAAU,IAAI,KAAK,MAAI,UAAU,OAAM,YAAY,QAAQ,OAAO,MAAM,SAAS;AACrF,cAAI,SAAS,MAAM,UAAU,MAAM,MAAM,MAAM,UACzD;AAAY,kBAAM,QAAQ;iBAE1B;AAAY,kBAAM,KAAK;;;iBAEN,KAAK,KAAK;AACnB;;OAED,KAAK,MAAM,QAAQ;AACtB,WAAO,IAAI,OAAO,kBAAa,KAAK,MAAM,YAAY;;AAI1D,SAAO,QAAQ,IAAI,OAAO,kBAAa,OAAO;AAE9C,wBAAsB,OAAO,GAAG;AAC9B,QAAI;AACJ,UAAM,QAAO,SAAE,MAAM,GAAM;AACzB,UAAI,KAAK,aAAc,OAAO,GAAI;AAChC,mBAAW;AACX,eAAO;;;AAGX,WAAO,MAAM,MAAM;;AAGrB,MAAM,OACJ,eAAY,OAAK,OAAM,WAAW,cAAc;AAE9C,SAAK,MAAM;AAEX,SAAK,OAAO;AAIZ,SAAK,YAAY;AAGjB,SAAK,eAAe;;iBAGtB,QAAA,gBAAM,OAAO;AACX,QAAI,KAAK,QAAQ,MAAM,QAAQ,CAAC,MAAM,WAAW;AAC/C,UAAI,QAAO,MAAM,KAAK,MAAM,KAAK;AACjC,UAAI,OAAI;AAAE,eAAO,IAAI,KAAK,MAAK,SAAS,UAAU,OAAM,KAAK;;;;MAQtD,eACX,uBAAY,OAAM,QAAQ,YAAY,UAAU;AAC9C,SAAK,OAAO;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;AAClB,SAAK,WAAW;;AAIpB,MAAM,iBAAiB;AAIvB,6BAA0B,UAAS,QAAO,IAAI,SAAS;AACrD,QAAI,YAAY,GAAG,QAAQ,aAAa;AACxC,QAAI,WAAS;AAAE,aAAO,UAAU;;AAEhC,QAAI,GAAG,QAAQ,kBAAgB;AAAE,iBAAU,IAAI,aAAa,SAAQ,MAAM,SAAQ,QAAQ,MAAM;;AAEhG,QAAI,WAAW,GAAG,QAAQ;AAE1B,QAAI,GAAG,MAAM,UAAU,GAAG;AACxB,aAAO;eACE,YAAY,SAAS,QAAQ,aAAa;AACnD,UAAI,SAAS,QAAQ,YAAY,MACrC;AAAM,eAAO,IAAI,aAAa,SAAQ,KAAK,aAAa,IAAI,MAAM,SAAS,kBAAkB,UAC/D,SAAQ,QAAQ,UAAU,GAAG,QAAQ,KAAK,GAAG,MAAM,SAAS,KAAK,SAAQ;aAEvG;AAAM,eAAO,IAAI,aAAa,SAAQ,MAAM,SAAQ,OAAO,aAAa,IAAI,MAAM,SAAS,kBAAkB,UAC/E,MAAM,SAAQ;;eAC/B,GAAG,QAAQ,oBAAoB,SAAS,CAAE,aAAY,SAAS,QAAQ,oBAAoB,QAAQ;AAE5G,UAAI,WAAW,SAAQ,YAAY,KAAK,CAAC,YAAa,UAAQ,WAAY,IAAG,QAAQ,KAAK,QAAQ,iBAC5C,CAAC,aAAa,IAAI,SAAQ;AAChF,UAAI,aAAa,WAAW,UAAU,SAAQ,YAAY,GAAG,WAAW,UAAU,GAAG,QAAQ,KAAK,GAAG,MAAM,SAAS;AACpH,aAAO,IAAI,aAAa,SAAQ,KAAK,aAAa,IAAI,WAAW,OAAM,UAAU,gBAAgB,MAC/C,SAAS,kBAAkB,UACrD,OAAO,OAAO,YAAY,GAAG;eAC5C,WAAU,GAAG,QAAQ,YAAY;AAG1C,aAAO,IAAI,aAAa,SAAQ,KAAK,QAAQ,IAAI,WACzB,SAAQ,OAAO,QAAQ,IAAI,WAC3B,UAAU,SAAQ,YAAY,GAAG,UAAU,SAAQ;WACtE;AACL,aAAO,IAAI,aAAa,SAAQ,KAAK,QAAQ,GAAG,QAAQ,OAChC,SAAQ,OAAO,QAAQ,GAAG,QAAQ,OAClC,UAAU,SAAQ,YAAY,GAAG,UAAU,SAAQ;;;AAI/E,wBAAsB,WAAW,YAAY;AAC3C,QAAI,CAAC,YAAU;AAAE,aAAO;;AACxB,QAAI,CAAC,UAAU,YAAU;AAAE,aAAO;;AAClC,QAAI,WAAW;AACf,cAAU,QAAQ,KAAK,GAAG,QAAO,SAAE,QAAO,MAAQ;AAChD,eAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK,GAChD;AAAM,YAAI,UAAS,WAAW,IAAI,MAAM,QAAO,WAAW,IAC1D;AAAQ,qBAAW;;;;AAEjB,WAAO;;AAGT,qBAAmB,OAAK;AACtB,QAAI,UAAS;AACb,UAAI,QAAO,SAAE,OAAO,KAAK,OAAM,IAAE;AAAA,aAAK,QAAO,KAAK,OAAM;;AACxD,WAAO;;AAGT,qBAAmB,QAAQ,SAAS;AAClC,QAAI,CAAC,QAAM;AAAE,aAAO;;AACpB,QAAI,UAAS;AACb,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK,GAAG;AACzC,UAAI,QAAO,QAAQ,IAAI,OAAO,IAAI,IAAI,KAAK,QAAQ,IAAI,OAAO,IAAI,IAAI;AACtE,UAAI,SAAQ,IAAE;AAAE,gBAAO,KAAK,OAAM;;;AAEpC,WAAO;;AAMT,2BAAyB,UAAS,QAAO,WAAU,OAAM;AACvD,QAAI,gBAAgB,kBAAkB,SAAQ,cAAc,WAAW,IAAI,QAAO,KAAK;AACvF,QAAI,MAAO,SAAO,SAAQ,SAAS,SAAQ,MAAM,SAAS,QAAO;AACjE,QAAI,CAAC,KAAG;AAAE;;AAEV,QAAI,YAAY,IAAI,UAAU,QAAQ,IAAI,UAAU;AACpD,QAAI,QAAS,SAAO,SAAQ,OAAO,SAAQ,QAAQ,aAAa,IAAI,WAAW,OAAM,UAAU,eAC/B,aAAa;AAE7E,QAAI,UAAU,IAAI,aAAa,QAAO,QAAQ,IAAI,WAAW,QAAO,IAAI,YAAY,OAAO,MAAM;AACjG,cAAS,IAAI,UAAU,aAAa,WAAW,QAAQ,YAAY,EAAA,MAAC,OAAM,cAAc,WAAU;;AAGpG,MAAI,sBAAsB;AAA1B,MAAiC,6BAA6B;AAK9D,6BAA2B,QAAO;AAChC,QAAI,UAAU,OAAM;AACpB,QAAI,8BAA8B,SAAS;AACzC,4BAAsB;AACtB,mCAA6B;AAC7B,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAG;AAAE,YAAI,QAAQ,GAAG,KAAK,sBAAsB;AACjF,gCAAsB;AACtB;;;;AAGJ,WAAO;;AAWT,MAAM,aAAa,IAAI,UAAU;AACjC,MAAM,kBAAkB,IAAI,UAAU;AAsB/B,mBAAiB,QAAQ;AAC9B,aAAS;MAAC,OAAO,UAAU,OAAO,SAAS;MACjC,eAAe,UAAU,OAAO,iBAAiB;;AAC3D,WAAO,IAAI,OAAO;MAChB,KAAK;MAEL,OAAO;QACL,MAAA,iBAAO;AACL,iBAAO,IAAI,aAAa,OAAO,OAAO,OAAO,OAAO,MAAM;;QAE5D,OAAA,gBAAM,IAAI,MAAM,QAAO;AACrB,iBAAO,kBAAiB,MAAM,QAAO,IAAI;;;MAIjD;MAEI,OAAO;QACL,iBAAiB;UACf,aAAA,qBAAY,OAAM,GAAG;AACnB,gBAAI,UAAU,EAAE,aAAa,gBAAgB,KAAK,MAAK,OAAO,MAAK,YAC/D,EAAE,aAAa,gBAAgB,KAAK,MAAK,OAAO,MAAK,YAAY;AACrE,gBAAI,SAAO;AAAE,gBAAE;;AACf,mBAAO;;;;;;AASV,gBAAc,QAAO,WAAU;AACpC,QAAI,OAAO,WAAW,SAAS;AAC/B,QAAI,CAAC,QAAQ,KAAK,KAAK,cAAc,GAAC;AAAE,aAAO;;AAC/C,QAAI,WAAQ;AAAE,sBAAgB,MAAM,QAAO,WAAU;;AACrD,WAAO;;AAKF,gBAAc,QAAO,WAAU;AACpC,QAAI,OAAO,WAAW,SAAS;AAC/B,QAAI,CAAC,QAAQ,KAAK,OAAO,cAAc,GAAC;AAAE,aAAO;;AACjD,QAAI,WAAQ;AAAE,sBAAgB,MAAM,QAAO,WAAU;;AACrD,WAAO;;;;ACvbF,MAAI,OAAO;AAAA,IAChB,GAAG;AAAA,IACH,GAAG;AAAA,IACH,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA;AAGA,MAAI,QAAQ;AAAA,IACjB,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA;AAGP,MAAI,SAAS,OAAO,aAAa,eAAe,gBAAgB,KAAK,UAAU;AAC/E,MAAI,SAAS,OAAO,aAAa,eAAe,iBAAiB,KAAK,UAAU;AAChF,MAAI,QAAQ,OAAO,aAAa,eAAe,aAAa,KAAK,UAAU;AAC3E,MAAI,MAAM,OAAO,aAAa,eAAe,MAAM,KAAK,UAAU;AAClE,MAAI,KAAK,OAAO,aAAa,eAAe,gDAAgD,KAAK,UAAU;AAC3G,MAAI,sBAAsB,UAAW,QAAO,CAAC,OAAO,KAAK,OAAO,SAAS;AAGzE,OAAS,IAAI,GAAG,IAAI,IAAI;AAAK,SAAK,KAAK,KAAK,KAAK,KAAK,KAAK,OAAO;AAAzD;AAGT,OAAS,IAAI,GAAG,KAAK,IAAI;AAAK,SAAK,IAAI,OAAO,MAAM;AAA3C;AAGT,OAAS,IAAI,IAAI,KAAK,IAAI,KAAK;AAC7B,SAAK,KAAK,OAAO,aAAa,IAAI;AAClC,UAAM,KAAK,OAAO,aAAa;AAAA;AAFxB;AAMT,OAAS,QAAQ;AAAM,QAAI,CAAC,MAAM,eAAe;AAAO,YAAM,QAAQ,KAAK;AAAlE;AAEF,mBAAiB,OAAO;AAG7B,QAAI,YAAY,uBAAwB,OAAM,WAAW,MAAM,UAAU,MAAM,YAC5E,WAAU,OAAO,MAAM,YAAY,MAAM,OAAO,MAAM,IAAI,UAAU;AACvE,QAAI,OAAQ,CAAC,aAAa,MAAM,OAC7B,OAAM,WAAW,QAAQ,MAAM,MAAM,YACtC,MAAM,OAAO;AAEf,QAAI,QAAQ;AAAO,aAAO;AAC1B,QAAI,QAAQ;AAAO,aAAO;AAE1B,QAAI,QAAQ;AAAQ,aAAO;AAC3B,QAAI,QAAQ;AAAM,aAAO;AACzB,QAAI,QAAQ;AAAS,aAAO;AAC5B,QAAI,QAAQ;AAAQ,aAAO;AAC3B,WAAO;AAAA;;;ACrHT,MAAM,OAAM,OAAO,aAAa,cAAc,qBAAqB,KAAK,UAAU,YAAY;AAE9F,4BAA0B,MAAM;AAC9B,QAAI,QAAQ,KAAK,MAAM,WAAW,UAAS,MAAM,MAAM,SAAS;AAChE,QAAI,WAAU,SAAO;AAAE,gBAAS;;AAChC,QAAI,KAAK,MAAM,QAAO;AACtB,aAAS,IAAI,GAAG,IAAI,MAAM,SAAS,GAAG,KAAK;AACzC,UAAI,MAAM,MAAM;AAChB,UAAI,kBAAkB,KAAK,MAAI;AAAE,eAAO;iBAC/B,YAAY,KAAK,MAAI;AAAE,cAAM;iBAC7B,sBAAsB,KAAK,MAAI;AAAE,eAAO;iBACxC,cAAc,KAAK,MAAI;AAAE,iBAAQ;iBACjC,SAAS,KAAK,MAAM;AAAE,YAAI,MAAG;AAAE,iBAAO;eAAK;AAAM,iBAAO;;aACrE;AAAS,cAAM,IAAI,MAAM,iCAAiC;;;AAExD,QAAI,KAAG;AAAE,gBAAS,SAAS;;AAC3B,QAAI,MAAI;AAAE,gBAAS,UAAU;;AAC7B,QAAI,MAAI;AAAE,gBAAS,UAAU;;AAC7B,QAAI,QAAK;AAAE,gBAAS,WAAW;;AAC/B,WAAO;;AAGT,qBAAmB,OAAK;AACtB,QAAI,QAAO,OAAO,OAAO;AACzB,aAAS,QAAQ,OAAG;AAAE,YAAK,iBAAiB,SAAS,MAAI;;AACzD,WAAO;;AAGT,qBAAmB,MAAM,OAAO,QAAO;AACrC,QAAI,MAAM,QAAM;AAAE,aAAO,SAAS;;AAClC,QAAI,MAAM,SAAO;AAAE,aAAO,UAAU;;AACpC,QAAI,MAAM,SAAO;AAAE,aAAO,UAAU;;AACpC,QAAI,WAAU,SAAS,MAAM,UAAQ;AAAE,aAAO,WAAW;;AACzD,WAAO;;AAiCF,kBAAgB,UAAU;AAC/B,WAAO,IAAI,OAAO,EAAC,OAAO,EAAC,eAAe,eAAe;;AAOpD,0BAAwB,UAAU;AACvC,QAAI,QAAM,UAAU;AACpB,WAAO,SAAS,OAAM,OAAO;AAC3B,UAAI,OAAO,QAAQ,QAAQ,SAAS,KAAK,UAAU,KAAK,QAAQ,KAAK;AACrE,UAAI,SAAS,MAAI,UAAU,MAAM,OAAO,CAAC;AACzC,UAAI,UAAU,OAAO,MAAK,OAAO,MAAK,UAAU,QAAK;AAAE,eAAO;;AAC9D,UAAI,UAAW,OAAM,YAAY,MAAM,UAAU,MAAM,WAAW,KAAK,WAAW,KAAK,QAClF,YAAW,KAAK,MAAM,aAAa,YAAY,MAAM;AAKxD,YAAI,WAAW,MAAI,UAAU,UAAU,OAAO;AAC9C,YAAI,YAAY,SAAS,MAAK,OAAO,MAAK,UAAU,QAAK;AAAE,iBAAO;;iBACzD,UAAU,MAAM,UAAU;AAGnC,YAAI,YAAY,MAAI,UAAU,MAAM,OAAO;AAC3C,YAAI,aAAa,UAAU,MAAK,OAAO,MAAK,UAAU,QAAK;AAAE,iBAAO;;;AAEtE,aAAO;;;;;AC7FJ,2BAAyB,QAAO,WAAU;AAC/C,QAAI,OAAM,UAAU,OAAK;AAAE,aAAO;;AAClC,QAAI,WAAQ;AAAE,gBAAS,OAAM,GAAG,kBAAkB;;AAClD,WAAO;;AAWF,wBAAsB,QAAO,WAAU,OAAM;AACpD,QAAA,MAAkB,OAAM;AAAjB,QAAA,UAAA,IAAA;AACL,QAAI,CAAC,WAAY,SAAO,CAAC,MAAK,eAAe,YAAY,UACjC,QAAQ,eAAe,IACjD;AAAI,aAAO;;AAET,QAAI,OAAO,cAAc;AAGzB,QAAI,CAAC,MAAM;AACT,UAAI,QAAQ,QAAQ,cAAc,SAAS,SAAS,WAAW;AAC/D,UAAI,UAAU,MAAI;AAAE,eAAO;;AAC3B,UAAI,WAAQ;AAAE,kBAAS,OAAM,GAAG,KAAK,OAAO,QAAQ;;AACpD,aAAO;;AAGT,QAAI,UAAS,KAAK;AAElB,QAAI,CAAC,QAAO,KAAK,KAAK,aAAa,cAAc,QAAO,MAAM,YAChE;AAAI,aAAO;;AAIT,QAAI,QAAQ,OAAO,QAAQ,QAAQ,KAC9B,aAAY,SAAQ,UAAU,cAAc,aAAa,WAAU;AACtE,UAAI,WAAU;AACZ,YAAI,KAAK,OAAM,GAAG,YAAY,QAAQ,UAAU,QAAQ;AACxD,WAAG,aAAa,YAAY,SAAQ,SAAS,UAAU,SAAS,GAAG,IAAI,QAAQ,GAAG,QAAQ,IAAI,KAAK,KAAK,MAAM,MAC5F,cAAc,OAAO,GAAG,KAAK,KAAK,MAAM,QAAO;AACjE,kBAAS,GAAG;;AAEd,aAAO;;AAIT,QAAI,QAAO,UAAU,KAAK,SAAS,QAAQ,QAAQ,GAAG;AACpD,UAAI,WAAQ;AAAE,kBAAS,OAAM,GAAG,OAAO,KAAK,MAAM,QAAO,UAAU,KAAK,KAAK;;AAC7E,aAAO;;AAGT,WAAO;;AAGT,uBAAqB,OAAM,MAAM,MAAM;AACrC,WAAO,OAAM,QAAQ,QAAQ,UAAU,MAAK,aAAa,MAAK,WAAY;AACxE,UAAI,MAAK,aAAW;AAAE,eAAO;;AAC7B,UAAI,QAAQ,MAAK,cAAc,GAAC;AAAE,eAAO;;;AAE3C,WAAO;;AAUF,8BAA4B,QAAO,WAAU,OAAM;AAC1D,QAAA,MAAuB,OAAM;AAAtB,QAAA,QAAA,IAAA;AAAO,QAAA,SAAA,IAAA;AAAwB,QAAE,OAAO;AAC7C,QAAI,CAAC,QAAK;AAAE,aAAO;;AAEnB,QAAI,MAAM,OAAO,aAAa;AAC5B,UAAI,QAAO,CAAC,MAAK,eAAe,YAAY,UAAS,MAAM,eAAe,GAAC;AAAE,eAAO;;AACpF,aAAO,cAAc;;AAEvB,QAAI,QAAO,QAAQ,KAAK;AACxB,QAAI,CAAC,SAAQ,CAAC,cAAc,aAAa,QAAK;AAAE,aAAO;;AACvD,QAAI,WACN;AAAI,gBAAS,OAAM,GAAG,aAAa,cAAc,OAAO,OAAM,KAAK,KAAK,MAAM,MAAK,WAAW;;AAC5F,WAAO;;AAGT,yBAAuB,MAAM;AAC3B,QAAI,CAAC,KAAK,OAAO,KAAK,KAAK,WAAS;AAAE,eAAS,IAAI,KAAK,QAAQ,GAAG,KAAK,GAAG,KAAK;AAC9E,YAAI,KAAK,MAAM,KAAK,GAAC;AAAE,iBAAO,KAAK,IAAI,QAAQ,KAAK,OAAO,IAAI;;AAC/D,YAAI,KAAK,KAAK,GAAG,KAAK,KAAK,WAAS;AAAE;;;;AAExC,WAAO;;AASF,uBAAqB,QAAO,WAAU,OAAM;AACnD,QAAA,MAAkB,OAAM;AAAjB,QAAA,UAAA,IAAA;AACL,QAAI,CAAC,WAAY,SAAO,CAAC,MAAK,eAAe,WAAW,UAChC,QAAQ,eAAe,QAAQ,OAAO,QAAQ,OACxE;AAAI,aAAO;;AAET,QAAI,OAAO,aAAa;AAGxB,QAAI,CAAC,MAAI;AAAE,aAAO;;AAElB,QAAI,SAAQ,KAAK;AAEjB,QAAI,cAAc,QAAO,MAAM,YAAS;AAAE,aAAO;;AAIjD,QAAI,QAAQ,OAAO,QAAQ,QAAQ,KAC9B,aAAY,QAAO,YAAY,cAAc,aAAa,UAAS;AACtE,UAAI,WAAU;AACZ,YAAI,KAAK,OAAM,GAAG,YAAY,QAAQ,UAAU,QAAQ;AACxD,WAAG,aAAa,YAAY,QAAO,WAAW,UAAU,SAAS,GAAG,IAAI,QAAQ,GAAG,QAAQ,IAAI,KAAK,OAAO,KACzF,cAAc,OAAO,GAAG,KAAK,GAAG,QAAQ,IAAI,KAAK;AACnE,kBAAS,GAAG;;AAEd,aAAO;;AAIT,QAAI,OAAM,UAAU,KAAK,SAAS,QAAQ,QAAQ,GAAG;AACnD,UAAI,WAAQ;AAAE,kBAAS,OAAM,GAAG,OAAO,KAAK,KAAK,KAAK,MAAM,OAAM,UAAU;;AAC5E,aAAO;;AAGT,WAAO;;AAUF,6BAA2B,QAAO,WAAU,OAAM;AACzD,QAAA,MAAuB,OAAM;AAAtB,QAAA,QAAA,IAAA;AAAO,QAAA,SAAA,IAAA;AAAwB,QAAE,OAAO;AAC7C,QAAI,CAAC,QAAK;AAAE,aAAO;;AACnB,QAAI,MAAM,OAAO,aAAa;AAC5B,UAAI,QAAO,CAAC,MAAK,eAAe,WAAW,UAAS,MAAM,eAAe,MAAM,OAAO,QAAQ,MAClG;AAAM,eAAO;;AACT,aAAO,aAAa;;AAEtB,QAAI,QAAO,QAAQ,KAAK;AACxB,QAAI,CAAC,SAAQ,CAAC,cAAc,aAAa,QAAK;AAAE,aAAO;;AACvD,QAAI,WACN;AAAI,gBAAS,OAAM,GAAG,aAAa,cAAc,OAAO,OAAM,KAAK,KAAK,MAAM;;AAC5E,WAAO;;AAGT,wBAAsB,MAAM;AAC1B,QAAI,CAAC,KAAK,OAAO,KAAK,KAAK,WAAS;AAAE,eAAS,IAAI,KAAK,QAAQ,GAAG,KAAK,GAAG,KAAK;AAC9E,YAAI,SAAS,KAAK,KAAK;AACvB,YAAI,KAAK,MAAM,KAAK,IAAI,OAAO,YAAU;AAAE,iBAAO,KAAK,IAAI,QAAQ,KAAK,MAAM,IAAI;;AAClF,YAAI,OAAO,KAAK,KAAK,WAAS;AAAE;;;;AAElC,WAAO;;AAwDF,yBAAuB,QAAO,WAAU;AAC/C,QAAA,MAAyB,OAAM;AAAxB,QAAA,QAAA,IAAA;AAAO,QAAA,UAAA,IAAA;AACZ,QAAI,CAAC,MAAM,OAAO,KAAK,KAAK,QAAQ,CAAC,MAAM,WAAW,UAAQ;AAAE,aAAO;;AACvE,QAAI,WAAQ;AAAE,gBAAS,OAAM,GAAG,WAAW,MAAM;;AACjD,WAAO;;AAGT,0BAAwB,OAAO;AAC7B,aAAS,IAAI,GAAG,IAAI,MAAM,WAAW,KAAK;AAC5C,UAAA,MAAiB,MAAM,KAAK;AAAnB,UAAA,OAAA,IAAA;AACL,UAAI,KAAK,eAAe,CAAC,KAAK,oBAAkB;AAAE,eAAO;;;AAE3D,WAAO;;AAOF,oBAAkB,QAAO,WAAU;AAC1C,QAAA,MAAyB,OAAM;AAAxB,QAAA,QAAA,IAAA;AAAO,QAAA,UAAA,IAAA;AACZ,QAAI,CAAC,MAAM,OAAO,KAAK,KAAK,QAAQ,CAAC,MAAM,WAAW,UAAQ;AAAE,aAAO;;AACvE,QAAI,QAAQ,MAAM,KAAK,KAAK,SAAQ,MAAM,WAAW,KAAK,OAAO,eAAe,MAAM,eAAe;AACrG,QAAI,CAAC,MAAM,eAAe,QAAO,QAAO,OAAK;AAAE,aAAO;;AACtD,QAAI,WAAU;AACZ,UAAI,MAAM,MAAM,SAAS,KAAK,OAAM,GAAG,YAAY,KAAK,KAAK,KAAK;AAClE,SAAG,aAAa,UAAU,KAAK,GAAG,IAAI,QAAQ,MAAM;AACpD,gBAAS,GAAG;;AAEd,WAAO;;AAMF,+BAA6B,QAAO,WAAU;AACnD,QAAI,MAAM,OAAM;AAAY,QAAA,QAAA,IAAA;AAAO,QAAA,MAAA,IAAA;AACnC,QAAI,eAAe,gBAAgB,MAAM,OAAO,iBAAiB,IAAI,OAAO,eAAa;AAAE,aAAO;;AAClG,QAAI,OAAO,eAAe,IAAI,OAAO,eAAe,IAAI;AACxD,QAAI,CAAC,QAAQ,CAAC,KAAK,aAAW;AAAE,aAAO;;AACvC,QAAI,WAAU;AACZ,UAAI,OAAQ,EAAC,MAAM,gBAAgB,IAAI,UAAU,IAAI,OAAO,aAAa,QAAQ,KAAK;AACtF,UAAI,KAAK,OAAM,GAAG,OAAO,MAAM,KAAK;AACpC,SAAG,aAAa,cAAc,OAAO,GAAG,KAAK,OAAO;AACpD,gBAAS,GAAG;;AAEd,WAAO;;AAMF,0BAAwB,QAAO,WAAU;AAChD,QAAA,MAAkB,OAAM;AAAjB,QAAA,UAAA,IAAA;AACL,QAAI,CAAC,WAAW,QAAQ,OAAO,QAAQ,MAAI;AAAE,aAAO;;AACpD,QAAI,QAAQ,QAAQ,KAAK,QAAQ,WAAW,QAAQ,IAAI,KAAK;AAC3D,UAAI,UAAS,QAAQ;AACrB,UAAI,SAAS,OAAM,KAAK,UAAS;AAC/B,YAAI,WAAQ;AAAE,oBAAS,OAAM,GAAG,MAAM,SAAQ;;AAC9C,eAAO;;;AAGX,QAAI,QAAQ,QAAQ,cAAc,SAAS,SAAS,WAAW;AAC/D,QAAI,UAAU,MAAI;AAAE,aAAO;;AAC3B,QAAI,WAAQ;AAAE,gBAAS,OAAM,GAAG,KAAK,OAAO,QAAQ;;AACpD,WAAO;;AAMF,sBAAoB,QAAO,WAAU;AAC5C,QAAA,MAAqB,OAAM;AAApB,QAAA,QAAA,IAAA;AAAO,QAAA,MAAA,IAAA;AACZ,QAAI,OAAM,qBAAqB,iBAAiB,OAAM,UAAU,KAAK,SAAS;AAC5E,UAAI,CAAC,MAAM,gBAAgB,CAAC,SAAS,OAAM,KAAK,MAAM,MAAI;AAAE,eAAO;;AACnE,UAAI,WAAQ;AAAE,kBAAS,OAAM,GAAG,MAAM,MAAM,KAAK;;AACjD,aAAO;;AAGT,QAAI,CAAC,MAAM,OAAO,SAAO;AAAE,aAAO;;AAElC,QAAI,WAAU;AACZ,UAAI,SAAQ,IAAI,gBAAgB,IAAI,OAAO,QAAQ;AACnD,UAAI,KAAK,OAAM;AACf,UAAI,OAAM,qBAAqB,iBAAiB,OAAM,qBAAqB,cAAY;AAAE,WAAG;;AAC5F,UAAI,QAAQ,MAAM,SAAS,IAAI,OAAO,eAAe,MAAM,KAAK,IAAI,eAAe,MAAM,WAAW;AACpG,UAAI,QAAQ,UAAS,QAAQ,CAAC,EAAC,MAAM,WAAU;AAC/C,UAAI,MAAM,SAAS,GAAG,KAAK,GAAG,QAAQ,IAAI,MAAM,MAAM,GAAG;AACzD,UAAI,CAAC,SAAS,CAAC,OAAO,SAAS,GAAG,KAAK,GAAG,QAAQ,IAAI,MAAM,MAAM,GAAG,SAAS,CAAC,EAAC,MAAM,WAAU;AAC9F,gBAAQ,CAAC,EAAC,MAAM;AAChB,cAAM;;AAER,UAAI,KAAK;AACP,WAAG,MAAM,GAAG,QAAQ,IAAI,MAAM,MAAM,GAAG;AACvC,YAAI,CAAC,UAAS,CAAC,MAAM,gBAAgB,MAAM,OAAO,QAAQ,OAAO;AAC/D,cAAI,QAAQ,GAAG,QAAQ,IAAI,MAAM,WAAW,SAAS,GAAG,IAAI,QAAQ;AACpE,cAAI,MAAM,KAAK,IAAI,eAAe,OAAO,SAAS,OAAO,UAAU,GAAG,QAC9E;AAAU,eAAG,cAAc,GAAG,QAAQ,IAAI,MAAM,WAAW;;;;AAGvD,gBAAS,GAAG;;AAEd,WAAO;;AA4BF,qBAAmB,QAAO,WAAU;AACzC,QAAI,WAAQ;AAAE,gBAAS,OAAM,GAAG,aAAa,IAAI,aAAa,OAAM;;AACpE,WAAO;;AAGT,0BAAwB,QAAO,MAAM,WAAU;AAC7C,QAAI,UAAS,KAAK,YAAY,SAAQ,KAAK,WAAW,SAAQ,KAAK;AACnE,QAAI,CAAC,WAAU,CAAC,UAAS,CAAC,QAAO,KAAK,kBAAkB,OAAM,OAAK;AAAE,aAAO;;AAC5E,QAAI,CAAC,QAAO,QAAQ,QAAQ,KAAK,OAAO,WAAW,SAAQ,GAAG,SAAQ;AACpE,UAAI,WAAQ;AAAE,kBAAS,OAAM,GAAG,OAAO,KAAK,MAAM,QAAO,UAAU,KAAK,KAAK;;AAC7E,aAAO;;AAET,QAAI,CAAC,KAAK,OAAO,WAAW,QAAO,SAAQ,MAAM,CAAE,QAAM,eAAe,QAAQ,OAAM,KAAK,KAAK,OAClG;AAAI,aAAO;;AACT,QAAI,WACN;AAAI,gBAAS,OAAM,GACL,kBAAkB,KAAK,KAAK,QAAO,MAAM,QAAO,eAAe,QAAO,aACtE,KAAK,KAAK,KACV;;AACZ,WAAO;;AAGT,yBAAuB,QAAO,MAAM,WAAU;AAC5C,QAAI,UAAS,KAAK,YAAY,SAAQ,KAAK,WAAW,MAAM;AAC5D,QAAI,QAAO,KAAK,KAAK,aAAa,OAAM,KAAK,KAAK,WAAS;AAAE,aAAO;;AACpE,QAAI,eAAe,QAAO,MAAM,YAAS;AAAE,aAAO;;AAElD,QAAI,cAAc,KAAK,OAAO,WAAW,KAAK,SAAS,KAAK,UAAU;AACtE,QAAI,eACC,QAAQ,SAAQ,QAAO,eAAe,QAAO,aAAa,aAAa,OAAM,UAC9E,MAAM,UAAU,KAAK,MAAM,OAAM,MAAM,UAAU;AACnD,UAAI,WAAU;AACZ,YAAI,OAAM,KAAK,MAAM,OAAM,UAAU,OAAO,SAAS;AACrD,iBAAS,IAAI,KAAK,SAAS,GAAG,KAAK,GAAG,KAC5C;AAAQ,iBAAO,SAAS,KAAK,KAAK,GAAG,OAAO,MAAM;;AAC5C,eAAO,SAAS,KAAK,QAAO,KAAK;AACjC,YAAI,KAAK,OAAM,GAAG,KAAK,IAAI,kBAAkB,KAAK,MAAM,GAAG,MAAK,KAAK,KAAK,MAAK,IAAI,MAAM,MAAM,GAAG,IAAI,KAAK,QAAQ;AACnH,YAAI,SAAS,OAAM,IAAI,KAAK;AAC5B,YAAI,QAAQ,GAAG,KAAK,SAAO;AAAE,aAAG,KAAK;;AACrC,kBAAS,GAAG;;AAEd,aAAO;;AAGT,QAAI,WAAW,UAAU,SAAS,MAAM;AACxC,QAAI,QAAQ,YAAY,SAAS,MAAM,WAAW,SAAS,MAAM,SAAS,SAAS,WAAW;AAC9F,QAAI,UAAU,QAAQ,UAAU,KAAK,OAAO;AAC1C,UAAI,WAAQ;AAAE,kBAAS,OAAM,GAAG,KAAK,OAAO,QAAQ;;AACpD,aAAO;;AAGT,QAAI,eAAe,YAAY,QAAO,SAAS,SAAS,YAAY,SAAQ,QAAQ;AAClF,UAAI,KAAK,SAAQ,SAAO;AACxB,iBAAS;AACP,eAAK,KAAK;AACV,YAAI,GAAG,aAAW;AAAE;;AACpB,aAAK,GAAG;;AAEV,UAAI,YAAY,QAAO,aAAa;AACpC,aAAO,CAAC,UAAU,aAAa,YAAY,UAAU,YAAU;AAAE;;AACjE,UAAI,GAAG,WAAW,GAAG,YAAY,GAAG,YAAY,UAAU,UAAU;AAClE,YAAI,WAAU;AACZ,cAAI,QAAM,SAAS;AACnB,mBAAS,MAAI,OAAK,SAAS,GAAG,OAAK,GAAG,OAAG;AAAE,oBAAM,SAAS,KAAK,OAAK,KAAG,KAAK;;AAC5E,cAAI,OAAK,OAAM,GAAG,KAAK,IAAI,kBAAkB,KAAK,MAAM,OAAK,QAAQ,KAAK,MAAM,OAAM,UACzC,KAAK,MAAM,YAAY,KAAK,MAAM,OAAM,WAAW,YACnD,IAAI,MAAM,OAAK,OAAK,QAAQ,IAAI,GAAG;AAChF,oBAAS,KAAG;;AAEd,eAAO;;;AAIX,WAAO;;AAyJF,2BAAoC;;;;AACzC,WAAO,SAAS,QAAO,WAAU,OAAM;AACrC,eAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KACzC;AAAM,YAAI,SAAS,GAAG,QAAO,WAAU,QAAK;AAAE,iBAAO;;;AACjD,aAAO;;;AAIX,MAAI,YAAY,cAAc,iBAAiB,cAAc;AAC7D,MAAI,MAAM,cAAc,iBAAiB,aAAa;AAa5C,MAAC,eAAe;IACxB,SAAS,cAAc,eAAe,qBAAqB,gBAAgB;IAC3E,aAAa;IACb,aAAa;IACb,iBAAiB;IACjB,mBAAmB;IACnB,UAAU;IACV,cAAc;IACd,SAAS;;AAQD,MAAC,gBAAgB;IACzB,UAAU,aAAa;IACvB,iBAAiB,aAAa;IAC9B,UAAU,aAAa;IACvB,sBAAsB,aAAa;IACnC,cAAc,aAAa;IAC3B,SAAS,aAAa;;AAExB,OAAS,OAAO,cAAY;AAAE,kBAAc,OAAO,aAAa;;AAAvD;AAGT,MAAM,OAAM,OAAO,aAAa,cAAc,qBAAqB,KAAK,UAAU,YACtE,OAAO,MAAM,cAAc,GAAG,cAAc,WAAW;AAMzD,MAAC,aAAa,OAAM,gBAAgB;;;ACxnB9C,MAAM,OAAO,SAAS,KAAK,SAAS;AAEpC,MAAM,QAAQ,YAAY,OAAsB;AAAA,IAC9C,KAAK,KAAK,SAAS,QAAQ;AAAA,MACzB,MAAM;AAAA,MACN,SAAS;AAAA,QACP;AAAA,UACE,MAAM;AAAA,UACN,SAAS,CAAC,EAAE,MAAM,QAAQ,MAAM;AAAA;AAAA;AAAA;AAAA,IAItC;AAAA,IACA,SAAS;AAAA,MACP;AAAA,MACA,OAAO,EAAE,SAAS,MAAM,SAAS;AAAA,MACjC,OAAO;AAAA;AAAA;AAIX,wBAAsC;AACpC,UAAM,UAAS,SAAS,cAAc;AACtC,YAAO,UAAU,IAAI;AACrB,SAAK,YAAY;AACjB,WAAO;AAAA;AAGT,MAAM,SAAS;AAEf,MAAM,OAAO,IAAI,WAA0B,MAAM;AAAA,IAC/C;AAAA,IACA,oBAA0B,aAAa;AACrC,YAAM,WAAW,KAAK,MAAM,MAAM;AAClC,WAAK,YAAY;AAEjB,YAAM,UAAS,KAAK,YAAY,SAAS,UAAU;AACnD,cAAQ,IAAI,SAAS;AACrB,aAAO,MAAM,YAAY,aAAa,QAAO,QAAQ,QACnD,QAAO,MAAM;AAAA;AAAA;AAKnB,MAAM,SAAS,KAAK,YAAY,GAAG;AACnC,UAAQ,IAAI;AACZ,SAAO,MAAM,YAAY,aAAa,OAAO,QAAQ,QACnD,OAAO,MAAM;",
  "names": []
}
